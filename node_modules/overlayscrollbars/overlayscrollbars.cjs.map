{"version":3,"file":"overlayscrollbars.cjs","sources":["../src/support/cache.ts","../src/support/compatibility/isBrowser.ts","../src/support/utils/types.ts","../src/support/utils/array.ts","../src/support/utils/object.ts","../src/support/utils/alias.ts","../src/support/utils/animation.ts","../src/support/utils/strings.ts","../src/support/utils/equal.ts","../src/support/utils/noop.ts","../src/support/utils/function.ts","../src/support/dom/attribute.ts","../src/support/dom/traversal.ts","../src/support/dom/manipulation.ts","../src/support/dom/create.ts","../src/support/compatibility/vendors.ts","../src/support/compatibility/apis.ts","../src/support/dom/class.ts","../src/support/dom/style.ts","../src/support/dom/dimensions.ts","../src/support/dom/events.ts","../src/support/dom/offset.ts","../src/support/dom/scroll.ts","../src/support/eventListeners.ts","../src/options.ts","../src/classnames.ts","../src/plugins/plugins.ts","../src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","../src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../src/setups/structureSetup/structureSetup.utils.ts","../src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../src/plugins/clickScrollPlugin/clickScrollPlugin.ts","../src/environment.ts","../src/initialization.ts","../src/instances.ts","../src/observers/domObserver.ts","../src/observers/sizeObserver.ts","../src/observers/trinsicObserver.ts","../src/setups/observersSetup/observersSetup.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.calculations.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.events.ts","../src/setups/scrollbarsSetup/scrollbarsSetup.ts","../src/setups/structureSetup/structureSetup.elements.ts","../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../src/setups/structureSetup/structureSetup.ts","../src/setups/setups.ts","../src/overlayscrollbars.ts"],"sourcesContent":["export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n","export const isBrowser = typeof window !== 'undefined';\r\n","import type { PlainObject } from '~/typings';\r\nimport { isBrowser } from '../compatibility/isBrowser';\r\n\r\nconst ElementNodeType = isBrowser && Node.ELEMENT_NODE;\r\nconst { toString, hasOwnProperty } = Object.prototype;\r\nconst typeRgx = /^\\[object (.+)\\]$/;\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : toString.call(obj).replace(typeRgx, '$1').toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): obj is object =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> => {\r\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\r\n\r\n  let key;\r\n  const cstr = 'constructor';\r\n  const ctor = obj[cstr];\r\n  const ctorProto = ctor && ctor.prototype;\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\r\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\r\n\r\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => {\r\n  const instanceofObj = HTMLElement;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => {\r\n  const instanceofObj = Element;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isArrayLike, isString } from './types';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | null | undefined;\r\n\r\n/**\r\n * Iterates through a array or object\r\n * @param arrayLikeOrObject The array or object through which shall be iterated.\r\n * @param callback The function which is responsible for the iteration.\r\n * If the function returns true its treated like a \"continue\" statement.\r\n * If the function returns false its treated like a \"break\" statement.\r\n */\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T>,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T>;\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T> | false | null | undefined;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T>,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T>;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T> | false | null | undefined;\r\nexport function each<T extends PlainObject>(\r\n  obj: T,\r\n  callback: (value: any, indexOrKey: string, source: T) => boolean | unknown\r\n): T;\r\nexport function each<T extends PlainObject>(\r\n  obj: T | false | null | undefined,\r\n  callback: (value: any, indexOrKey: string, source: T) => boolean | unknown\r\n): T | false | null | undefined;\r\nexport function each(\r\n  source: Array<any> | ArrayLike<any> | ReadonlyArray<any> | PlainObject | false | null | undefined,\r\n  callback: (value: any, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<any> | ArrayLike<any> | ReadonlyArray<any> | PlainObject | false | null | undefined {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    // cant use support func keys here due to circular dep\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns true when the passed item is in the passed array and false otherwise.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @returns Whether the item is in the array.\r\n */\r\nexport const inArray = <T = any>(arr: T[], item: T): boolean => arr.indexOf(item) >= 0;\r\n\r\n/**\r\n * Concats two arrays and returns an new array without modifying any of the passed arrays.\r\n * @param a Array A.\r\n * @param b Array B.\r\n * @returns A new array which has the entries of both arrays.\r\n */\r\nexport const concat = <T>(a: T[] | ReadonlyArray<T>, b: T[] | ReadonlyArray<T>): T[] => a.concat(b);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => {\r\n  // IE11 doesnt have support for Array.from\r\n  const original = Array.from;\r\n  const result: T[] = [];\r\n\r\n  if (original && arr) {\r\n    return original(arr);\r\n  }\r\n\r\n  if (arr instanceof Set) {\r\n    arr.forEach((value) => {\r\n      push(result, value);\r\n    });\r\n  } else {\r\n    each(arr, (elm) => {\r\n      push(result, elm);\r\n    });\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Creates an array if the passed value is not an array, or returns the value if it is.\r\n * @param value The value.\r\n * @returns An array which represents the passed value(s).\r\n */\r\nexport const createOrKeepArray = <T>(value: T | T[]): T[] => (isArray(value) ? value : [value]);\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean => !!array && !array.length;\r\n\r\n/**\r\n * Deduplicates all items of the array.\r\n * @param array The array to be deduplicated.\r\n * @returns The deduplicated array.\r\n */\r\nexport const deduplicateArray = <T extends any[]>(array: T): T => from(new Set(array)) as T;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isFunction, isPlainObject, isNull } from './types';\r\nimport { each } from './array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(source, (_, key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && isPlainObject(copy)) {\r\n        const src = target[key as keyof T];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key as keyof T] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key as keyof T] = copyIsArray ? copy.slice() : copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\nexport const removeUndefinedProperties = <T extends PlainObject>(target: T, deep?: boolean): T =>\r\n  each(assignDeep({}, target), (value, key, copy) => {\r\n    if (value === undefined) {\r\n      delete copy[key];\r\n    } else if (deep && value && isPlainObject(value)) {\r\n      copy[key as keyof typeof copy] = removeUndefinedProperties(value, deep) as any;\r\n    }\r\n  });\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => {\r\n  // eslint-disable-next-line no-restricted-syntax, no-unreachable-loop, guard-for-in\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n};\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\n\r\nexport const wnd = (isBrowser ? window : {}) as typeof window;\r\nexport const mathMax = Math.max;\r\nexport const mathMin = Math.min;\r\nexport const mathRound = Math.round;\r\nexport const mathFloor = Math.floor;\r\nexport const mathCeil = Math.ceil;\r\nexport const mathAbs = Math.abs;\r\nexport const cAF = wnd.cancelAnimationFrame;\r\nexport const rAF = wnd.requestAnimationFrame;\r\nexport const setT = wnd.setTimeout;\r\nexport const clearT = wnd.clearTimeout;\r\n","import { mathMax, rAF, cAF } from './alias';\r\nimport { isFunction } from './types';\r\n\r\n/**\r\n * percent: current percent (0 - 1),\r\n * time: current time (duration * percent),\r\n * min: start value\r\n * max: end value\r\n * duration: duration in ms\r\n */\r\nexport type EasingFn = (\r\n  percent: number,\r\n  time: number,\r\n  min: number,\r\n  max: number,\r\n  duration: number\r\n) => number;\r\n\r\nconst animationCurrentTime = () => performance.now();\r\n\r\nexport const animateNumber = (\r\n  from: number,\r\n  to: number,\r\n  duration: number,\r\n  onFrame: (progress: number, percent: number, completed: boolean) => any,\r\n  easing?: EasingFn | false\r\n): ((complete?: boolean) => void) => {\r\n  let animationFrameId = 0;\r\n  const timeStart = animationCurrentTime();\r\n  const finalDuration = mathMax(0, duration);\r\n  const frame = (complete?: boolean) => {\r\n    const timeNow = animationCurrentTime();\r\n    const timeElapsed = timeNow - timeStart;\r\n    const stopAnimation = timeElapsed >= finalDuration;\r\n    const percent = complete\r\n      ? 1\r\n      : 1 - (mathMax(0, timeStart + finalDuration - timeNow) / finalDuration || 0);\r\n    const progress =\r\n      (to - from) *\r\n        (isFunction(easing)\r\n          ? easing(percent, percent * finalDuration, 0, 1, finalDuration)\r\n          : percent) +\r\n      from;\r\n    const animationCompleted = stopAnimation || percent === 1;\r\n\r\n    onFrame && onFrame(progress, percent, animationCompleted);\r\n\r\n    animationFrameId = animationCompleted ? 0 : rAF!(() => frame());\r\n  };\r\n  frame();\r\n  return (complete) => {\r\n    cAF!(animationFrameId);\r\n    complete && frame(complete);\r\n  };\r\n};\r\n","export const strPaddingTop = 'paddingTop';\r\nexport const strPaddingRight = 'paddingRight';\r\nexport const strPaddingLeft = 'paddingLeft';\r\nexport const strPaddingBottom = 'paddingBottom';\r\nexport const strMarginLeft = 'marginLeft';\r\nexport const strMarginRight = 'marginRight';\r\nexport const strMarginBottom = 'marginBottom';\r\nexport const strOverflowX = 'overflowX';\r\nexport const strOverflowY = 'overflowY';\r\nexport const strWidth = 'width';\r\nexport const strHeight = 'height';\r\nexport const strHidden = 'hidden';\r\nexport const strVisible = 'visible';\r\n","import type { WH } from '../dom/dimensions';\r\nimport type { XY } from '../dom/offset';\r\nimport type { TRBL } from '../dom/style';\r\nimport type { PlainObject } from '~/typings';\r\nimport { each } from './array';\r\nimport { mathRound } from './alias';\r\nimport { strHeight, strWidth } from './strings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: WH<T>, b?: WH<T>) => equal<WH<T>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: XY<T>, b?: XY<T>) => equal<XY<T>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, [strWidth, strHeight], round && ((value) => mathRound(value)));\r\n","export const noop = () => {}; // eslint-disable-line\r\n","import { isNumber, isFunction } from './types';\r\nimport { from } from './array';\r\nimport { rAF, cAF, setT, clearT } from './alias';\r\nimport { noop } from './noop';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const bind = <A extends any[], B extends any[], R>(\r\n  fn: (...args: [...A, ...B]) => R,\r\n  ...args: A\r\n): ((...args: B) => R) => fn.bind(0, ...args);\r\n\r\n/**\r\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\r\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\r\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\r\n */\r\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(callback, isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let clear = noop;\r\n  const { _timeout, _maxDelay, _mergeParams } = options || {};\r\n\r\n  const invokeFunctionToDebounce = function (args: IArguments) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      // @ts-ignore\r\n      const timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n      clear = () => clearTimeoutFn(timeoutId);\r\n\r\n      if (hasMaxWait && !maxTimeoutId) {\r\n        maxTimeoutId = setT(flush, finalMaxWait as number);\r\n      }\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import type { AttributeTarget } from './types';\r\nimport { isUndefined } from '../utils/types';\r\nimport { bind, from } from '../utils';\r\n\r\ntype Attr = {\r\n  (elm: AttributeTarget, attrName: string): string | null;\r\n  (elm: AttributeTarget, attrName: string, value: string): void;\r\n  (elm: AttributeTarget, attrName: string, value?: string): string | null | void;\r\n};\r\n\r\nexport type DomTokens = string | false | null | undefined | void;\r\n\r\n/**\r\n * Gets or sets a attribute with the given attribute of the given element depending whether the value attribute is given.\r\n * Returns null if the element has no attribute with the given name.\r\n * @param elm The element of which the attribute shall be get or set.\r\n * @param attrName The attribute name which shall be get or set.\r\n * @param value The value of the attribute which shall be set.\r\n */\r\nexport const attr = ((\r\n  elm: AttributeTarget,\r\n  attrName: string,\r\n  value?: string\r\n): string | null | void => {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm.getAttribute(attrName) : null;\r\n  }\r\n  elm && elm.setAttribute(attrName, value);\r\n}) as Attr;\r\n\r\n/**\r\n * Removes the given attribute from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute name.\r\n */\r\nexport const removeAttr = (elm: AttributeTarget, attrName: string): void => {\r\n  elm && elm.removeAttribute(attrName);\r\n};\r\n\r\nexport const domTokenListAttr = (elm: AttributeTarget, attrName: string) => {\r\n  const elmAttr = bind(attr, elm, attrName);\r\n  const getDomTokenListSet = (tokens: DomTokens) =>\r\n    new Set((tokens || '').split(' ').filter((token) => !!token));\r\n  const domTokenListOperation = (\r\n    initialSet: Set<string>,\r\n    operationTokens: DomTokens,\r\n    operation: 'add' | 'delete'\r\n  ) => {\r\n    const initialSetCopy = new Set(initialSet);\r\n    getDomTokenListSet(operationTokens).forEach((token) => {\r\n      initialSetCopy[operation](token);\r\n    });\r\n    return from(initialSetCopy).join(' ');\r\n  };\r\n  const initialSet = getDomTokenListSet(elmAttr());\r\n\r\n  return {\r\n    _remove: (removeTokens: DomTokens) =>\r\n      elmAttr(domTokenListOperation(initialSet, removeTokens, 'delete')),\r\n    _add: (addTokens: DomTokens) => elmAttr(domTokenListOperation(initialSet, addTokens, 'add')),\r\n    _has: (hasTokens: DomTokens) => {\r\n      const tokenSet = getDomTokenListSet(hasTokens);\r\n      return from(tokenSet).reduce(\r\n        (boolean, token) => boolean && initialSet.has(token),\r\n        tokenSet.size > 0\r\n      );\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be removed.\r\n * @param value The value which shall be removed.\r\n */\r\nexport const removeAttrClass = (elm: AttributeTarget, attrName: string, value: string) => {\r\n  domTokenListAttr(elm, attrName)._remove(value);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds value to it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added.\r\n * @param value The value which shall be added.\r\n */\r\nexport const addAttrClass = (elm: AttributeTarget, attrName: string, value: string) => {\r\n  domTokenListAttr(elm, attrName)._add(value);\r\n  return bind(removeAttrClass, elm, attrName, value);\r\n};\r\n\r\nexport const addRemoveAttrClass = (\r\n  elm: AttributeTarget,\r\n  attrName: string,\r\n  value: string,\r\n  add?: boolean\r\n) => {\r\n  (add ? addAttrClass : removeAttrClass)(elm, attrName, value);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (elm: AttributeTarget, attrName: string, value: string): boolean =>\r\n  domTokenListAttr(elm, attrName)._has(value);\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\nimport { isElement } from '../utils/types';\r\nimport { push, from } from '../utils/array';\r\n\r\ntype InputElementType = Node | Element | false | null | undefined;\r\ntype OutputElementType = Node | Element | false | null | undefined;\r\n\r\nconst getElmPrototype = (isBrowser && Element.prototype) as Element; // only Element.prototype wont work on server\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst find = (selector: string, elm?: InputElementType): Element[] => {\r\n  const arr: Array<Element> = [];\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? rootElm.querySelector(selector) : null;\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nconst is = (elm: InputElementType, selector: string): boolean => {\r\n  if (isElement(elm)) {\r\n    /* istanbul ignore next */\r\n    // eslint-disable-next-line\r\n    const fn: (...args: any) => boolean =\r\n      // @ts-ignore\r\n      getElmPrototype.matches || getElmPrototype.msMatchesSelector;\r\n    return fn.call(elm, selector);\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nconst parent = (elm: InputElementType): OutputElementType => elm && elm.parentElement;\r\n\r\nconst closest = (elm: InputElementType, selector: string): OutputElementType => {\r\n  if (isElement(elm)) {\r\n    // IE11 doesnt support closest\r\n    const closestFn = getElmPrototype.closest;\r\n    if (closestFn) {\r\n      return closestFn.call(elm, selector);\r\n    }\r\n\r\n    do {\r\n      if (is(elm, selector)) {\r\n        return elm as Element;\r\n      }\r\n      elm = parent(elm);\r\n    } while (elm);\r\n  }\r\n};\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nconst liesBetween = (\r\n  elm: InputElementType,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n  const deepBoundaryIsValid =\r\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        (deepBoundaryIsValid &&\r\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\r\n            closestHighBoundaryElm)\r\n    : false;\r\n};\r\n\r\nexport { find, findFirst, is, children, contents, parent, liesBetween, closest };\r\n","import { isArrayLike } from '../utils/types';\r\nimport { each, from } from '../utils/array';\r\nimport { noop } from '../utils/noop';\r\nimport { parent } from './traversal';\r\n\r\ntype ManipulationTarget = Node | false | null | undefined;\r\ntype NodeCollection = ArrayLike<Node> | ManipulationTarget;\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    // element.remove() not supported in IE11\r\n    const parentElm = parent(nodes);\r\n    parentElm && parentElm.removeChild(nodes);\r\n  }\r\n};\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nconst before = (\r\n  parentElm: ManipulationTarget,\r\n  preferredAnchor: ManipulationTarget,\r\n  insertedElms: NodeCollection\r\n): (() => void) => {\r\n  if (insertedElms && parentElm) {\r\n    let anchor: ManipulationTarget = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | null | undefined;\r\n\r\n    if (isArrayLike(insertedElms)) {\r\n      fragment = document.createDocumentFragment();\r\n\r\n      // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n      each(insertedElms, (insertedElm) => {\r\n        if (insertedElm === anchor) {\r\n          anchor = insertedElm.previousSibling;\r\n        }\r\n        fragment!.appendChild(insertedElm);\r\n      });\r\n    } else {\r\n      fragment = insertedElms;\r\n    }\r\n\r\n    // if the preferred anchor isn't null set it to a valid anchor\r\n    if (preferredAnchor) {\r\n      if (!anchor) {\r\n        anchor = parentElm.firstChild;\r\n      } else if (anchor !== preferredAnchor) {\r\n        anchor = anchor.nextSibling;\r\n      }\r\n    }\r\n\r\n    parentElm.insertBefore(fragment, anchor || null);\r\n    return () => removeElements(insertedElms);\r\n  }\r\n  return noop;\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const appendChildren = (node: ManipulationTarget, children: NodeCollection) =>\r\n  before(node, null, children);\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const prependChildren = (node: ManipulationTarget, children: NodeCollection) =>\r\n  before(node, node && node.firstChild, children);\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertBefore = (node: ManipulationTarget, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node, insertedNodes);\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertAfter = (node: ManipulationTarget, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n","import { each } from '../utils/array';\r\nimport { attr } from './attribute';\r\nimport { contents } from './traversal';\r\nimport { removeElements } from './manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  attr(div, 'class', classNames);\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import { concat, each } from '../utils/array';\r\nimport { hasOwnProperty } from '../utils/object';\r\nimport { createDiv } from '../dom/create';\r\nimport { wnd } from '../utils/alias';\r\n\r\nconst firstLetterToUpper = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\r\nconst getDummyStyle = (): CSSStyleDeclaration => createDiv().style;\r\n\r\nexport type JsApiName = Extract<keyof typeof window, string>;\r\n\r\n// https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\r\n\r\nexport const cssPrefixes: ReadonlyArray<string> = ['-webkit-', '-moz-', '-o-', '-ms-'];\r\nexport const jsPrefixes: ReadonlyArray<string> = [\r\n  'WebKit',\r\n  'Moz',\r\n  'O',\r\n  'MS',\r\n  'webkit',\r\n  'moz',\r\n  'o',\r\n  'ms',\r\n];\r\n\r\nexport const jsCache: { [key: string]: any } = {};\r\nexport const cssCache: { [key: string]: any } = {};\r\n\r\n/**\r\n * Gets the name of the given CSS property with vendor prefix if it isn't supported without it, or and empty string if unsupported.\r\n * @param name The name of the CSS property which shall be get.\r\n */\r\nexport const cssProperty = (name: string): string | undefined => {\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const uppercasedName: string = firstLetterToUpper(name);\r\n  const elmStyle: CSSStyleDeclaration = getDummyStyle();\r\n\r\n  each(cssPrefixes, (prefix: string) => {\r\n    const prefixWithoutDashes: string = prefix.replace(/-/g, '');\r\n    const resultPossibilities: Array<string> = [\r\n      name, // transition\r\n      prefix + name, // -webkit-transition\r\n      prefixWithoutDashes + uppercasedName, // webkitTransition\r\n      firstLetterToUpper(prefixWithoutDashes) + uppercasedName, // WebkitTransition\r\n    ];\r\n\r\n    // eslint-disable-next-line no-return-assign\r\n    return !(result = resultPossibilities.find(\r\n      (resultPossibility: string) =>\r\n        elmStyle[resultPossibility as keyof CSSStyleDeclaration] !== undefined\r\n    ));\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the name of the given CSS property value(s), with vendor prefix if it isn't supported without it, or an empty string if no value is supported.\r\n * @param property The CSS property to which the CSS property value(s) belong.\r\n * @param values The value(s) separated by spaces which shall be get.\r\n * @param suffix A suffix which is added to each value in case the value is a function or something else more advanced.\r\n */\r\nexport const cssPropertyValue = (\r\n  property: string,\r\n  values: string,\r\n  suffix?: string\r\n): string | undefined => {\r\n  const name = `${property} ${values}`;\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const dummyStyle: CSSStyleDeclaration = getDummyStyle();\r\n  const possbleValues: Array<string> = values.split(' ');\r\n  const preparedSuffix: string = suffix || '';\r\n  const cssPrefixesWithFirstEmpty = concat([''], cssPrefixes);\r\n\r\n  each(possbleValues, (possibleValue: string) => {\r\n    each(cssPrefixesWithFirstEmpty, (prefix: string) => {\r\n      const prop = prefix + possibleValue;\r\n      dummyStyle.cssText = `${property}:${prop}${preparedSuffix}`;\r\n      if (dummyStyle.length) {\r\n        result = prop;\r\n        return false;\r\n      }\r\n    });\r\n    return !result;\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the requested JS function, object or constructor with vendor prefix if it isn't supported without or undefined if unsupported.\r\n * @param name The name of the JS function, object or constructor.\r\n */\r\nexport const jsAPI = <T = any>(name: JsApiName): T | undefined => {\r\n  let result: any = jsCache[name] || wnd[name];\r\n\r\n  if (hasOwnProperty(jsCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  each(jsPrefixes, (prefix: string) => {\r\n    result = result || wnd[(prefix + firstLetterToUpper(name)) as JsApiName];\r\n    return !result;\r\n  });\r\n\r\n  jsCache[name] = result;\r\n  return result;\r\n};\r\n","import { jsAPI } from './vendors';\r\n\r\nexport const MutationObserverConstructor = jsAPI<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  jsAPI<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = jsAPI<typeof ResizeObserver>('ResizeObserver');\r\nexport const scrollT = jsAPI<new (constructor: unknown) => AnimationTimeline>(\r\n  // @ts-ignore\r\n  'ScrollTimeline'\r\n);\r\n","import type { AttributeTarget } from './types';\r\nimport type { DomTokens } from './attribute';\r\nimport { each, from } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { domTokenListAttr } from './attribute';\r\n\r\nconst createDomTokenListClass = (elm: AttributeTarget) => domTokenListAttr(elm, 'class');\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: AttributeTarget, className: DomTokens): boolean =>\r\n  createDomTokenListClass(elm)._has(className);\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: AttributeTarget, className: DomTokens): void => {\r\n  createDomTokenListClass(elm)._remove(className);\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: AttributeTarget, className: DomTokens): (() => void) => {\r\n  createDomTokenListClass(elm)._add(className);\r\n  return bind(removeClass, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (classNameA: DomTokens, classNameB: DomTokens) => {\r\n  const set = new Set<string>(classNameA ? classNameA.split(' ') : []);\r\n\r\n  each(classNameB ? classNameB.split(' ') : [], (className) => {\r\n    set.has(className) ? set.delete(className) : set.add(className);\r\n  });\r\n\r\n  return from(set);\r\n};\r\n","import type { PlainObject, StyleObject, StyleObjectKey, StyleObjectValue } from '~/typings';\r\nimport type { XY } from './offset';\r\nimport type { AttributeTarget } from './types';\r\nimport { wnd } from '../utils/alias';\r\nimport { each } from '../utils/array';\r\nimport { isString, isNumber, isObject } from '../utils/types';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst customCssPropRegex = /^--/;\r\n\r\nconst getCSSVal = (computedStyle: CSSStyleDeclaration, prop: StyleObjectKey): string =>\r\n  computedStyle.getPropertyValue(prop) || computedStyle[prop as any] || '';\r\n\r\nconst validFiniteNumber = (number: number) => {\r\n  const notNaN = number || 0;\r\n  return isFinite(notNaN) ? notNaN : 0;\r\n};\r\n\r\nconst parseToZeroOrNumber = (value?: string): number => validFiniteNumber(parseFloat(value || ''));\r\n\r\nexport const ratioToCssPercent = (ratio: number) =>\r\n  `${(validFiniteNumber(ratio) * 100).toFixed(3)}%`;\r\n\r\nexport const numberToCssPx = (number: number) => `${validFiniteNumber(number)}px`;\r\n\r\nexport function setStyles(elm: AttributeTarget, styles: StyleObject): void {\r\n  elm &&\r\n    each(styles, (rawValue: StyleObjectValue, name) => {\r\n      try {\r\n        const elmStyle = elm.style;\r\n        const value = isNumber(rawValue) ? numberToCssPx(rawValue) : (rawValue || '') + '';\r\n\r\n        if (customCssPropRegex.test(name)) {\r\n          elmStyle.setProperty(name, value);\r\n        } else {\r\n          elmStyle[name as any] = value;\r\n        }\r\n      } catch {}\r\n    });\r\n}\r\n\r\nexport function getStyles(\r\n  elm: AttributeTarget,\r\n  styles: Array<StyleObjectKey>,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>>;\r\nexport function getStyles(\r\n  elm: AttributeTarget,\r\n  styles: StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): string;\r\nexport function getStyles(\r\n  elm: AttributeTarget,\r\n  styles: Array<StyleObjectKey> | StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>> | string {\r\n  const getSingleStyle = isString(styles);\r\n  let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n\r\n  if (elm) {\r\n    const computedStyle = wnd.getComputedStyle(elm, pseudoElm) || elm.style;\r\n    getStylesResult = getSingleStyle\r\n      ? getCSSVal(computedStyle, styles)\r\n      : styles.reduce((result, key) => {\r\n          result[key] = getCSSVal(computedStyle, key);\r\n          return result;\r\n        }, getStylesResult as PlainObject);\r\n  }\r\n  return getStylesResult;\r\n}\r\n\r\nexport const getDirectionIsRTL = (elm: AttributeTarget): boolean =>\r\n  getStyles(elm, 'direction') === 'rtl';\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: AttributeTarget,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}` as StyleObjectKey;\r\n  const right = `${finalPrefix}right${finalSuffix}` as StyleObjectKey;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}` as StyleObjectKey;\r\n  const left = `${finalPrefix}left${finalSuffix}` as StyleObjectKey;\r\n  const result = getStyles(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n\r\nexport const getTrasformTranslateValue = (\r\n  value: string | number | XY<string | number>,\r\n  isHorizontal?: boolean\r\n) =>\r\n  `translate${\r\n    isObject(value) ? `(${value.x},${value.y})` : `${isHorizontal ? 'X' : 'Y'}(${value})`\r\n  }`;\r\n","import type { AttributeTarget } from './types';\r\nimport { getStyles } from './style';\r\nimport { mathRound, wnd } from '../utils/alias';\r\nimport { bind } from '../utils/function';\r\nimport { strHeight, strWidth } from '../utils/strings';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\nconst getElmWidthHeightProperty = <E extends HTMLElement | Window>(\r\n  property: E extends HTMLElement ? 'client' | 'offset' | 'scroll' : 'inner',\r\n  elm: E | false | null | undefined\r\n): Readonly<WH> =>\r\n  elm\r\n    ? {\r\n        w: (elm as any)[`${property}Width`],\r\n        h: (elm as any)[`${property}Height`],\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const windowSize = (customWnd?: Window): Readonly<WH> =>\r\n  getElmWidthHeightProperty('inner', customWnd || wnd);\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const offsetSize = bind(getElmWidthHeightProperty<HTMLElement>, 'offset') satisfies (\r\n  elm: AttributeTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const clientSize = bind(getElmWidthHeightProperty<HTMLElement>, 'client') satisfies (\r\n  elm: AttributeTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const scrollSize = bind(getElmWidthHeightProperty<HTMLElement>, 'scroll') satisfies (\r\n  elm: AttributeTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const fractionalSize = (elm: AttributeTarget): Readonly<WH> => {\r\n  const cssWidth = parseFloat(getStyles(elm, strWidth)) || 0;\r\n  const cssHeight = parseFloat(getStyles(elm, strHeight)) || 0;\r\n  return {\r\n    w: cssWidth - mathRound(cssWidth),\r\n    h: cssHeight - mathRound(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: AttributeTarget): boolean => !!elm && elementHasDimensions(elm);\r\n\r\n/**\r\n * Determines whether the passed DOM Rect has any dimensions.\r\n */\r\nexport const domRectHasDimensions = (rect?: DOMRectReadOnly | false | null) =>\r\n  !!(rect && (rect[strHeight] || rect[strWidth]));\r\n\r\n/**\r\n * Determines whether current DOM Rect has appeared according the the previous dom rect..\r\n * @param currContentRect The current DOM Rect.\r\n * @param prevContentRect The previous DOM Rect.\r\n * @returns Whether the dom rect appeared.\r\n */\r\nexport const domRectAppeared = (\r\n  currContentRect: DOMRectReadOnly | false | null | undefined,\r\n  prevContentRect: DOMRectReadOnly | false | null | undefined\r\n) => {\r\n  const rectHasDimensions = domRectHasDimensions(currContentRect);\r\n  const rectHadDimensions = domRectHasDimensions(prevContentRect);\r\n  return !rectHadDimensions && rectHasDimensions;\r\n};\r\n","import { isUndefined } from '../utils/types';\r\nimport { each, runEachAndClear } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { wnd } from '../utils/alias';\r\nimport { noop } from '../utils/noop';\r\nimport { keys } from '../utils';\r\n\r\nlet passiveEventsSupport: boolean | undefined;\r\nconst passiveStr = 'passive';\r\nconst supportPassiveEvents = (): boolean => {\r\n  // IE11 doesn't support passive events\r\n  if (isUndefined(passiveEventsSupport)) {\r\n    passiveEventsSupport = false;\r\n    try {\r\n      /* eslint-disable */\r\n      // @ts-ignore\r\n      wnd.addEventListener(\r\n        passiveStr,\r\n        noop,\r\n        Object.defineProperty({}, passiveStr, {\r\n          get() {\r\n            passiveEventsSupport = true;\r\n          },\r\n        })\r\n      );\r\n      /* eslint-enable */\r\n    } catch {}\r\n  }\r\n  return passiveEventsSupport;\r\n};\r\nconst splitEventNames = (eventNames: string) => eventNames.split(' ');\r\n\r\nexport interface EventListenerOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\nexport type EventListenerMap = {\r\n  [eventNames: string]: (event: Event) => any;\r\n};\r\n\r\n/**\r\n * Removes the passed event listener for the passed event names with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const removeEventListener = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(splitEventNames(eventNames), (eventName) => {\r\n    target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const addEventListener = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  options?: EventListenerOptions\r\n): (() => void) => {\r\n  const doSupportPassiveEvents = supportPassiveEvents();\r\n  const passive = (doSupportPassiveEvents && options && options._passive) ?? doSupportPassiveEvents;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const nativeOptions: AddEventListenerOptions | boolean = doSupportPassiveEvents\r\n    ? {\r\n        passive,\r\n        capture,\r\n      }\r\n    : capture;\r\n\r\n  return bind(\r\n    runEachAndClear,\r\n    splitEventNames(eventNames).map((eventName) => {\r\n      const finalListener = (\r\n        once\r\n          ? (evt: T) => {\r\n              removeEventListener(target, eventName, finalListener, capture);\r\n              listener(evt);\r\n            }\r\n          : listener\r\n      ) as EventListener;\r\n\r\n      target.addEventListener(eventName, finalListener, nativeOptions);\r\n      return bind(removeEventListener, target, eventName, finalListener, capture);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * Adds the passed event listeners for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventListenerMap A map which descirbes the event names and event listeners to be added.\r\n * @param options The options of the added listeners.\r\n */\r\nexport const addEventListeners = (\r\n  target: EventTarget,\r\n  eventListenerMap: EventListenerMap,\r\n  options?: EventListenerOptions\r\n): (() => void) =>\r\n  bind(\r\n    runEachAndClear,\r\n    keys(eventListenerMap).map((eventNames) =>\r\n      addEventListener(target, eventNames, eventListenerMap[eventNames], options)\r\n    )\r\n  );\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import type { AttributeTarget } from './types';\r\nimport { getBoundingClientRect } from './dimensions';\r\nimport { wnd } from '../utils/alias';\r\n\r\nexport interface XY<T = number> {\r\n  x: T;\r\n  y: T;\r\n}\r\n\r\nconst zeroObj: XY = {\r\n  x: 0,\r\n  y: 0,\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element relative to the document. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const absoluteCoordinates = (elm: AttributeTarget): Readonly<XY> => {\r\n  const rect = elm && getBoundingClientRect(elm);\r\n  return rect\r\n    ? {\r\n        x: rect.left + wnd.pageYOffset, //IE11 compat\r\n        y: rect.top + wnd.pageXOffset, //IE11 compat\r\n      }\r\n    : zeroObj;\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const offsetCoordinates = (elm: AttributeTarget): Readonly<XY> =>\r\n  elm\r\n    ? {\r\n        x: elm.offsetLeft,\r\n        y: elm.offsetTop,\r\n      }\r\n    : zeroObj;\r\n","import type { Environment } from '~/environment';\r\nimport type { XY } from './offset';\r\nimport { isNumber } from '../utils';\r\n\r\n/**\r\n * Transforms a normalized (>= 0) scroll position to a RTL compatilbe scroll position value.\r\n * @param normalizedScrollPosition The normalized scroll position value.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `false` / `undefined` if the rtl scroll behavior doesn't apply.\r\n * @returns The input scroll position but transformed to a RTL compatible format.\r\n */\r\nexport const getRTLCompatibleScrollPosition = (\r\n  normalizedScrollPosition: number,\r\n  normalizedScrollPositionMax: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n) =>\r\n  rtlScrollBehavior\r\n    ? rtlScrollBehavior.n\r\n      ? -normalizedScrollPosition\r\n      : rtlScrollBehavior.i\r\n      ? normalizedScrollPositionMax - normalizedScrollPosition\r\n      : normalizedScrollPosition\r\n    : normalizedScrollPosition;\r\n\r\n/**\r\n * Gets the RTL compatilbe scroll boundaries from the normalized (>= 0) max scroll position.\r\n * @param normalizedScrollPositionMax The normalzed max scroll position value.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `false` / `undefined` if the rtl scroll behavior doesn't apply.\r\n * @returns RTL compatible scroll boundaries. (min will scroll to start and max will scroll to end)\r\n */\r\nexport const getRTLCompatibleScrollBounds = (\r\n  normalizedScrollPositionMax: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n): [min: number, max: number] => [\r\n  rtlScrollBehavior ? (rtlScrollBehavior.i ? normalizedScrollPositionMax : 0) : 0,\r\n  getRTLCompatibleScrollPosition(\r\n    normalizedScrollPositionMax,\r\n    normalizedScrollPositionMax,\r\n    rtlScrollBehavior\r\n  ),\r\n];\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const scrollElementTo = (\r\n  elm: HTMLElement,\r\n  position: Partial<XY> | number | false | null | undefined\r\n): void => {\r\n  const { x, y } = isNumber(position) ? { x: position, y: position } : position || {};\r\n  isNumber(x) && (elm.scrollLeft = x);\r\n  isNumber(y) && (elm.scrollTop = y);\r\n};\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const getElmentScroll = (elm: HTMLElement): Readonly<XY> => ({\r\n  x: elm.scrollLeft,\r\n  y: elm.scrollTop,\r\n});\r\n","import { isBoolean, isFunction, isString } from './utils/types';\r\nimport { keys } from './utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear, createOrKeepArray } from './utils/array';\r\nimport { bind } from './utils/function';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(createOrKeepArray(listener), callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = (\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure?:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener((currListener) => {\r\n        isFunction(currListener) && eventSet.add(currListener);\r\n      }, listenerOrPure as Exclude<typeof listenerOrPure, boolean>);\r\n\r\n      return bind(\r\n        removeEvent,\r\n        nameOrEventListeners,\r\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\r\n      );\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      eventListener && push(offFns, addEvent(key, eventListener));\r\n    });\r\n\r\n    return bind(runEachAndClear, offFns);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    each(from(events.get(name)), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n","import {\r\n  assignDeep,\r\n  each,\r\n  isObject,\r\n  keys,\r\n  isArray,\r\n  hasOwnProperty,\r\n  isFunction,\r\n  isEmptyObject,\r\n  concat,\r\n} from '~/support';\r\nimport type { DeepPartial, DeepReadonly } from '~/typings';\r\n\r\nexport type OptionsField = string;\r\n\r\nexport type OptionsPrimitiveValue =\r\n  | boolean\r\n  | number\r\n  | string\r\n  | Array<any>\r\n  | ReadonlyArray<any>\r\n  | [any]\r\n  | [any, ...any[]]\r\n  | ((this: any, ...args: any[]) => any)\r\n  | null;\r\n\r\nexport type OptionsObject = {\r\n  [field: OptionsField]: OptionsPrimitiveValue | OptionsObject;\r\n};\r\n\r\ntype OptionsObjectFieldNameTuples<T> = T extends OptionsPrimitiveValue\r\n  ? []\r\n  : {\r\n      [K in Extract<keyof T, OptionsField>]: [K, ...OptionsObjectFieldNameTuples<T[K]>];\r\n    }[Extract<keyof T, OptionsField>];\r\n\r\ntype JoinOptionsObjectFieldTuples<\r\n  T extends OptionsField[],\r\n  IncompletePath extends boolean = false\r\n> = T extends [infer F]\r\n  ? F\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends OptionsField\r\n    ?\r\n        | (IncompletePath extends true ? F : never)\r\n        | `${F}.${JoinOptionsObjectFieldTuples<Extract<R, OptionsField[]>>}`\r\n    : never\r\n  : OptionsField;\r\n\r\ntype SplitJoinedOptionsObjectFieldTuples<S extends string> = string extends S\r\n  ? OptionsField[]\r\n  : S extends ''\r\n  ? []\r\n  : S extends `${infer T}.${infer U}`\r\n  ? [T, ...SplitJoinedOptionsObjectFieldTuples<U>]\r\n  : [S];\r\n\r\ntype OptionsObjectFieldTuplesType<O, T extends OptionsField[]> = T extends [infer F]\r\n  ? F extends keyof O\r\n    ? O[F]\r\n    : never\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends keyof O\r\n    ? O[F] extends OptionsPrimitiveValue\r\n      ? O[F]\r\n      : OptionsObjectFieldTuplesType<O[F], Extract<R, OptionsField[]>>\r\n    : never\r\n  : never;\r\n\r\ntype OptionsObjectFieldPath<O extends OptionsObject> = JoinOptionsObjectFieldTuples<\r\n  OptionsObjectFieldNameTuples<O>,\r\n  true\r\n>;\r\n\r\ntype OptionsObjectFieldPathType<\r\n  O extends OptionsObject,\r\n  P extends string\r\n> = OptionsObjectFieldTuplesType<O, SplitJoinedOptionsObjectFieldTuples<P>>;\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw 0;\r\n    }\r\n    return val;\r\n  });\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? `${path}`\r\n        .split('.')\r\n        .reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\n/**\r\n * The overflow behavior of an axis.\r\n */\r\nexport type OverflowBehavior =\r\n  /** No scrolling is possible and the content is clipped. */\r\n  | 'hidden'\r\n  /** No scrolling is possible and the content isn't clipped. */\r\n  | 'visible'\r\n  /** Scrolling is possible if there is an overflow. */\r\n  | 'scroll'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `hidden`.\r\n   */\r\n  | 'visible-hidden'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `scroll`.\r\n   */\r\n  | 'visible-scroll';\r\n\r\n/**\r\n * The scrollbars visibility behavior.\r\n */\r\nexport type ScrollbarsVisibilityBehavior =\r\n  /** The scrollbars are always visible. */\r\n  | 'visible'\r\n  /** The scrollbars are always hidden. */\r\n  | 'hidden'\r\n  /** The scrollbars are only visibile if there is overflow. */\r\n  | 'auto';\r\n\r\n/**\r\n * The scrollbars auto hide behavior\r\n */\r\nexport type ScrollbarsAutoHideBehavior =\r\n  /** The scrollbars are never hidden automatically. */\r\n  | 'never'\r\n  /** The scrollbars are hidden unless the user scrolls. */\r\n  | 'scroll'\r\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\r\n  | 'move'\r\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\r\n  | 'leave';\r\n\r\n/**\r\n * The options of a OverlayScrollbars instance.\r\n */\r\nexport type Options = {\r\n  /** Whether the padding shall be absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\r\n  showNativeOverlaidScrollbars: boolean;\r\n  /** Customizes the automatic update behavior. */\r\n  update: {\r\n    /**\r\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\r\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\r\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\r\n     */\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    /**\r\n     * The debounce which is used to detect content changes.\r\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\r\n     * If a single number customizes only the `timeout`.\r\n     *\r\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\r\n     */\r\n    debounce: [timeout: number, maxWait: number] | number | null;\r\n    /**\r\n     * HTML attributes which will trigger an update if they're changed.\r\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\r\n     */\r\n    attributes: string[] | null;\r\n    /**\r\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\r\n     * @param mutation The MutationRecord from the MutationObserver.\r\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\r\n     */\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  /** Customizes the overflow behavior per axis. */\r\n  overflow: {\r\n    /** The overflow behavior of the horizontal (x) axis. */\r\n    x: OverflowBehavior;\r\n    /** The overflow behavior of the vertical (y) axis. */\r\n    y: OverflowBehavior;\r\n  };\r\n  /** Customizes appearance of the scrollbars. */\r\n  scrollbars: {\r\n    /**\r\n     * The scrollbars theme.\r\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\r\n     */\r\n    theme: string | null;\r\n    /** The scrollbars visibility behavior. */\r\n    visibility: ScrollbarsVisibilityBehavior;\r\n    /** The scrollbars auto hide behavior. */\r\n    autoHide: ScrollbarsAutoHideBehavior;\r\n    /** The scrollbars auto hide delay in milliseconds. */\r\n    autoHideDelay: number;\r\n    /** Whether the scrollbars auto hide behavior is suspended until a scroll happened. */\r\n    autoHideSuspend: boolean;\r\n    /** Whether its possible to drag the handle of a scrollbar to scroll the viewport. */\r\n    dragScroll: boolean;\r\n    /** Whether its possible to click the track of a scrollbar to scroll the viewport. */\r\n    clickScroll: boolean;\r\n    /**\r\n     * An array of pointer types which shall be supported.\r\n     * Common pointer types are: `mouse`, `pen` and `touch`.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\r\n     */\r\n    pointers: string[] | null;\r\n  };\r\n};\r\n\r\nexport type ReadonlyOptions = DeepReadonly<Options>;\r\n\r\nexport type PartialOptions = DeepPartial<Options>;\r\n\r\nexport type OptionsCheckFn<O extends OptionsObject> = <P extends OptionsObjectFieldPath<O>>(\r\n  path: P\r\n) => [value: OptionsObjectFieldPathType<O, P>, changed: boolean];\r\n\r\nexport const defaultOptions: ReadonlyOptions = {\r\n  paddingAbsolute: false,\r\n  showNativeOverlaidScrollbars: false,\r\n  update: {\r\n    elementEvents: [['img', 'load']],\r\n    debounce: [0, 33],\r\n    attributes: null,\r\n    ignoreMutation: null,\r\n  },\r\n  overflow: {\r\n    x: 'scroll',\r\n    y: 'scroll',\r\n  },\r\n  scrollbars: {\r\n    theme: 'os-theme-dark',\r\n    visibility: 'auto',\r\n    autoHide: 'never',\r\n    autoHideDelay: 1300,\r\n    autoHideSuspend: false,\r\n    dragScroll: true,\r\n    clickScroll: false,\r\n    pointers: ['mouse', 'touch', 'pen'],\r\n  },\r\n} satisfies OptionsObject & Options;\r\n\r\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\r\n  const diff: DeepPartial<T> = {};\r\n  const optionsKeys = concat(keys(newOptions), keys(currOptions)) as Array<\r\n    keyof T & keyof DeepPartial<T>\r\n  >;\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {} as any), getOptionsDiff(currOptionValue, newOptionValue));\r\n      // delete empty nested objects\r\n      if (isEmptyObject(diff[optionKey])) {\r\n        delete diff[optionKey];\r\n      }\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n\r\nexport const createOptionCheck =\r\n  <T extends OptionsObject>(\r\n    options: T,\r\n    changedOptions: DeepPartial<T>,\r\n    force?: boolean\r\n  ): OptionsCheckFn<T> =>\r\n  (path) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n","const dataAttributePrefix = `data-overlayscrollbars`;\r\n\r\n// environment\r\nexport const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentScrollbarHidden = `${classNameEnvironment}-scrollbar-hidden`;\r\nexport const classNameEnvironmentFlexboxGlue = `${classNameEnvironment}-flexbox-glue`;\r\nexport const classNameEnvironmentFlexboxGlueMax = `${classNameEnvironmentFlexboxGlue}-max`;\r\n\r\n// initialize\r\nexport const dataAttributeInitialize = `${dataAttributePrefix}-initialize`;\r\n\r\n// host\r\nexport const dataAttributeHost = dataAttributePrefix;\r\nexport const dataAttributeHostOverflowX = `${dataAttributeHost}-overflow-x`;\r\nexport const dataAttributeHostOverflowY = `${dataAttributeHost}-overflow-y`;\r\nexport const dataValueHostOverflowVisible = 'overflowVisible';\r\nexport const dataValueHostScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueHostScrollbarPressed = 'scrollbarPressed';\r\nexport const dataValueHostUpdating = 'updating';\r\nexport const dataValueHostHtmlBody = 'body';\r\n\r\n// viewport\r\nexport const dataAttributeViewport = `${dataAttributePrefix}-viewport`;\r\nexport const dataValueViewportArrange = 'arrange';\r\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueViewportOverflowVisible = dataValueHostOverflowVisible;\r\n\r\n// padding\r\nexport const dataAttributePadding = `${dataAttributePrefix}-padding`;\r\nexport const dataValuePaddingOverflowVisible = dataValueViewportOverflowVisible;\r\n\r\n// content\r\nexport const dataAttributeContent = `${dataAttributePrefix}-content`;\r\n\r\n// size observer\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\n// trinsic observer\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\n// scrollbars\r\nexport const classNameScrollbarNoCssCustomProps = 'os-no-css-vars';\r\nexport const classNameScrollbarThemeNone = 'os-theme-none';\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\r\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\r\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\r\nexport const classNameScrollbarAutoHide = `${classNameScrollbar}-auto-hide`;\r\nexport const classNameScrollbarAutoHideHidden = `${classNameScrollbarAutoHide}-hidden`;\r\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\r\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\r\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\r\n","import { each, keys } from '~/support';\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\r\nimport type { EventListener, EventListenerArgs, EventListeners } from '..';\r\n\r\nexport type PluginModuleInstance = Record<string | number | symbol, any>;\r\n\r\nexport type InstancePluginEvent = {\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  (eventListeners: EventListeners): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbars plugin module.\r\n * Plugin modules must be side-effect free and deterministic. (same input produces same output)\r\n */\r\nexport type PluginModule<\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = (S extends PluginModuleInstance\r\n  ? {\r\n      /**\r\n       * Creates a plugin which is bound to the static object.\r\n       * The function will be called once with the static object as soon as the plugin is registered.\r\n       * The plugin can add new methods or fields to the passed static object.\r\n       * @param osStatic The static object the plugin is bound to.\r\n       * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n       */\r\n      static: (osStatic: OverlayScrollbarsStatic) => S | void;\r\n    }\r\n  : object) &\r\n  (I extends PluginModuleInstance\r\n    ? {\r\n        /**\r\n         * Creates a A plugin which is bound to an instance.\r\n         * The function will be called each time a new instance is created.\r\n         * The plugin can add new methods or fields to the passed instance object.\r\n         * @param osInstance The instance object the plugin is bound to.\r\n         * @param event A function which adds events to the instance which can't be removed from outside the plugin. (instance events added with the `on` function can be removed with the optional `pure` parameter)\r\n         * @param osStatic The static object the plugin is bound to.\r\n         * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n         */\r\n        instance: (\r\n          osInstance: OverlayScrollbars,\r\n          event: InstancePluginEvent,\r\n          osStatic: OverlayScrollbarsStatic\r\n        ) => I | void;\r\n      }\r\n    : object);\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin.\r\n */\r\nexport type Plugin<\r\n  Name extends string = string,\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = {\r\n  /** The field is the plugins name. Plugin names must be globally unique, please choose wisely. */\r\n  [pluginName in Name]: PluginModule<S, I>;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a static module.\r\n */\r\nexport type StaticPlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, T, void>;\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a instance module.\r\n */\r\nexport type InstancePlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, void, T>;\r\n\r\n/**\r\n * Infers the type of the static modules instance of the passed plugin.\r\n */\r\nexport type InferStaticPluginModuleInstance<T extends StaticPlugin> = T extends StaticPlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['static'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['static']>\r\n    : void\r\n  : void;\r\n\r\n/**\r\n * Infers the type of the instance modules instance of the passed plugin.\r\n */\r\nexport type InferInstancePluginModuleInstance<T extends InstancePlugin> = T extends InstancePlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['instance'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['instance']>\r\n    : void\r\n  : void;\r\n\r\n/** All registered plugin modules. */\r\nexport const pluginModules: Record<string, PluginModule> = {};\r\n\r\n/** All static plugin module instances. */\r\nexport const staticPluginModuleInstances: Record<string, PluginModuleInstance | void> = {};\r\n\r\n/**\r\n * Adds plugins.\r\n * @param addedPlugin The plugin(s) to add.\r\n * @returns The added plugin modules of the registered plugins.\r\n */\r\nexport const addPlugins = (addedPlugin: Plugin[]) => {\r\n  each(addedPlugin, (plugin) =>\r\n    each(plugin, (_, key) => {\r\n      pluginModules[key] = plugin[key];\r\n    })\r\n  );\r\n};\r\n\r\nexport const registerPluginModuleInstances = (\r\n  plugin: Plugin,\r\n  staticObj: OverlayScrollbarsStatic,\r\n  instanceInfo?: [\r\n    instanceObj: OverlayScrollbars,\r\n    event: InstancePluginEvent,\r\n    instancePluginMap?: Record<string, PluginModuleInstance>\r\n  ]\r\n): Array<PluginModuleInstance | void> =>\r\n  keys(plugin).map((name) => {\r\n    const { static: osStatic, instance: osInstance } = (\r\n      plugin as Plugin<string, PluginModuleInstance, PluginModuleInstance>\r\n    )[name];\r\n    const [instanceObj, event, instancePluginMap] = instanceInfo || [];\r\n    const ctor = instanceInfo ? osInstance : osStatic;\r\n    if (ctor) {\r\n      const instance = instanceInfo\r\n        ? (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (\r\n                osInstance: OverlayScrollbars,\r\n                event: InstancePluginEvent,\r\n                osStatic: OverlayScrollbarsStatic\r\n              ) => PluginModuleInstance | void\r\n            >\r\n          )(instanceObj!, event!, staticObj)\r\n        : (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (osStatic: OverlayScrollbarsStatic) => PluginModuleInstance | void\r\n            >\r\n          )(staticObj);\r\n      return ((instancePluginMap || staticPluginModuleInstances)[name] = instance);\r\n    }\r\n  });\r\n\r\nexport const getStaticPluginModuleInstance = <T extends StaticPlugin>(\r\n  pluginModuleName: T extends StaticPlugin<infer N> ? N : never\r\n): InferStaticPluginModuleInstance<T> | undefined =>\r\n  staticPluginModuleInstances[pluginModuleName] as InferStaticPluginModuleInstance<T> | undefined;\r\n","import type {\r\n  Options,\r\n  PartialOptions,\r\n  OverflowBehavior,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n} from '~/options';\r\nimport type { OptionsTemplate, OptionsTemplateValue } from './validation';\r\nimport type { StaticPlugin } from '~/plugins';\r\nimport { validateOptions, optionsTemplateTypes as oTypes } from './validation';\r\n\r\nexport const optionsValidationPluginModuleName = '__osOptionsValidationPlugin';\r\n\r\nexport const OptionsValidationPlugin = /* @__PURE__ */ (() => ({\r\n  [optionsValidationPluginModuleName]: {\r\n    static: () => {\r\n      const numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\n      const booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\n      const arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [\r\n        oTypes.array,\r\n        oTypes.null,\r\n      ];\r\n      const overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n        'hidden scroll visible visible-hidden';\r\n      const scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\r\n        'visible hidden auto';\r\n      const scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\r\n        'never scroll leavemove';\r\n\r\n      const optionsTemplate: OptionsTemplate<Options> = {\r\n        // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\r\n        paddingAbsolute: booleanAllowedValues, // true || false\r\n        showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\r\n        update: {\r\n          elementEvents: arrayNullValues, // array of tuples || null\r\n          attributes: arrayNullValues,\r\n          debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n          ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n        },\r\n        overflow: {\r\n          x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n          y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n        },\r\n        scrollbars: {\r\n          theme: [oTypes.string, oTypes.null], // string || null\r\n          visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\r\n          autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n          autoHideDelay: numberAllowedValues, // number\r\n          autoHideSuspend: booleanAllowedValues, // true || false\r\n          dragScroll: booleanAllowedValues, // true || false\r\n          clickScroll: booleanAllowedValues, // true || false\r\n          pointers: [oTypes.array, oTypes.null], // string array\r\n        },\r\n        /*\r\n        textarea: {\r\n          dynWidth: booleanAllowedValues, // true || false\r\n          dynHeight: booleanAllowedValues, // true || false\r\n          inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n        },\r\n        */\r\n      };\r\n      return (options: PartialOptions, doWriteErrors?: boolean): PartialOptions => {\r\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n        return { ...foreign, ...validated };\r\n      };\r\n    },\r\n  },\r\n}))() satisfies StaticPlugin<typeof optionsValidationPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  appendChildren,\r\n  offsetSize,\r\n  addEventListener,\r\n  addClass,\r\n  equalWH,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n  bind,\r\n  scrollElementTo,\r\n  strWidth,\r\n  strHeight,\r\n  setStyles,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from '~/classnames';\r\nimport type { StaticPlugin } from '../plugins';\r\n\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const SizeObserverPlugin = /* @__PURE__ */ (() => ({\r\n  [sizeObserverPluginName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        listenerElement: HTMLElement,\r\n        onSizeChangedCallback: (appear: boolean) => any,\r\n        observeAppearChange: boolean | null | undefined\r\n      ): [appearCallback: () => void, offFns: (() => any)[]] => {\r\n        const scrollAmount = 3333333;\r\n        const scrollEventName = 'scroll';\r\n        const observerElementChildren = createDOM(\r\n          `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n        );\r\n        const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n        const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n        const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n        const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n        let cacheSize = offsetSize(observerElementChildrenRoot);\r\n        let currSize = cacheSize;\r\n        let isDirty = false;\r\n        let rAFId: number;\r\n\r\n        const reset = () => {\r\n          scrollElementTo(expandElement, scrollAmount);\r\n          scrollElementTo(shrinkElement, scrollAmount);\r\n        };\r\n        const onResized = (appear?: unknown) => {\r\n          rAFId = 0;\r\n          if (isDirty) {\r\n            cacheSize = currSize;\r\n            onSizeChangedCallback(appear === true);\r\n          }\r\n        };\r\n        const onScroll = (scrollEvent?: Event | false) => {\r\n          currSize = offsetSize(observerElementChildrenRoot);\r\n          isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n          if (scrollEvent) {\r\n            stopPropagation(scrollEvent);\r\n\r\n            if (isDirty && !rAFId) {\r\n              cAF!(rAFId);\r\n              rAFId = rAF!(onResized);\r\n            }\r\n          } else {\r\n            onResized(scrollEvent === false);\r\n          }\r\n\r\n          reset();\r\n        };\r\n        const destroyFns = [\r\n          appendChildren(listenerElement, observerElementChildren),\r\n          addEventListener(expandElement, scrollEventName, onScroll),\r\n          addEventListener(shrinkElement, scrollEventName, onScroll),\r\n        ];\r\n\r\n        addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n\r\n        // lets assume that the divs will never be that large and a constant value is enough\r\n        setStyles(expandElementChild, {\r\n          [strWidth]: scrollAmount,\r\n          [strHeight]: scrollAmount,\r\n        });\r\n\r\n        rAF!(reset);\r\n\r\n        return [observeAppearChange ? bind(onScroll, false) : reset, destroyFns];\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof sizeObserverPluginName>;\r\n","import { getStyles, strOverflowX, strOverflowY, strVisible } from '~/support';\r\nimport type { InternalEnvironment } from '~/environment';\r\nimport type { XY } from '~/support';\r\nimport type { Options, OptionsCheckFn, OverflowBehavior } from '~/options';\r\nimport type { OverflowStyle, StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\n\r\nexport interface ViewportOverflowState {\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport const getShowNativeOverlaidScrollbars = (\r\n  checkOption: OptionsCheckFn<Options>,\r\n  env: InternalEnvironment\r\n) => {\r\n  const { _nativeScrollbarsOverlaid } = env;\r\n  const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] = checkOption(\r\n    'showNativeOverlaidScrollbars'\r\n  );\r\n\r\n  return [\r\n    showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y,\r\n    showNativeOverlaidScrollbarsChanged,\r\n  ] as const;\r\n};\r\n\r\nexport const overflowIsVisible = (overflowBehavior: string) =>\r\n  overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n/**\r\n * Gets the current overflow state of the viewport.\r\n * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n * @param viewportStyleObj The viewport style object where the overflow scroll property can be read of, or undefined if shall be determined.\r\n * @returns A object which contains informations about the current overflow state.\r\n */\r\nexport const getViewportOverflowState = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  viewportStyleObj?: StyleObject\r\n): ViewportOverflowState => {\r\n  const { _viewport } = structureSetupElements;\r\n  const getStatePerAxis = (styleKey: StyleObjectKey) => {\r\n    const overflowStyle = getStyles(_viewport, styleKey);\r\n    // can't do something like \"viewportStyleObj && viewportStyleObj[styleKey] || overflowStyle\" here!\r\n    const objectPrefferedOverflowStyle = viewportStyleObj\r\n      ? viewportStyleObj[styleKey]\r\n      : overflowStyle;\r\n    const overflowScroll = objectPrefferedOverflowStyle === 'scroll';\r\n\r\n    return [overflowStyle, overflowScroll] as [\r\n      overflowStyle: OverflowStyle,\r\n      overflowScroll: boolean\r\n    ];\r\n  };\r\n\r\n  const [xOverflowStyle, xOverflowScroll] = getStatePerAxis(strOverflowX);\r\n  const [yOverflowStyle, yOverflowScroll] = getStatePerAxis(strOverflowY);\r\n\r\n  return {\r\n    _overflowStyle: {\r\n      x: xOverflowStyle,\r\n      y: yOverflowStyle,\r\n    },\r\n    _overflowScroll: {\r\n      x: xOverflowScroll,\r\n      y: yOverflowScroll,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Sets the overflow property of the viewport and calculates the a overflow state according to the new parameters.\r\n * @param showNativeOverlaidScrollbars Whether to show natively overlaid scrollbars.\r\n * @param overflowAmount The overflow amount.\r\n * @param overflow The overflow behavior according to the options.\r\n * @param viewportStyleObj The viewport style object to which the overflow style shall be applied.\r\n * @returns A object which represents the newly set overflow state.\r\n */\r\nexport const setViewportOverflowState = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  hasOverflow: XY<boolean>,\r\n  overflowOption: XY<OverflowBehavior>,\r\n  viewportStyleObj: StyleObject\r\n): ViewportOverflowState => {\r\n  const hasAnyOverflow = hasOverflow.x || hasOverflow.y;\r\n\r\n  const setAxisOverflowStyle = (behavior: OverflowBehavior, hasOverflowAxis: boolean) => {\r\n    const overflowVisible = overflowIsVisible(behavior);\r\n    const fallbackVisibilityBehavior = overflowVisible && hasAnyOverflow ? 'hidden' : '';\r\n    const overflowVisibleBehavior =\r\n      (hasOverflowAxis && overflowVisible && behavior.replace(`${strVisible}-`, '')) ||\r\n      fallbackVisibilityBehavior;\r\n\r\n    return [\r\n      hasOverflowAxis && !overflowVisible ? behavior : '',\r\n      overflowIsVisible(overflowVisibleBehavior) ? 'hidden' : overflowVisibleBehavior,\r\n    ];\r\n  };\r\n\r\n  const [overflowX, visibleBehaviorX] = setAxisOverflowStyle(overflowOption.x, hasOverflow.x);\r\n  const [overflowY, visibleBehaviorY] = setAxisOverflowStyle(overflowOption.y, hasOverflow.y);\r\n\r\n  viewportStyleObj[strOverflowX] = visibleBehaviorX && overflowY ? visibleBehaviorX : overflowX;\r\n  viewportStyleObj[strOverflowY] = visibleBehaviorY && overflowX ? visibleBehaviorY : overflowY;\r\n\r\n  return getViewportOverflowState(structureSetupElements, viewportStyleObj);\r\n};\r\n","import {\r\n  keys,\r\n  attr,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  windowSize,\r\n  wnd,\r\n  mathAbs,\r\n  mathRound,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  strHeight,\r\n  getStyles,\r\n  setStyles,\r\n  addAttrClass,\r\n  removeAttrClass,\r\n} from '~/support';\r\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\r\nimport {\r\n  getShowNativeOverlaidScrollbars,\r\n  getViewportOverflowState,\r\n} from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { ObserversSetupState } from '~/setups';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\r\nimport type { ViewportOverflowState } from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { InternalEnvironment } from '~/environment';\r\nimport type { UpdateCache, WH, XY } from '~/support';\r\nimport type { StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupState } from '~/setups/structureSetup';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nlet contentArrangeCounter = 0;\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const ScrollbarsHidingPlugin = /* @__PURE__ */ (() => ({\r\n  [scrollbarsHidingPluginName]: {\r\n    static: () => ({\r\n      _createUniqueViewportArrangeElement: (env: InternalEnvironment): false | HTMLStyleElement => {\r\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _cssCustomProperties } = env;\r\n        const create =\r\n          !_cssCustomProperties &&\r\n          !_nativeScrollbarsHiding &&\r\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n        const result = create ? document.createElement('style') : false;\r\n\r\n        if (result) {\r\n          attr(\r\n            result,\r\n            'id',\r\n            `${dataAttributeViewport}-${dataValueViewportArrange}-${contentArrangeCounter}`\r\n          );\r\n          contentArrangeCounter++;\r\n        }\r\n\r\n        return result;\r\n      },\r\n      _viewportArrangement: (\r\n        structureSetupElements: StructureSetupElementsObj,\r\n        structureSetupState: StructureSetupState,\r\n        observersSetupState: ObserversSetupState,\r\n        env: InternalEnvironment,\r\n        checkOptions: OptionsCheckFn<Options>\r\n      ) => {\r\n        const { _viewportIsTarget, _viewport, _viewportArrange } = structureSetupElements;\r\n        const {\r\n          _nativeScrollbarsHiding,\r\n          _nativeScrollbarsOverlaid,\r\n          _flexboxGlue,\r\n          _nativeScrollbarsSize,\r\n        } = env;\r\n        const doViewportArrange =\r\n          !_viewportIsTarget &&\r\n          !_nativeScrollbarsHiding &&\r\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n        const [showNativeOverlaidScrollbars] = getShowNativeOverlaidScrollbars(checkOptions, env);\r\n\r\n        const _getViewportOverflowHideOffset = (viewportOverflowState: ViewportOverflowState) => {\r\n          const { _overflowScroll } = viewportOverflowState;\r\n          const arrangeHideOffset =\r\n            _nativeScrollbarsHiding || showNativeOverlaidScrollbars ? 0 : 42;\r\n\r\n          const getHideOffsetPerAxis = (\r\n            isOverlaid: boolean,\r\n            overflowScroll: boolean,\r\n            nativeScrollbarSize: number\r\n          ) => {\r\n            const nonScrollbarStylingHideOffset = isOverlaid\r\n              ? arrangeHideOffset\r\n              : nativeScrollbarSize;\r\n            const scrollbarsHideOffset =\r\n              overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n            const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n            return [scrollbarsHideOffset, scrollbarsHideOffsetArrange] as const;\r\n          };\r\n\r\n          const [xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.x,\r\n            _overflowScroll.x,\r\n            _nativeScrollbarsSize.x\r\n          );\r\n          const [yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.y,\r\n            _overflowScroll.y,\r\n            _nativeScrollbarsSize.y\r\n          );\r\n\r\n          return {\r\n            _scrollbarsHideOffset: {\r\n              x: xScrollbarsHideOffset,\r\n              y: yScrollbarsHideOffset,\r\n            },\r\n            _scrollbarsHideOffsetArrange: {\r\n              x: xScrollbarsHideOffsetArrange,\r\n              y: yScrollbarsHideOffsetArrange,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Hides the native scrollbars according to the passed parameters.\r\n         * @param viewportOverflowState The viewport overflow state.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n         * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n         */\r\n        const _hideNativeScrollbars = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          { _directionIsRTL }: ObserversSetupState,\r\n          viewportArrange: boolean,\r\n          viewportStyleObj: StyleObject\r\n        ): void => {\r\n          assignDeep(viewportStyleObj, {\r\n            [strMarginRight]: 0,\r\n            [strMarginBottom]: 0,\r\n            [strMarginLeft]: 0,\r\n          });\r\n          if (!_viewportIsTarget) {\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const horizontalMarginKey: keyof StyleObject = _directionIsRTL\r\n              ? strMarginLeft\r\n              : strMarginRight;\r\n            const viewportHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingLeft\r\n              : strPaddingRight;\r\n            const horizontalMarginValue = _viewportPaddingStyle[horizontalMarginKey] as number;\r\n            const verticalMarginValue = _viewportPaddingStyle[strMarginBottom] as number;\r\n            const horizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportHorizontalPaddingKey\r\n            ] as number;\r\n            const verticalPaddingValue = _viewportPaddingStyle[strPaddingBottom] as number;\r\n\r\n            // horizontal\r\n            viewportStyleObj[strWidth] = `calc(100% + ${\r\n              hideOffsetY + horizontalMarginValue * -1\r\n            }px)`;\r\n            viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n            // vertical\r\n            viewportStyleObj[strMarginBottom] = -hideOffsetX + verticalMarginValue;\r\n\r\n            // viewport arrange additional styles\r\n            if (viewportArrange) {\r\n              viewportStyleObj[viewportHorizontalPaddingKey] =\r\n                horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n              viewportStyleObj[strPaddingBottom] =\r\n                verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n            }\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Sets the styles of the viewport arrange element.\r\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n         * @param viewportScrollSize The content scroll size.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n         */\r\n        const _arrangeViewport = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          viewportScrollSize: WH<number>,\r\n          sizeFraction: WH<number>\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _directionIsRTL } = observersSetupState;\r\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingRight\r\n              : strPaddingLeft;\r\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportArrangeHorizontalPaddingKey\r\n            ] as number;\r\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n            const arrangeSize = {\r\n              w:\r\n                hideOffsetY && arrangeY\r\n                  ? `${\r\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                    }px`\r\n                  : '',\r\n              h:\r\n                hideOffsetX && arrangeX\r\n                  ? `${\r\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\r\n                    }px`\r\n                  : '',\r\n            };\r\n\r\n            // adjust content arrange / before element\r\n            if (_viewportArrange) {\r\n              const { sheet } = _viewportArrange;\r\n              if (sheet) {\r\n                const { cssRules } = sheet;\r\n                if (cssRules) {\r\n                  if (!cssRules.length) {\r\n                    sheet.insertRule(\r\n                      `#${attr(\r\n                        _viewportArrange,\r\n                        'id'\r\n                      )} + [${dataAttributeViewport}~='${dataValueViewportArrange}']::before {}`,\r\n                      0\r\n                    );\r\n                  }\r\n\r\n                  // @ts-ignore\r\n                  const ruleStyle = cssRules[0].style;\r\n\r\n                  ruleStyle[strWidth] = arrangeSize.w;\r\n                  ruleStyle[strHeight] = arrangeSize.h;\r\n                }\r\n              }\r\n            } else {\r\n              setStyles(_viewport, {\r\n                '--os-vaw': arrangeSize.w,\r\n                '--os-vah': arrangeSize.h,\r\n              });\r\n            }\r\n          }\r\n\r\n          return doViewportArrange;\r\n        };\r\n\r\n        /**\r\n         * Removes all styles applied because of the viewport arrange strategy.\r\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n         */\r\n        const _undoViewportArrange = (viewportOverflowState?: ViewportOverflowState) => {\r\n          if (doViewportArrange) {\r\n            const finalViewportOverflowState =\r\n              viewportOverflowState || getViewportOverflowState(structureSetupElements);\r\n            const { _viewportPaddingStyle: viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffsetArrange } = _getViewportOverflowHideOffset(\r\n              finalViewportOverflowState\r\n            );\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const finalPaddingStyle: StyleObject = {};\r\n            const assignProps = (props: string[]) =>\r\n              each(props, (prop) => {\r\n                finalPaddingStyle[prop as StyleObjectKey] =\r\n                  viewportPaddingStyle[prop as StyleObjectKey];\r\n              });\r\n\r\n            if (arrangeX) {\r\n              assignProps([strMarginBottom, strPaddingTop, strPaddingBottom]);\r\n            }\r\n\r\n            if (arrangeY) {\r\n              assignProps([strMarginLeft, strMarginRight, strPaddingLeft, strPaddingRight]);\r\n            }\r\n\r\n            const prevStyle = getStyles(_viewport, keys(finalPaddingStyle) as StyleObjectKey[]);\r\n            removeAttrClass(_viewport, dataAttributeViewport, dataValueViewportArrange);\r\n\r\n            if (!_flexboxGlue) {\r\n              finalPaddingStyle[strHeight] = '';\r\n            }\r\n\r\n            setStyles(_viewport, finalPaddingStyle);\r\n\r\n            return [\r\n              () => {\r\n                _hideNativeScrollbars(\r\n                  finalViewportOverflowState,\r\n                  observersSetupState,\r\n                  doViewportArrange,\r\n                  prevStyle\r\n                );\r\n                setStyles(_viewport, prevStyle);\r\n                addAttrClass(_viewport, dataAttributeViewport, dataValueViewportArrange);\r\n              },\r\n              finalViewportOverflowState,\r\n            ] as const;\r\n          }\r\n          return [noop] as const;\r\n        };\r\n\r\n        return {\r\n          _getViewportOverflowHideOffset,\r\n          _arrangeViewport,\r\n          _undoViewportArrange,\r\n          _hideNativeScrollbars,\r\n        };\r\n      },\r\n      _envWindowZoom: () => {\r\n        let size = { w: 0, h: 0 };\r\n        let dpr = 0;\r\n        const getWindowDPR = (): number => {\r\n          const screen = wnd.screen;\r\n          // eslint-disable-next-line\r\n          // @ts-ignore\r\n          const dDPI = screen.deviceXDPI || 0;\r\n          // eslint-disable-next-line\r\n          // @ts-ignore\r\n          const sDPI = screen.logicalXDPI || 1;\r\n          return wnd.devicePixelRatio || dDPI / sDPI;\r\n        };\r\n        const diffBiggerThanOne = (valOne: number, valTwo: number): boolean => {\r\n          const absValOne = mathAbs(valOne);\r\n          const absValTwo = mathAbs(valTwo);\r\n          return !(\r\n            absValOne === absValTwo ||\r\n            absValOne + 1 === absValTwo ||\r\n            absValOne - 1 === absValTwo\r\n          );\r\n        };\r\n\r\n        return (\r\n          envInstance: InternalEnvironment,\r\n          updateNativeScrollbarSizeCache: UpdateCache<XY<number>>\r\n        ): boolean | undefined => {\r\n          const sizeNew = windowSize();\r\n          const deltaSize = {\r\n            w: sizeNew.w - size.w,\r\n            h: sizeNew.h - size.h,\r\n          };\r\n\r\n          if (deltaSize.w === 0 && deltaSize.h === 0) {\r\n            return;\r\n          }\r\n\r\n          const deltaAbsSize = {\r\n            w: mathAbs(deltaSize.w),\r\n            h: mathAbs(deltaSize.h),\r\n          };\r\n          const deltaAbsRatio = {\r\n            w: mathAbs(mathRound(sizeNew.w / (size.w / 100.0))),\r\n            h: mathAbs(mathRound(sizeNew.h / (size.h / 100.0))),\r\n          };\r\n          const dprNew = getWindowDPR();\r\n          const deltaIsBigger = deltaAbsSize.w > 2 && deltaAbsSize.h > 2;\r\n          const difference = !diffBiggerThanOne(deltaAbsRatio.w, deltaAbsRatio.h);\r\n          const dprChanged = dprNew !== dpr && dprNew > 0;\r\n          const isZoom = deltaIsBigger && difference && dprChanged;\r\n          let scrollbarSizeChanged;\r\n          let scrollbarSize;\r\n\r\n          if (isZoom) {\r\n            [scrollbarSize, scrollbarSizeChanged] = updateNativeScrollbarSizeCache();\r\n\r\n            assignDeep(envInstance._nativeScrollbarsSize, scrollbarSize); // keep the object same!\r\n          }\r\n\r\n          size = sizeNew;\r\n          dpr = dprNew;\r\n\r\n          return scrollbarSizeChanged;\r\n        };\r\n      },\r\n    }),\r\n  },\r\n}))() satisfies StaticPlugin<typeof scrollbarsHidingPluginName>;\r\n","import { animateNumber, noop, setT } from '~/support';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const clickScrollPluginModuleName = '__osClickScrollPlugin';\r\n\r\nexport const ClickScrollPlugin = /* @__PURE__ */ (() => ({\r\n  [clickScrollPluginModuleName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        moveHandleRelative: (deltaMovement: number) => void,\r\n        getHandleOffset: (handleRect?: DOMRect, trackRect?: DOMRect) => number,\r\n        startOffset: number,\r\n        handleLength: number,\r\n        relativeTrackPointerOffset: number\r\n      ): (() => void) => {\r\n        // click scroll animation\r\n        let iteration = 0;\r\n        let clear = noop;\r\n        const animateClickScroll = (clickScrollProgress: number) => {\r\n          clear = animateNumber(\r\n            clickScrollProgress,\r\n            clickScrollProgress + handleLength * Math.sign(startOffset),\r\n            133,\r\n            (animationProgress, _, animationCompleted) => {\r\n              moveHandleRelative(animationProgress);\r\n              const handleStartBound = getHandleOffset();\r\n              const handleEndBound = handleStartBound + handleLength;\r\n              const mouseBetweenHandleBounds =\r\n                relativeTrackPointerOffset >= handleStartBound &&\r\n                relativeTrackPointerOffset <= handleEndBound;\r\n\r\n              if (animationCompleted && !mouseBetweenHandleBounds) {\r\n                if (iteration) {\r\n                  animateClickScroll(animationProgress);\r\n                } else {\r\n                  const firstIterationPauseTimeout = setT(() => {\r\n                    animateClickScroll(animationProgress);\r\n                  }, 222);\r\n                  clear = () => {\r\n                    clearTimeout(firstIterationPauseTimeout);\r\n                  };\r\n                }\r\n                iteration++;\r\n              }\r\n            }\r\n          );\r\n        };\r\n\r\n        animateClickScroll(0);\r\n\r\n        return () => clear();\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof clickScrollPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  appendChildren,\r\n  fractionalSize,\r\n  clientSize,\r\n  absoluteCoordinates,\r\n  offsetSize,\r\n  removeAttr,\r\n  removeElements,\r\n  equalBCRWH,\r\n  getBoundingClientRect,\r\n  assignDeep,\r\n  cssProperty,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  scrollT,\r\n  bind,\r\n  wnd,\r\n  noop,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strOverflowX,\r\n  strOverflowY,\r\n  getStyles,\r\n  setStyles,\r\n} from '~/support';\r\nimport {\r\n  classNameEnvironment,\r\n  classNameEnvironmentFlexboxGlue,\r\n  classNameEnvironmentFlexboxGlueMax,\r\n  classNameEnvironmentScrollbarHidden,\r\n} from '~/classnames';\r\nimport { defaultOptions } from '~/options';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { XY, EventListener } from '~/support';\r\nimport type { Options, PartialOptions } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { Initialization, PartialInitialization } from '~/initialization';\r\nimport type { StyleObjectKey } from './typings';\r\n\r\ntype EnvironmentEventArgs = {\r\n  r: [scrollbarSizeChanged?: boolean];\r\n};\r\n\r\n/**\r\n * Describes the OverlayScrollbars environment.\r\n */\r\nexport interface Environment {\r\n  /** The native scrollbars size of the browser / system. */\r\n  scrollbarsSize: XY<number>;\r\n  /** Whether the native scrollbars are overlaid. */\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  /** Whether the browser supports native scrollbars hiding. */\r\n  scrollbarsHiding: boolean;\r\n  /** The rtl scroll behavior of the browser. */\r\n  rtlScrollBehavior: { n: boolean; i: boolean };\r\n  /** Whether the browser supports all needed Flexbox features for OverlayScrollbars to work in a more performant way. */\r\n  flexboxGlue: boolean;\r\n  /** Whether the browser supports custom css properties. (also known as css variables) */\r\n  cssCustomProperties: boolean;\r\n  /** Whether the browser supports the ScrollTimeline API. */\r\n  scrollTimeline: boolean;\r\n  /** The default Initialization to use if nothing else is specified. */\r\n  staticDefaultInitialization: Initialization;\r\n  /** The default Options to use if nothing else is specified. */\r\n  staticDefaultOptions: Options;\r\n\r\n  /** Returns the current default Initialization. */\r\n  getDefaultInitialization(): Initialization;\r\n  /** Returns the current default Options. */\r\n  getDefaultOptions(): Options;\r\n\r\n  /**\r\n   * Sets a new default Initialization.\r\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\r\n   * @param newDefaultInitialization The new default Initialization.\r\n   * @returns The current default Initialization.\r\n   */\r\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\r\n  /**\r\n   * Sets new default Options.\r\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\r\n   * @param newDefaultOptions The new default Options.\r\n   * @returns The current default options.\r\n   */\r\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nexport interface InternalEnvironment {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _rtlScrollBehavior: { n: boolean; i: boolean };\r\n  readonly _flexboxGlue: boolean;\r\n  readonly _cssCustomProperties: boolean;\r\n  readonly _scrollTimeline: boolean;\r\n  readonly _staticDefaultInitialization: Initialization;\r\n  readonly _staticDefaultOptions: Options;\r\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\r\n  _getDefaultInitialization(): Initialization;\r\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nlet environmentInstance: InternalEnvironment;\r\n\r\nconst getNativeScrollbarSize = (\r\n  body: HTMLElement,\r\n  measureElm: HTMLElement,\r\n  measureElmChild: HTMLElement,\r\n  clear?: boolean\r\n): XY => {\r\n  appendChildren(body, measureElm);\r\n\r\n  const cSize = clientSize(measureElm);\r\n  const oSize = offsetSize(measureElm);\r\n  const fSize = fractionalSize(measureElmChild);\r\n\r\n  clear && removeElements(measureElm);\r\n\r\n  return {\r\n    x: oSize.h - cSize.h + fSize.h,\r\n    y: oSize.w - cSize.w + fSize.w,\r\n  };\r\n};\r\n\r\nconst getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n  let result = false;\r\n  const revertClass = addClass(testElm, classNameEnvironmentScrollbarHidden);\r\n  try {\r\n    result =\r\n      getStyles(testElm, cssProperty('scrollbar-width') as StyleObjectKey) === 'none' ||\r\n      getStyles(testElm, 'display', '::-webkit-scrollbar') === 'none';\r\n  } catch {}\r\n  revertClass();\r\n  return result;\r\n};\r\n\r\nconst getRtlScrollBehavior = (\r\n  parentElm: HTMLElement,\r\n  childElm: HTMLElement\r\n): { i: boolean; n: boolean } => {\r\n  setStyles(parentElm, { [strOverflowX]: strHidden, [strOverflowY]: strHidden, direction: 'rtl' });\r\n  scrollElementTo(parentElm, { x: 0 });\r\n\r\n  const parentOffset = absoluteCoordinates(parentElm);\r\n  const childOffset = absoluteCoordinates(childElm);\r\n  scrollElementTo(parentElm, { x: -999 }); // https://github.com/KingSora/OverlayScrollbars/issues/187\r\n  const childOffsetAfterScroll = absoluteCoordinates(childElm);\r\n  return {\r\n    /**\r\n     * origin direction = determines if the zero scroll position is on the left or right side\r\n     * 'i' means 'invert' (i === true means that the axis must be inverted to be correct)\r\n     * true = on the left side\r\n     * false = on the right side\r\n     */\r\n    i: parentOffset.x === childOffset.x,\r\n    /**\r\n     * negative = determines if the maximum scroll is positive or negative\r\n     * 'n' means 'negate' (n === true means that the axis must be negated to be correct)\r\n     * true = negative\r\n     * false = positive\r\n     */\r\n    n: childOffset.x !== childOffsetAfterScroll.x,\r\n  };\r\n};\r\n\r\nconst getFlexboxGlue = (parentElm: HTMLElement, childElm: HTMLElement): boolean => {\r\n  // IE11 doesn't support \"flexbox glue\"\r\n  const revertFbxGlue = addClass(parentElm, classNameEnvironmentFlexboxGlue);\r\n  const minOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const minOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMin = equalBCRWH(minOffsetsize, minOffsetsizeParent, true);\r\n\r\n  const revertFbxGlueMax = addClass(parentElm, classNameEnvironmentFlexboxGlueMax);\r\n  const maxOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const maxOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMax = equalBCRWH(maxOffsetsize, maxOffsetsizeParent, true);\r\n\r\n  revertFbxGlue();\r\n  revertFbxGlueMax();\r\n\r\n  return supportsMin && supportsMax;\r\n};\r\n\r\nconst createEnvironment = (): InternalEnvironment => {\r\n  const { body } = document;\r\n  const envDOM = createDOM(`<div class=\"${classNameEnvironment}\"><div></div></div>`);\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(body, envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    bind(getNativeScrollbarSize, body, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const staticDefaultInitialization: Initialization = {\r\n    elements: {\r\n      host: null,\r\n      padding: !nativeScrollbarsHiding,\r\n      viewport: (target) =>\r\n        nativeScrollbarsHiding && target === target.ownerDocument.body && target,\r\n      content: false,\r\n    },\r\n    scrollbars: {\r\n      slot: true,\r\n    },\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: false,\r\n      body: null,\r\n    },\r\n  };\r\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\r\n  const getDefaultOptions = bind(\r\n    assignDeep as typeof assignDeep<Options, Options>,\r\n    {} as Options,\r\n    staticDefaultOptions\r\n  );\r\n  const getDefaultInitialization = bind(\r\n    assignDeep as typeof assignDeep<Initialization, Initialization>,\r\n    {} as Initialization,\r\n    staticDefaultInitialization\r\n  );\r\n\r\n  const env: InternalEnvironment = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _cssCustomProperties: getStyles(envElm, 'zIndex') === '-1', // IE11 doesn't support css custom props\r\n    _scrollTimeline: !!scrollT,\r\n    _rtlScrollBehavior: getRtlScrollBehavior(envElm, envChildElm),\r\n    _flexboxGlue: getFlexboxGlue(envElm, envChildElm),\r\n    _addResizeListener: bind(addEvent, 'r'),\r\n    _getDefaultInitialization: getDefaultInitialization,\r\n    _setDefaultInitialization: (newInitializationStrategy) =>\r\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\r\n      getDefaultInitialization(),\r\n    _getDefaultOptions: getDefaultOptions,\r\n    _setDefaultOptions: (newDefaultOptions) =>\r\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\r\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\r\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\r\n  };\r\n\r\n  removeAttr(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  // needed in case content has css viewport units\r\n  wnd.addEventListener('resize', () => {\r\n    let scrollbarSizeChanged;\r\n    if (!nativeScrollbarsHiding && (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)) {\r\n      const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n        scrollbarsHidingPluginName\r\n      );\r\n      const zoomFn = scrollbarsHidingPlugin ? scrollbarsHidingPlugin._envWindowZoom() : noop;\r\n      scrollbarSizeChanged = !!zoomFn(env, updateNativeScrollbarSizeCache);\r\n    }\r\n\r\n    triggerEvent('r', [scrollbarSizeChanged]);\r\n  });\r\n\r\n  return env;\r\n};\r\n\r\nconst getEnvironment = (): InternalEnvironment => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n\r\nexport { getEnvironment };\r\n","import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { DeepPartial } from '~/typings';\r\n\r\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\r\n  StaticInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\r\n  DynamicInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\nexport type StaticInitialization = HTMLElement | false | null;\r\nexport type DynamicInitialization = HTMLElement | boolean | null;\r\n\r\n/**\r\n * Static elements are elements which MUST be present in the final DOM.\r\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\r\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the StaticInitialization value. */\r\n  | ((...args: Args) => StaticInitialization)\r\n  /** The StaticInitialization value. */\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic elements are elements which CAN be present in the final DOM.\r\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\r\n * With `true` an appropriate element is generated automatically.\r\n * With `false`, `null` or `undefined` the element won't be in the DOM.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the DynamicInitialization value. */\r\n  | ((...args: Args) => DynamicInitialization)\r\n  /** The DynamicInitialization value. */\r\n  | DynamicInitialization;\r\n\r\n/**\r\n * Describes how a OverlayScrollbar instance should initialize.\r\n */\r\nexport type Initialization = {\r\n  /**\r\n   * Customizes which elements are generated and used.\r\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\r\n   * Any passed function should be a \"pure\" function. (same input produces same output)\r\n   */\r\n  elements: {\r\n    /**\r\n     * Assign a custom element as the host element.\r\n     * Only relevant if the target element is a Textarea.\r\n     */\r\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the viewport element. */\r\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the padding element or force the element not to be generated. */\r\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the content element or force the element not to be generated. */\r\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n  };\r\n  /**\r\n   * Customizes elements related to the scrollbars.\r\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\r\n   */\r\n  scrollbars: {\r\n    slot: DynamicInitializationElement<\r\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\r\n    >;\r\n  };\r\n  /**\r\n   * Customizes the cancelation behavior.\r\n   */\r\n  cancel: {\r\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\r\n    nativeScrollbarsOverlaid: boolean;\r\n    /**\r\n     * Whether the initialization shall be canceled if its applied to a body element.\r\n     * With `true` an initialization is always canceled, with `false` its never canceled.\r\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\r\n     */\r\n    body: boolean | null;\r\n  };\r\n};\r\n\r\nexport type PartialInitialization = DeepPartial<Initialization>;\r\n\r\n/** The initialization target element. */\r\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\r\n\r\n/**\r\n * The initialization target object.\r\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\r\n */\r\nexport type InitializationTargetObject = PartialInitialization & {\r\n  target: InitializationTargetElement;\r\n};\r\n\r\n/** The initialization target. */\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\r\n  args: any,\r\n  value: any\r\n): T => (isFunction(value) ? value.apply(0, args) : value);\r\n\r\nexport const staticInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\r\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\r\n  staticInitializationElementValue?: StaticInitializationElement<Args>\r\n): HTMLElement => {\r\n  const staticInitialization = isUndefined(staticInitializationElementValue)\r\n    ? defaultStaticInitializationElement\r\n    : staticInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\r\n    args,\r\n    staticInitialization\r\n  );\r\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\r\n};\r\n\r\nexport const dynamicInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\r\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\r\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\r\n): HTMLElement | false => {\r\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\r\n    ? defaultDynamicInitializationElement\r\n    : dynamicInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\r\n    args,\r\n    dynamicInitialization\r\n  );\r\n  return (\r\n    !!resolvedInitialization &&\r\n    (isHTMLElement(resolvedInitialization)\r\n      ? resolvedInitialization\r\n      : fallbackDynamicInitializationElement.apply(0, args))\r\n  );\r\n};\r\n\r\nexport const cancelInitialization = (\r\n  isBody: boolean,\r\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\r\n): boolean => {\r\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\r\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding, _getDefaultInitialization } =\r\n    getEnvironment();\r\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\r\n    _getDefaultInitialization().cancel;\r\n\r\n  const resolvedNativeScrollbarsOverlaid =\r\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\r\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\r\n\r\n  const finalNativeScrollbarsOverlaid =\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\r\n    resolvedNativeScrollbarsOverlaid;\r\n  const finalDocumentScrollingElement =\r\n    isBody &&\r\n    (isNull(resolvedDocumentScrollingElement)\r\n      ? !_nativeScrollbarsHiding\r\n      : resolvedDocumentScrollingElement);\r\n\r\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\r\n};\r\n","import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  MutationObserverConstructor,\r\n  addEventListener,\r\n  attr,\r\n  is,\r\n  find,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  isEmptyArray,\r\n  deduplicateArray,\r\n  inArray,\r\n  concat,\r\n} from '~/support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\r\n  /**\r\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\r\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\r\n   */\r\n  _styleChangingAttributes?: string[];\r\n}\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  construct: () => () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (\r\n  getElements?: (selector: string) => Node[],\r\n  removed?: boolean\r\n) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: HTMLElement,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let destroyed = false;\r\n  const map = eventContentChange ? new WeakMap<Node, (() => any)[]>() : false; // weak map to prevent memory leak for detached elements\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\r\n    if (map && eventContentChange) {\r\n      const eventElmList = eventContentChange.map((item) => {\r\n        const [selector, eventNames] = item || [];\r\n        const elements = eventNames && selector ? (getElements || find)(selector, target) : [];\r\n        return [elements, eventNames] as const;\r\n      });\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entries = map.get(elm) || [];\r\n          const isTargetChild = target.contains(elm);\r\n\r\n          if (isTargetChild && eventNames) {\r\n            const removeListener = addEventListener(elm, eventNames.trim(), (event: Event) => {\r\n              if (destroyed) {\r\n                removeListener();\r\n                map.delete(elm);\r\n              } else {\r\n                callback(event);\r\n              }\r\n            });\r\n            map.set(elm, push(entries, removeListener));\r\n          } else {\r\n            runEachAndClear(entries);\r\n            map.delete(elm);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  updateElements();\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => isConnected && (callback as DOMContentObserverCallback)(true),\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = concat(finalAttributes, finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    fromRecords: boolean,\r\n    mutations: MutationRecord[]\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    if (!isEmptyArray(mutations)) {\r\n      const ignoreTargetChange = _ignoreTargetChange || noop;\r\n      const ignoreContentChange = _ignoreContentChange || noop;\r\n      const totalChangedNodes: Node[] = [];\r\n      const targetChangedAttrs: string[] = [];\r\n      let targetStyleChanged: boolean | '' | null | undefined = false;\r\n      let contentChanged: boolean | '' | null | undefined = false;\r\n      let childListChanged: boolean | '' | null | undefined = false;\r\n\r\n      each(mutations, (mutation) => {\r\n        const {\r\n          attributeName,\r\n          target: mutationTarget,\r\n          type,\r\n          oldValue,\r\n          addedNodes,\r\n          removedNodes,\r\n        } = mutation;\r\n        const isAttributesType = type === 'attributes';\r\n        const isChildListType = type === 'childList';\r\n        const targetIsMutationTarget = target === mutationTarget;\r\n        const isAttrChange = isAttributesType && attributeName;\r\n        // isAttrChange check needed, otherwise mutationTarget might not be a valid HTMLElement\r\n        const attributeValue = isAttrChange\r\n          ? attr(mutationTarget as HTMLElement, attributeName || '')\r\n          : null;\r\n        const attributeChanged = isAttrChange && oldValue !== attributeValue;\r\n        const styleChangingAttrChanged =\r\n          inArray(finalStyleChangingAttributes, attributeName) && attributeChanged;\r\n\r\n        // if is content observer and something changed in children\r\n        if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\r\n          const contentAttrChanged = isAttributesType && attributeChanged;\r\n          const isNestedTarget =\r\n            contentAttrChanged &&\r\n            _nestedTargetSelector &&\r\n            is(mutationTarget, _nestedTargetSelector);\r\n          const baseAssertion = isNestedTarget\r\n            ? !ignoreTargetChange(mutationTarget, attributeName, oldValue, attributeValue)\r\n            : !isAttributesType || contentAttrChanged;\r\n          const contentFinalChanged =\r\n            baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n          each(addedNodes, (node) => push(totalChangedNodes, node));\r\n          each(removedNodes, (node) => push(totalChangedNodes, node));\r\n\r\n          contentChanged = contentChanged || contentFinalChanged;\r\n          childListChanged = childListChanged || isChildListType;\r\n        }\r\n        // if is target observer and target attr changed\r\n        if (\r\n          !isContentObserver &&\r\n          targetIsMutationTarget &&\r\n          attributeChanged &&\r\n          !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n        ) {\r\n          push(targetChangedAttrs, attributeName);\r\n          targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n        }\r\n      });\r\n\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector: string) =>\r\n        deduplicateArray(totalChangedNodes).reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n\r\n      if (isContentObserver) {\r\n        !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n        return [false] satisfies Parameters<DOMObserverCallback<true>> as Parameters<\r\n          DOMObserverCallback<ContentObserver>\r\n        >;\r\n      }\r\n\r\n      if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n        const args = [\r\n          deduplicateArray(targetChangedAttrs),\r\n          targetStyleChanged,\r\n        ] satisfies Parameters<DOMTargetObserverCallback> & Parameters<DOMObserverCallback<false>>;\r\n        !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\r\n\r\n        return args as Parameters<DOMObserverCallback<ContentObserver>>;\r\n      }\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(\r\n    bind(observerCallback, false)\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      mutationObserver.observe(target, {\r\n        attributes: true,\r\n        attributeOldValue: true,\r\n        attributeFilter: observedAttributes,\r\n        subtree: isContentObserver,\r\n        childList: isContentObserver,\r\n        characterData: isContentObserver,\r\n      });\r\n      isConnected = true;\r\n\r\n      return () => {\r\n        if (isConnected) {\r\n          destroyEventContentChange();\r\n          mutationObserver.disconnect();\r\n          isConnected = false;\r\n        }\r\n      };\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n        return observerCallback(true, mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  createCache,\r\n  createDOM,\r\n  runEachAndClear,\r\n  addEventListener,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  removeClass,\r\n  stopPropagation,\r\n  appendChildren,\r\n  getDirectionIsRTL,\r\n  domRectHasDimensions,\r\n  bind,\r\n  noop,\r\n  isArray,\r\n  getRTLCompatibleScrollPosition,\r\n  scrollElementTo,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, sizeObserverPluginName } from '~/plugins';\r\nimport type { CacheValues } from '~/support';\r\nimport type { SizeObserverPlugin } from '~/plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  /** Whether direction changes should be observed. */\r\n  _direction?: boolean;\r\n  /** Whether appearing should be observed. */\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _directionIsRTLCache?: CacheValues<boolean>;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = () => () => void;\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const scrollAmount = 3333333;\r\n  const { _direction: observeDirectionChange, _appear: observeAppearChange } = options || {};\r\n  const sizeObserverPlugin =\r\n    getStaticPluginModuleInstance<typeof SizeObserverPlugin>(sizeObserverPluginName);\r\n  const { _rtlScrollBehavior: rtlScrollBehavior } = getEnvironment();\r\n  const getIsDirectionRTL = bind(getDirectionIsRTL, target);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | false>({\r\n    _initialValue: false,\r\n    _alwaysUpdateValues: true,\r\n  });\r\n\r\n  return () => {\r\n    const destroyFns: (() => void)[] = [];\r\n    const baseElements = createDOM(\r\n      `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n    );\r\n    const sizeObserver = baseElements[0] as HTMLElement;\r\n    const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n    const onSizeChangedCallbackProxy = (\r\n      sizeChangedContext?: CacheValues<boolean> | ResizeObserverEntry | boolean\r\n    ) => {\r\n      const isResizeObserverCall = sizeChangedContext instanceof ResizeObserverEntry;\r\n      const hasDirectionCache = !isResizeObserverCall && isArray(sizeChangedContext);\r\n\r\n      let skip = false;\r\n      let appear = false;\r\n      let doDirectionScroll = true; // always true if sizeChangedContext is Event (appear callback or RO. Polyfill)\r\n\r\n      // if triggered from RO.\r\n      if (isResizeObserverCall) {\r\n        const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n          sizeChangedContext.contentRect\r\n        );\r\n        const hasDimensions = domRectHasDimensions(currRContentRect);\r\n        const appeared = domRectAppeared(currRContentRect, prevContentRect);\r\n        const firstCall = !prevContentRect;\r\n        appear = firstCall || appeared;\r\n        skip = !appear && !hasDimensions; // skip if display is none or when window resize\r\n\r\n        doDirectionScroll = !skip; // direction scroll when not skipping\r\n      }\r\n      // else if its triggered with DirectionCache\r\n      else if (hasDirectionCache) {\r\n        [, doDirectionScroll] = sizeChangedContext; // direction scroll when DirectionCache changed, false otherwise\r\n      }\r\n      // else if it triggered with appear from polyfill\r\n      else {\r\n        appear = sizeChangedContext === true;\r\n      }\r\n\r\n      if (observeDirectionChange && doDirectionScroll) {\r\n        const rtl = hasDirectionCache ? sizeChangedContext[0] : getDirectionIsRTL(sizeObserver);\r\n        scrollElementTo(sizeObserver, {\r\n          x: getRTLCompatibleScrollPosition(scrollAmount, scrollAmount, rtl && rtlScrollBehavior),\r\n          y: scrollAmount,\r\n        });\r\n      }\r\n\r\n      if (!skip) {\r\n        onSizeChangedCallback({\r\n          _directionIsRTLCache: hasDirectionCache ? sizeChangedContext : undefined,\r\n          _sizeChanged: !hasDirectionCache,\r\n          _appear: appear,\r\n        });\r\n      }\r\n    };\r\n\r\n    if (ResizeObserverConstructor) {\r\n      const resizeObserverInstance = new ResizeObserverConstructor((entries) =>\r\n        onSizeChangedCallbackProxy(entries.pop())\r\n      );\r\n      resizeObserverInstance.observe(listenerElement);\r\n      push(destroyFns, () => {\r\n        resizeObserverInstance.disconnect();\r\n      });\r\n    } else if (sizeObserverPlugin) {\r\n      const [pluginAppearCallback, pluginDestroyFns] = sizeObserverPlugin(\r\n        listenerElement,\r\n        onSizeChangedCallbackProxy,\r\n        observeAppearChange\r\n      );\r\n      push(\r\n        destroyFns,\r\n        concat(\r\n          [\r\n            addClass(sizeObserver, classNameSizeObserverAppear),\r\n            addEventListener(sizeObserver, 'animationstart', pluginAppearCallback),\r\n          ],\r\n          pluginDestroyFns\r\n        )\r\n      );\r\n    } else {\r\n      return noop;\r\n    }\r\n\r\n    if (observeDirectionChange) {\r\n      const [updateDirectionIsRTLCache] = createCache(\r\n        {\r\n          _initialValue: undefined,\r\n        },\r\n        getIsDirectionRTL\r\n      );\r\n\r\n      push(\r\n        destroyFns,\r\n        addEventListener(sizeObserver, 'scroll', (event) => {\r\n          const directionIsRTLCacheValues = updateDirectionIsRTLCache();\r\n          const [directionIsRTLCache, directionIsRTLCacheChanged, directionIsRTLCachePrevious] =\r\n            directionIsRTLCacheValues;\r\n          if (directionIsRTLCacheChanged) {\r\n            removeClass(listenerElement, 'ltr rtl');\r\n            addClass(listenerElement, directionIsRTLCache ? 'rtl' : 'ltr');\r\n\r\n            onSizeChangedCallbackProxy([\r\n              !!directionIsRTLCache,\r\n              directionIsRTLCacheChanged,\r\n              directionIsRTLCachePrevious,\r\n            ]);\r\n          }\r\n\r\n          stopPropagation(event);\r\n        })\r\n      );\r\n    }\r\n\r\n    return bind(runEachAndClear, push(destroyFns, appendChildren(target, sizeObserver)));\r\n  };\r\n};\r\n","import {\r\n  createDiv,\r\n  offsetSize,\r\n  runEachAndClear,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n  bind,\r\n} from '~/support';\r\nimport { createSizeObserver } from '~/observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from '~/classnames';\r\nimport type { WH, CacheValues } from '~/support';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  construct: () => () => void,\r\n  update: () => void | false | null | undefined | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n    (ioEntryOrSize as WH<number>).h === 0 ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue: IntersectionObserverEntry | WH<number> | undefined,\r\n    fromRecords?: boolean\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n      return (\r\n        heightIntrinsicChanged &&\r\n        !fromRecords &&\r\n        onTrinsicChangedCallback(heightIntrinsic) && [heightIntrinsic]\r\n      );\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    fromRecords: boolean,\r\n    entries: IntersectionObserverEntry[]\r\n  ) => triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n\r\n  return [\r\n    () => {\r\n      const destroyFns: (() => void)[] = [];\r\n\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          bind(intersectionObserverCallback, false),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(destroyFns, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = offsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        push(destroyFns, createSizeObserver(trinsicObserver, onSizeChanged)());\r\n        onSizeChanged();\r\n      }\r\n\r\n      return bind(runEachAndClear, push(destroyFns, appendChildren(target, trinsicObserver)));\r\n    },\r\n    () =>\r\n      intersectionObserverInstance &&\r\n      intersectionObserverCallback(true, intersectionObserverInstance.takeRecords()),\r\n  ];\r\n};\r\n","import {\r\n  ResizeObserverConstructor,\r\n  assignDeep,\r\n  attr,\r\n  closest,\r\n  createCache,\r\n  debounce,\r\n  getDirectionIsRTL,\r\n  each,\r\n  equalWH,\r\n  fractionalSize,\r\n  isArray,\r\n  isFunction,\r\n  isNumber,\r\n  isString,\r\n  keys,\r\n  liesBetween,\r\n  removeAttr,\r\n  scrollSize,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n  inArray,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport { createDOMObserver, createSizeObserver, createTrinsicObserver } from '~/observers';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbar,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueHostUpdating,\r\n  dataValueViewportArrange,\r\n  dataValueViewportOverflowVisible,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { SizeObserverCallbackParams } from '~/observers';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { Setup, SetupUpdateInfo, StructureSetupState } from '~/setups';\r\nimport type { CacheValues, WH } from '~/support';\r\nimport type { PlainObject } from '~/typings';\r\n\r\nexport interface ObserversSetupState {\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface ObserversSetupUpdateInfo extends SetupUpdateInfo {\r\n  _takeRecords?: boolean;\r\n}\r\n\r\nexport type ObserversSetupUpdateHints = {\r\n  _sizeChanged?: boolean;\r\n  _directionChanged?: boolean;\r\n  _heightIntrinsicChanged?: boolean;\r\n  _hostMutation?: boolean;\r\n  _contentMutation?: boolean;\r\n  _appear?: boolean;\r\n  _scrollbarSizeChanged?: boolean;\r\n};\r\n\r\nexport type ObserversSetup = Setup<\r\n  ObserversSetupUpdateInfo,\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints\r\n>;\r\n\r\nexport const createObserversSetup = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  getCurrentOption: OptionsCheckFn<Options>,\r\n  onObserversUpdated: (updateHints: ObserversSetupUpdateHints) => void\r\n): ObserversSetup => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let updateContentMutationObserver: (() => void) | undefined;\r\n  let destroyContentMutationObserver: (() => void) | undefined;\r\n  let prevContentRect: DOMRectReadOnly | undefined;\r\n\r\n  const { _nativeScrollbarsHiding } = getEnvironment();\r\n\r\n  const hostSelector = `[${dataAttributeHost}]`;\r\n\r\n  // TODO: observer textarea attrs if textarea\r\n\r\n  const viewportSelector = `[${dataAttributeViewport}]`;\r\n  const viewportAttrsFromTarget = ['tabindex'];\r\n  const baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'];\r\n  const baseStyleChangingAttrs = ['id', 'class', 'style', 'open'];\r\n\r\n  const state: ObserversSetupState = {\r\n    _heightIntrinsic: false,\r\n    _directionIsRTL: getDirectionIsRTL(structureSetupElements._host),\r\n  };\r\n  const {\r\n    _host,\r\n    _viewport,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n  const env = getEnvironment();\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const _undoViewportArrange =\r\n        scrollbarsHidingPlugin &&\r\n        scrollbarsHidingPlugin._viewportArrangement(\r\n          structureSetupElements,\r\n          structureSetupState,\r\n          state,\r\n          env,\r\n          getCurrentOption\r\n        )._undoViewportArrange;\r\n\r\n      const hasOver = _viewportHasClass(dataValueViewportOverflowVisible);\r\n      const isArranged = !_viewportIsTarget && _viewportHasClass(dataValueViewportArrange);\r\n      const scrollOffset = isArranged && getElmentScroll(_viewport);\r\n\r\n      _viewportAddRemoveClass(dataValueViewportOverflowVisible);\r\n      _viewportIsTarget && _viewportAddRemoveClass(dataValueHostUpdating, true);\r\n      const redoViewportArrange = isArranged && _undoViewportArrange && _undoViewportArrange()[0];\r\n\r\n      const contentScroll = scrollSize(_content);\r\n      const viewportScroll = scrollSize(_viewport);\r\n      const fractional = fractionalSize(_viewport);\r\n\r\n      _viewportAddRemoveClass(dataValueViewportOverflowVisible, hasOver);\r\n      _viewportIsTarget && _viewportAddRemoveClass(dataValueHostUpdating);\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      scrollElementTo(_viewport, scrollOffset);\r\n\r\n      return {\r\n        w: viewportScroll.w + contentScroll.w + fractional.w,\r\n        h: viewportScroll.h + contentScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : concat(baseStyleChangingAttrs, baseStyleChangingAttrsTextarea);\r\n\r\n  const onObserversUpdatedDebounced = debounce(onObserversUpdated, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        concat(keys(prevObj), keys(currObj)).reduce((obj, key) => {\r\n          obj[key] = prevObj[key as keyof typeof prevObj] || currObj[key as keyof typeof currObj];\r\n          return obj;\r\n        }, {} as PlainObject),\r\n      ] as [Partial<ObserversSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (inArray(viewportAttrsFromTarget, attribute)) {\r\n        const hostAttr = attr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          attr(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttr(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const onTrinsicChanged = (\r\n    heightIntrinsicCache: CacheValues<boolean>,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n\r\n    assignDeep(state, { _heightIntrinsic: heightIntrinsic });\r\n    !fromRecords && onObserversUpdated(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onSizeChanged = ({\r\n    _sizeChanged,\r\n    _directionIsRTLCache,\r\n    _appear,\r\n  }: SizeObserverCallbackParams) => {\r\n    const exclusiveSizeChange = _sizeChanged && !_appear && !_directionIsRTLCache;\r\n    const updateFn =\r\n      // use debounceed update:\r\n      // if native scrollbars hiding is supported\r\n      // and if the update is more than just a exclusive sizeChange (e.g. size change + appear, or size change + direction)\r\n      !exclusiveSizeChange && _nativeScrollbarsHiding\r\n        ? onObserversUpdatedDebounced\r\n        : onObserversUpdated;\r\n\r\n    const [directionIsRTL, directionIsRTLChanged] = _directionIsRTLCache || [];\r\n\r\n    _directionIsRTLCache && assignDeep(state, { _directionIsRTL: directionIsRTL });\r\n\r\n    updateFn({\r\n      _sizeChanged: _sizeChanged || _appear,\r\n      _appear,\r\n      _directionChanged: directionIsRTLChanged,\r\n    });\r\n  };\r\n\r\n  const onContentMutation = (\r\n    contentChangedThroughEvent: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [, _contentMutation] = updateContentSizeCache();\r\n    const updateHints = {\r\n      _contentMutation,\r\n    };\r\n\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent ? onObserversUpdated : onObserversUpdatedDebounced;\r\n\r\n    _contentMutation && !fromRecords && updateFn(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const updateHints = { _hostMutation: targetStyleChanged };\r\n\r\n    if (targetStyleChanged && !fromRecords) {\r\n      onObserversUpdatedDebounced(updateHints);\r\n    } else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const { _flexboxGlue, _addResizeListener } = env;\r\n  const [constructTrinsicObserver, updateTrinsicObserver] =\r\n    _content || !_flexboxGlue ? createTrinsicObserver(_host, onTrinsicChanged) : [];\r\n\r\n  const constructSizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n      _direction: true,\r\n    });\r\n\r\n  const [constructHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: concat(baseStyleChangingAttrs, viewportAttrsFromTarget),\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor((entries) => {\r\n      const currContentRect = entries[entries.length - 1].contentRect;\r\n      onSizeChanged({\r\n        _sizeChanged: true,\r\n        _appear: domRectAppeared(currContentRect, prevContentRect),\r\n      });\r\n      prevContentRect = currContentRect;\r\n    });\r\n\r\n  return [\r\n    () => {\r\n      // order is matter!\r\n      updateViewportAttrsFromHost();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n      const destroySizeObserver = constructSizeObserver && constructSizeObserver();\r\n      const destroyTrinsicObserver = constructTrinsicObserver && constructTrinsicObserver();\r\n      const destroyHostMutationObserver = constructHostMutationObserver();\r\n      const removeResizeListener = _addResizeListener((_scrollbarSizeChanged) => {\r\n        const [, _contentMutation] = updateContentSizeCache();\r\n        onObserversUpdatedDebounced({ _scrollbarSizeChanged, _contentMutation });\r\n      });\r\n\r\n      return () => {\r\n        viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n        destroySizeObserver && destroySizeObserver();\r\n        destroyTrinsicObserver && destroyTrinsicObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n        destroyHostMutationObserver();\r\n        removeResizeListener();\r\n      };\r\n    },\r\n    ({ _checkOption, _takeRecords, _force }) => {\r\n      const updateHints: ObserversSetupUpdateHints = {};\r\n\r\n      const [ignoreMutation] = _checkOption('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = _checkOption('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = _checkOption('update.elementEvents');\r\n      const [debounceValue, debounceChanged] = _checkOption('update.debounce');\r\n      const contentMutationObserverChanged = elementEventsChanged || attributesChanged;\r\n      const takeRecords = _takeRecords || _force;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (contentMutationObserverChanged) {\r\n        updateContentMutationObserver && updateContentMutationObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n\r\n        const [construct, update] = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: concat(contentMutationObserverAttr, attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target: mutationTarget, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(mutationTarget, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(mutationTarget, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n\r\n        destroyContentMutationObserver = construct();\r\n        updateContentMutationObserver = update;\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        onObserversUpdatedDebounced._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n\r\n      if (takeRecords) {\r\n        const hostUpdateResult = updateHostMutationObserver();\r\n        const trinsicUpdateResult = updateTrinsicObserver && updateTrinsicObserver();\r\n        const contentUpdateResult =\r\n          updateContentMutationObserver && updateContentMutationObserver();\r\n\r\n        hostUpdateResult &&\r\n          assignDeep(\r\n            updateHints,\r\n            onHostMutation(hostUpdateResult[0], hostUpdateResult[1], takeRecords)\r\n          );\r\n\r\n        trinsicUpdateResult &&\r\n          assignDeep(updateHints, onTrinsicChanged(trinsicUpdateResult[0], takeRecords));\r\n\r\n        contentUpdateResult &&\r\n          assignDeep(updateHints, onContentMutation(contentUpdateResult[0], takeRecords));\r\n      }\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  getRTLCompatibleScrollBounds,\r\n  mathMax,\r\n  mathMin,\r\n  mathRound,\r\n  strHeight,\r\n  strWidth,\r\n} from '~/support';\r\nimport type { Environment } from '~/environment';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarStructure } from './scrollbarsSetup.elements';\r\n\r\nconst capNumber = (min: number, max: number, number: number) => mathMax(min, mathMin(max, number));\r\n\r\nexport const getScrollbarHandleOffsetPercent = (\r\n  scrollPos: number,\r\n  overflowAmount: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n) => {\r\n  const rawScrollPosMax = mathRound(overflowAmount);\r\n  const [scrollPositionMin, scrollPositionMax] = getRTLCompatibleScrollBounds(\r\n    rawScrollPosMax,\r\n    rtlScrollBehavior\r\n  );\r\n\r\n  const scrollPercentNegate = (scrollPositionMax - scrollPos) / scrollPositionMax;\r\n  const scrollPercentInvert = scrollPos / scrollPositionMin;\r\n  const scrollPercentNone = scrollPos / scrollPositionMax;\r\n  const rawScrollPercent = rtlScrollBehavior\r\n    ? rtlScrollBehavior.n\r\n      ? scrollPercentNegate\r\n      : rtlScrollBehavior.i\r\n      ? scrollPercentInvert\r\n      : scrollPercentNone\r\n    : scrollPercentNone;\r\n\r\n  return capNumber(0, 1, rawScrollPercent);\r\n};\r\n\r\n/**\r\n * Gets the scrollbar handle length ratio\r\n * @param structureSetupState The structure setup state.\r\n * @param isHorizontal Whether the axis is horizontal\r\n * @param scrollbarStructure The scrollbar structure. Only passed when the length ratio is calculated for the offset ratio (respects handle min. & max. size via. css)\r\n * @returns The scrollbar handle length ratio.\r\n */\r\nexport const getScrollbarHandleLengthRatio = (\r\n  structureSetupState: StructureSetupState,\r\n  isHorizontal?: boolean,\r\n  scrollbarStructure?: ScrollbarStructure\r\n) => {\r\n  if (scrollbarStructure) {\r\n    const axis = isHorizontal ? strWidth : strHeight;\r\n    const { _track, _handle } = scrollbarStructure;\r\n\r\n    const handleSize = getBoundingClientRect(_handle)[axis];\r\n    const trackSize = getBoundingClientRect(_track)[axis];\r\n\r\n    return capNumber(0, 1, handleSize / trackSize);\r\n  }\r\n\r\n  const axis = isHorizontal ? 'x' : 'y';\r\n  const { _overflowAmount, _overflowEdge } = structureSetupState;\r\n\r\n  const viewportSize = _overflowEdge[axis];\r\n  const overflowAmount = _overflowAmount[axis];\r\n\r\n  return capNumber(0, 1, viewportSize / (viewportSize + overflowAmount));\r\n};\r\n\r\nexport const getScrollbarHandleOffsetRatio = (\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollPercent: number,\r\n  isHorizontal?: boolean\r\n) => {\r\n  const lengthRatio = getScrollbarHandleLengthRatio(\r\n    structureSetupState,\r\n    isHorizontal,\r\n    scrollbarStructure\r\n  );\r\n\r\n  return (1 / lengthRatio) * (1 - lengthRatio) * scrollPercent;\r\n};\r\n","import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  getDirectionIsRTL,\r\n  each,\r\n  getTrasformTranslateValue,\r\n  isBoolean,\r\n  isEmptyArray,\r\n  parent,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  scrollT,\r\n  setT,\r\n  bind,\r\n  getElmentScroll,\r\n  inArray,\r\n  strWidth,\r\n  strHeight,\r\n  concat,\r\n  assignDeep,\r\n  ratioToCssPercent,\r\n  numberToCssPx,\r\n  setStyles,\r\n  createOrKeepArray,\r\n} from '~/support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarTransitionless,\r\n  classNameScrollbarNoCssCustomProps,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { StructureSetupState } from '../structureSetup';\r\nimport {\r\n  getScrollbarHandleLengthRatio,\r\n  getScrollbarHandleOffsetPercent,\r\n  getScrollbarHandleOffsetRatio,\r\n} from './scrollbarsSetup.calculations';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollTimeline: AnimationTimeline | undefined;\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _style: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: () => void;\r\n  _refreshScrollbarsHandleOffset: () => void;\r\n  _refreshScrollbarsScrollbarOffset: () => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => () => void\r\n];\r\n\r\ntype PotentialAnimation = Animation | false | null | undefined;\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const { _getDefaultInitialization, _cssCustomProperties } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const elementAnimations = new Map<HTMLElement, PotentialAnimation[]>();\r\n  const initScrollTimeline = (axis: 'x' | 'y') =>\r\n    scrollT &&\r\n    new scrollT({\r\n      source: _scrollOffsetElement,\r\n      axis,\r\n    });\r\n  const scrollTimelineX = initScrollTimeline('x');\r\n  const scrollTimelineY = initScrollTimeline('y');\r\n\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n  const doRefreshScrollbarOffset = (scrollbar: HTMLElement) =>\r\n    _viewportIsTarget && !_isBody && parent(scrollbar) === _viewport;\r\n  const getScrollbarOffsetKeyframes = (\r\n    overflowAmount: number,\r\n    isHorizontal?: boolean,\r\n    directionRTL?: boolean\r\n  ) => {\r\n    const cushion = 0.5 * (directionRTL ? 1 : -1);\r\n    const directionRTLMultiplicator = isHorizontal && directionRTL ? -1 : 1;\r\n    return {\r\n      transform: [\r\n        getTrasformTranslateValue(numberToCssPx(0 + cushion), isHorizontal),\r\n        getTrasformTranslateValue(\r\n          numberToCssPx(overflowAmount * directionRTLMultiplicator + cushion),\r\n          isHorizontal\r\n        ),\r\n      ],\r\n    };\r\n  };\r\n  const addDirectionRTLKeyframes = (\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    directionRTL?: boolean\r\n  ) =>\r\n    assignDeep(\r\n      keyframes,\r\n      directionRTL\r\n        ? {\r\n            clear: ['left'], // dummy keyframe for direction rtl animation because of chrome bug\r\n          }\r\n        : {}\r\n    );\r\n  const cancelElementAnimations = (elements?: HTMLElement | HTMLElement[]) => {\r\n    elementAnimations.forEach((currAnimations, element) => {\r\n      const doCancel = elements ? inArray(createOrKeepArray(elements), element) : true;\r\n      if (doCancel) {\r\n        each(currAnimations || [], (animation) => {\r\n          animation && animation.cancel();\r\n        });\r\n        elementAnimations.delete(element);\r\n      }\r\n    });\r\n  };\r\n  const setElementAnimation = (\r\n    element: HTMLElement,\r\n    timeline: AnimationTimeline,\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    composite?: CompositeOperation\r\n  ) => {\r\n    const activeAnimations = elementAnimations.get(element) || [];\r\n    const activeAnimation = activeAnimations.find(\r\n      (animation) => animation && animation.timeline === timeline\r\n    );\r\n\r\n    if (activeAnimation) {\r\n      activeAnimation.effect = new KeyframeEffect(element, keyframes, { composite });\r\n    } else {\r\n      elementAnimations.set(\r\n        element,\r\n        concat(activeAnimations, [\r\n          element.animate(keyframes, {\r\n            timeline,\r\n            composite,\r\n          }),\r\n        ])\r\n      );\r\n    }\r\n  };\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      setStyles(elm, styles);\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleLength = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    scrollbarStyle(scrollbarStructures, (structure) => {\r\n      const { _handle } = structure;\r\n      return [\r\n        _handle,\r\n        {\r\n          [isHorizontal ? strWidth : strHeight]: ratioToCssPercent(\r\n            getScrollbarHandleLengthRatio(structureSetupState, isHorizontal)\r\n          ),\r\n        },\r\n      ];\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleOffset = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    if (scrollTimelineX && scrollTimelineY) {\r\n      each(scrollbarStructures, (structure: ScrollbarStructure) => {\r\n        const { _scrollbar, _handle } = structure;\r\n        const getRatio = bind(getScrollbarHandleOffsetRatio, structureSetupState, structure);\r\n        const directionRTL = isHorizontal && getDirectionIsRTL(_scrollbar);\r\n        const start = getRatio(directionRTL ? 1 : 0, isHorizontal);\r\n        const end = getRatio(directionRTL ? 0 : 1, isHorizontal);\r\n        setElementAnimation(\r\n          _handle,\r\n          isHorizontal ? scrollTimelineX : scrollTimelineY,\r\n          addDirectionRTLKeyframes(\r\n            {\r\n              transform: [\r\n                getTrasformTranslateValue(ratioToCssPercent(start), isHorizontal),\r\n                getTrasformTranslateValue(ratioToCssPercent(end), isHorizontal),\r\n              ],\r\n            },\r\n            directionRTL\r\n          )\r\n        );\r\n      });\r\n    } else {\r\n      scrollbarStyle(scrollbarStructures, (structure) => {\r\n        const { _handle, _scrollbar } = structure;\r\n        const { _rtlScrollBehavior } = getEnvironment();\r\n        const axis = isHorizontal ? 'x' : 'y';\r\n        const { _overflowAmount } = structureSetupState;\r\n        const isRTL = getDirectionIsRTL(_scrollbar);\r\n\r\n        const offsetRatio = getScrollbarHandleOffsetRatio(\r\n          structureSetupState,\r\n          structure,\r\n          getScrollbarHandleOffsetPercent(\r\n            getElmentScroll(_scrollOffsetElement)[axis],\r\n            _overflowAmount[axis],\r\n            isHorizontal && isRTL && _rtlScrollBehavior\r\n          ),\r\n          isHorizontal\r\n        );\r\n\r\n        return [\r\n          _handle,\r\n          {\r\n            transform: getTrasformTranslateValue(ratioToCssPercent(offsetRatio), isHorizontal),\r\n          },\r\n        ];\r\n      });\r\n    }\r\n  };\r\n  const styleScrollbarPosition = (structure: ScrollbarStructure) => {\r\n    const { _scrollbar } = structure;\r\n    const elm = doRefreshScrollbarOffset(_scrollbar) && _scrollbar;\r\n    const { x, y } = getElmentScroll(_scrollOffsetElement);\r\n    return [\r\n      elm,\r\n      {\r\n        transform: elm\r\n          ? getTrasformTranslateValue({ x: numberToCssPx(x), y: numberToCssPx(y) })\r\n          : '',\r\n      },\r\n    ] as [HTMLElement | false, StyleObject];\r\n  };\r\n\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = () => {\r\n    scrollbarStructureRefreshHandleLength(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleLength(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsHandleOffset = () => {\r\n    scrollbarStructureRefreshHandleOffset(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleOffset(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsScrollbarOffset = () => {\r\n    if (_viewportIsTarget) {\r\n      if (scrollTimelineX && scrollTimelineY) {\r\n        const { _overflowAmount } = structureSetupState;\r\n        const directionRTL = !!horizontalScrollbars.find(({ _scrollbar }) =>\r\n          getDirectionIsRTL(_scrollbar)\r\n        );\r\n        const setScrollbarElementAnimation = (\r\n          scrollbar: HTMLElement,\r\n          timeline: AnimationTimeline,\r\n          overflowAmount: number,\r\n          isHorizontal?: boolean,\r\n          rtl?: boolean\r\n        ) =>\r\n          setElementAnimation(\r\n            scrollbar,\r\n            timeline,\r\n            addDirectionRTLKeyframes(\r\n              getScrollbarOffsetKeyframes(overflowAmount, isHorizontal, rtl),\r\n              directionRTL\r\n            ),\r\n            'add'\r\n          );\r\n\r\n        each(concat(verticalScrollbars, horizontalScrollbars), ({ _scrollbar }) => {\r\n          if (doRefreshScrollbarOffset(_scrollbar)) {\r\n            setScrollbarElementAnimation(\r\n              _scrollbar,\r\n              scrollTimelineX,\r\n              _overflowAmount.x,\r\n              true,\r\n              directionRTL\r\n            );\r\n            setScrollbarElementAnimation(_scrollbar, scrollTimelineY, _overflowAmount.y);\r\n          } else {\r\n            cancelElementAnimations(_scrollbar);\r\n          }\r\n        });\r\n      } else {\r\n        scrollbarStyle(horizontalScrollbars, styleScrollbarPosition);\r\n        scrollbarStyle(verticalScrollbars, styleScrollbarPosition);\r\n      }\r\n    }\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const arrToPush = isHorizontal ? horizontalScrollbars : verticalScrollbars;\r\n    const transitionlessClass = isEmptyArray(arrToPush) ? classNameScrollbarTransitionless : '';\r\n    const scrollbar = createDiv(\r\n      `${classNameScrollbar} ${scrollbarClassName} ${transitionlessClass}`\r\n    );\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n\r\n    if (!_cssCustomProperties) {\r\n      addClass(scrollbar, classNameScrollbarNoCssCustomProps);\r\n    }\r\n\r\n    push(arrToPush, result);\r\n    push(destroyFns, [\r\n      appendChildren(scrollbar, track),\r\n      appendChildren(track, handle),\r\n      bind(removeElements, scrollbar),\r\n      cancelElementAnimations,\r\n      scrollbarsSetupEvents(\r\n        result,\r\n        scrollbarsAddRemoveClass,\r\n        scrollbarStructureRefreshHandleOffset,\r\n        isHorizontal\r\n      ),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = bind(generateScrollbarDOM, true);\r\n  const generateVerticalScrollbarStructure = bind(generateScrollbarDOM, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    setT(() => {\r\n      scrollbarsAddRemoveClass(classNameScrollbarTransitionless);\r\n    }, 300);\r\n\r\n    return bind(runEachAndClear, destroyFns);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _refreshScrollbarsScrollbarOffset: refreshScrollbarsScrollbarOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollTimeline: scrollTimelineX,\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollTimeline: scrollTimelineY,\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  offsetSize,\r\n  addEventListener,\r\n  preventDefault,\r\n  runEachAndClear,\r\n  stopPropagation,\r\n  selfClearTimeout,\r\n  parent,\r\n  closest,\r\n  push,\r\n  bind,\r\n  mathRound,\r\n  strWidth,\r\n  strHeight,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n  addAttrClass,\r\n} from '~/support';\r\nimport { clickScrollPluginModuleName, getStaticPluginModuleInstance } from '~/plugins';\r\nimport {\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarInteraction,\r\n  classNameScrollbarWheel,\r\n  dataAttributeHost,\r\n  dataValueHostScrollbarPressed,\r\n} from '~/classnames';\r\nimport type { ClickScrollPlugin } from '~/plugins';\r\nimport type { ReadonlyOptions } from '~/options';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarsSetupElementsObj, ScrollbarStructure } from './scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\n\r\nexport type ScrollbarsSetupEvents = (\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\r\n  refreshScrollbarStructuresHandleOffset: (\r\n    scrollbarStructure: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => void,\r\n  isHorizontal?: boolean\r\n) => () => void;\r\n\r\nexport const createScrollbarsSetupEvents = (\r\n  options: ReadonlyOptions,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState\r\n): ScrollbarsSetupEvents => {\r\n  const { _host, _scrollOffsetElement, _documentElm } = structureSetupElements;\r\n\r\n  return (\r\n    scrollbarStructure,\r\n    scrollbarsAddRemoveClass,\r\n    refreshScrollbarStructuresHandleOffset,\r\n    isHorizontal\r\n  ) => {\r\n    const { _scrollbar, _track, _handle } = scrollbarStructure;\r\n    const [wheelTimeout, clearWheelTimeout] = selfClearTimeout(333);\r\n    const [requestHandleTransitionAnimationFrame, cancelHandleTransitionTimeout] =\r\n      selfClearTimeout();\r\n    const refreshHandleOffsetTransition = bind(\r\n      refreshScrollbarStructuresHandleOffset,\r\n      [scrollbarStructure],\r\n      isHorizontal\r\n    );\r\n    const scrollByFn = !!_scrollOffsetElement.scrollBy;\r\n\r\n    const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}` as 'clientX' | 'clientY'; // for pointer event (can't use xy because of IE11)\r\n    const widthHeightKey = isHorizontal ? strWidth : strHeight;\r\n    const leftTopKey = isHorizontal ? 'left' : 'top'; // for BCR (can't use xy because of IE11)\r\n    const whKey = isHorizontal ? 'w' : 'h';\r\n    const xyKey = isHorizontal ? 'x' : 'y';\r\n\r\n    const isAffectingTransition = (event: TransitionEvent) =>\r\n      event.propertyName.indexOf(widthHeightKey) > -1;\r\n\r\n    const createInteractiveScrollEvents = () => {\r\n      const releasePointerCaptureEvents = 'pointerup pointerleave pointercancel lostpointercapture';\r\n\r\n      const createRelativeHandleMove =\r\n        (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\r\n          const { _overflowAmount } = structureSetupState;\r\n          const handleTrackDiff = offsetSize(_track)[whKey] - offsetSize(_handle)[whKey];\r\n          const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\r\n          const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\r\n\r\n          scrollElementTo(_scrollOffsetElement, {\r\n            [xyKey]: mouseDownScroll + scrollDelta,\r\n          });\r\n        };\r\n\r\n      return addEventListener(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\r\n        const isDragScroll =\r\n          closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\r\n        const pointerCaptureElement = isDragScroll ? _handle : _track;\r\n\r\n        const scrollbarOptions = options.scrollbars;\r\n        const { button, isPrimary, pointerType } = pointerDownEvent;\r\n        const { pointers } = scrollbarOptions;\r\n\r\n        const continuePointerDown =\r\n          button === 0 &&\r\n          isPrimary &&\r\n          scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'] &&\r\n          (pointers || []).includes(pointerType);\r\n\r\n        if (continuePointerDown) {\r\n          const instantClickScroll = !isDragScroll && pointerDownEvent.shiftKey;\r\n          const getHandleRect = bind(getBoundingClientRect, _handle);\r\n          const getTrackRect = bind(getBoundingClientRect, _track);\r\n          const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\r\n            (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\r\n          const axisScale =\r\n            mathRound(getBoundingClientRect(_scrollOffsetElement)[widthHeightKey]) /\r\n              offsetSize(_scrollOffsetElement)[whKey] || 1;\r\n          const moveHandleRelative = createRelativeHandleMove(\r\n            getElmentScroll(_scrollOffsetElement)[xyKey] || 0,\r\n            1 / axisScale\r\n          );\r\n          const pointerDownOffset = pointerDownEvent[clientXYKey];\r\n          const handleRect = getHandleRect();\r\n          const trackRect = getTrackRect();\r\n          const handleLength = handleRect[widthHeightKey];\r\n          const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\r\n          const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\r\n          const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\r\n          const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            runEachAndClear(offFns);\r\n            pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\r\n          };\r\n          const removeAttrClass = addAttrClass(\r\n            _host,\r\n            dataAttributeHost,\r\n            dataValueHostScrollbarPressed\r\n          );\r\n\r\n          const offFns = [\r\n            removeAttrClass,\r\n            addEventListener(_documentElm, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_documentElm, 'selectstart', (event: Event) => preventDefault(event), {\r\n              _passive: false,\r\n            }),\r\n            addEventListener(_track, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_track, 'pointermove', (pointerMoveEvent: PointerEvent) => {\r\n              const relativeMovement = pointerMoveEvent[clientXYKey] - pointerDownOffset;\r\n\r\n              if (isDragScroll || instantClickScroll) {\r\n                moveHandleRelative(startOffset + relativeMovement);\r\n              }\r\n            }),\r\n          ];\r\n\r\n          pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\r\n\r\n          if (instantClickScroll) {\r\n            moveHandleRelative(startOffset);\r\n          } else if (!isDragScroll) {\r\n            const animateClickScroll = getStaticPluginModuleInstance<typeof ClickScrollPlugin>(\r\n              clickScrollPluginModuleName\r\n            );\r\n\r\n            animateClickScroll &&\r\n              push(\r\n                offFns,\r\n                animateClickScroll(\r\n                  moveHandleRelative,\r\n                  getHandleOffset,\r\n                  startOffset,\r\n                  handleLength,\r\n                  relativeTrackPointerOffset\r\n                )\r\n              );\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    let wheelScrollBy = true;\r\n\r\n    return bind(runEachAndClear, [\r\n      addEventListener(_scrollbar, 'pointerenter', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\r\n      }),\r\n      addEventListener(_scrollbar, 'pointerleave pointercancel', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, false);\r\n      }),\r\n      addEventListener(\r\n        _scrollbar,\r\n        'wheel',\r\n        (wheelEvent: WheelEvent) => {\r\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\r\n\r\n          // the first wheel event is swallowed, simulate scroll to compensate for it\r\n          if (scrollByFn && wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === _host) {\r\n            _scrollOffsetElement.scrollBy({\r\n              left: deltaX,\r\n              top: deltaY,\r\n              behavior: 'smooth',\r\n            });\r\n          }\r\n\r\n          wheelScrollBy = false;\r\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\r\n          wheelTimeout(() => {\r\n            wheelScrollBy = true;\r\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\r\n          });\r\n\r\n          preventDefault(wheelEvent);\r\n        },\r\n        { _passive: false, _capture: true }\r\n      ),\r\n      addEventListener(_handle, 'transitionstart', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          const animateHandleOffset = () => {\r\n            refreshHandleOffsetTransition();\r\n            requestHandleTransitionAnimationFrame(animateHandleOffset);\r\n          };\r\n          animateHandleOffset();\r\n        }\r\n      }),\r\n      addEventListener(_handle, 'transitionend transitioncancel', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          cancelHandleTransitionTimeout();\r\n          refreshHandleOffsetTransition();\r\n        }\r\n      }),\r\n      // rootClickStopPropagationEvent\r\n      addEventListener(\r\n        _scrollbar,\r\n        'mousedown',\r\n        bind(addEventListener, _documentElm, 'click', stopPropagation, {\r\n          _once: true,\r\n          _capture: true,\r\n        }),\r\n        { _capture: true }\r\n      ),\r\n      createInteractiveScrollEvents(),\r\n      clearWheelTimeout,\r\n      cancelHandleTransitionTimeout,\r\n    ]);\r\n  };\r\n};\r\n","import { bind, noop, addEventListener, push, runEachAndClear, selfClearTimeout } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHideHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n  classNameScrollbarAutoHide,\r\n} from '~/classnames';\r\nimport { type ReadonlyOptions } from '~/options';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n  StructureSetupState,\r\n  StructureSetupUpdateHints,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport { createScrollbarsSetupElements } from './scrollbarsSetup.elements';\r\nimport { createScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n  _structureUpdateHints?: StructureSetupUpdateHints;\r\n}\r\n\r\nexport type ScrollbarsSetup = [\r\n  ...Setup<ScrollbarsSetupUpdateInfo, ScrollbarsSetupState, void>,\r\n  /** The elements created by the scrollbars setup. */\r\n  ScrollbarsSetupElementsObj\r\n];\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  observersSetupState: ObserversSetupState,\r\n  structureSetupState: StructureSetupState,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onScroll: (event: Event) => void\r\n): ScrollbarsSetup => {\r\n  let autoHideIsMove: boolean | undefined;\r\n  let autoHideIsLeave: boolean | undefined;\r\n  let autoHideNotNever: boolean | undefined;\r\n  let mouseInHost: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let instanceAutoHideSuspendScrollDestroyFn = noop;\r\n  let instanceAutoHideDelay = 0;\r\n\r\n  const [requestMouseMoveAnimationFrame, cancelMouseMoveAnimationFrame] = selfClearTimeout();\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [scrollTimeout, clearScrollTimeout] = selfClearTimeout(100);\r\n  const [auotHideMoveTimeout, clearAutoHideTimeout] = selfClearTimeout(100);\r\n  const [autoHideSuspendTimeout, clearAutoHideSuspendTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoTimeout] = selfClearTimeout(() => instanceAutoHideDelay);\r\n  const [elements, appendElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    createScrollbarsSetupEvents(options, structureSetupElements, structureSetupState)\r\n  );\r\n  const { _host, _scrollEventElement, _isBody } = structureSetupElements;\r\n  const {\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n    _refreshScrollbarsScrollbarOffset,\r\n  } = elements;\r\n  const manageAutoHideSuspension = (add: boolean) => {\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, true);\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, false);\r\n  };\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHideHidden);\r\n    } else {\r\n      const hide = bind(_scrollbarsAddRemoveClass, classNameScrollbarAutoHideHidden, true);\r\n      if (instanceAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n\r\n  // needed to not fire unnecessary operations for pointer events on safari which will cause side effects: https://github.com/KingSora/OverlayScrollbars/issues/560\r\n  const isHoverablePointerType = (event: PointerEvent) => event.pointerType === 'mouse';\r\n\r\n  const onHostMouseEnter = (event: PointerEvent) => {\r\n    if (isHoverablePointerType(event)) {\r\n      mouseInHost = autoHideIsLeave;\r\n      mouseInHost && manageScrollbarsAutoHide(true);\r\n    }\r\n  };\r\n\r\n  const destroyFns: (() => void)[] = [\r\n    clearScrollTimeout,\r\n    clearAutoTimeout,\r\n    clearAutoHideTimeout,\r\n    clearAutoHideSuspendTimeout,\r\n    cancelScrollAnimationFrame,\r\n    cancelMouseMoveAnimationFrame,\r\n    () => instanceAutoHideSuspendScrollDestroyFn(),\r\n\r\n    addEventListener(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    addEventListener(_host, 'pointerenter', onHostMouseEnter),\r\n    addEventListener(_host, 'pointerleave', (event: PointerEvent) => {\r\n      if (isHoverablePointerType(event)) {\r\n        mouseInHost = false;\r\n        autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n      }\r\n    }),\r\n    addEventListener(_host, 'pointermove', (event: PointerEvent) => {\r\n      isHoverablePointerType(event) &&\r\n        autoHideIsMove &&\r\n        requestMouseMoveAnimationFrame(() => {\r\n          clearScrollTimeout();\r\n          manageScrollbarsAutoHide(true);\r\n          auotHideMoveTimeout(() => {\r\n            autoHideIsMove && manageScrollbarsAutoHide(false);\r\n          });\r\n        });\r\n    }),\r\n    addEventListener(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset();\r\n\r\n        autoHideNotNever && manageScrollbarsAutoHide(true);\r\n        scrollTimeout(() => {\r\n          autoHideNotNever && !mouseInHost && manageScrollbarsAutoHide(false);\r\n        });\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _refreshScrollbarsScrollbarOffset();\r\n    }),\r\n  ];\r\n\r\n  return [\r\n    () => bind(runEachAndClear, push(destroyFns, appendElements())),\r\n    ({ _checkOption, _force, _observersUpdateHints, _structureUpdateHints }) => {\r\n      const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n        _structureUpdateHints || {};\r\n      const { _directionChanged, _appear } = _observersUpdateHints || {};\r\n      const { _directionIsRTL } = observersSetupState;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const { _overflowAmount, _overflowStyle, _hasOverflow } = structureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        _checkOption('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = _checkOption('scrollbars.theme');\r\n      const [visibility, visibilityChanged] = _checkOption('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] = _checkOption('scrollbars.autoHide');\r\n      const [autoHideSuspend, autoHideSuspendChanged] = _checkOption('scrollbars.autoHideSuspend');\r\n      const [autoHideDelay] = _checkOption('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = _checkOption('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = _checkOption('scrollbars.clickScroll');\r\n      const trulyAppeared = _appear && !_force;\r\n      const hasOverflow = _hasOverflow.x || _hasOverflow.y;\r\n      const updateScrollbars =\r\n        _overflowEdgeChanged || _overflowAmountChanged || _directionChanged || _force;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (overflowStyle: OverflowStyle, isHorizontal: boolean) => {\r\n        const isVisible =\r\n          visibility === 'visible' || (visibility === 'auto' && overflowStyle === 'scroll');\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n        return isVisible;\r\n      };\r\n\r\n      instanceAutoHideDelay = autoHideDelay;\r\n\r\n      if (trulyAppeared) {\r\n        if (autoHideSuspend && hasOverflow) {\r\n          manageAutoHideSuspension(false);\r\n          instanceAutoHideSuspendScrollDestroyFn();\r\n          autoHideSuspendTimeout(() => {\r\n            instanceAutoHideSuspendScrollDestroyFn = addEventListener(\r\n              _scrollEventElement,\r\n              'scroll',\r\n              bind(manageAutoHideSuspension, true),\r\n              {\r\n                _once: true,\r\n              }\r\n            );\r\n          });\r\n        } else {\r\n          manageAutoHideSuspension(true);\r\n        }\r\n      }\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n\r\n      if (autoHideSuspendChanged && !autoHideSuspend) {\r\n        manageAutoHideSuspension(true);\r\n      }\r\n\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideNotNever = autoHide !== 'never';\r\n        manageScrollbarsAutoHide(!autoHideNotNever, true);\r\n      }\r\n\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, clickScroll);\r\n      }\r\n\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(_overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(_overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n\r\n      if (updateScrollbars) {\r\n        // order is matter! length has to be refreshed before offset\r\n        _refreshScrollbarsHandleLength();\r\n        _refreshScrollbarsHandleOffset();\r\n        _refreshScrollbarsScrollbarOffset();\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    {},\r\n    elements,\r\n  ];\r\n};\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  parent,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  insertBefore,\r\n  attr,\r\n  keys,\r\n  removeAttr,\r\n  hasAttrClass,\r\n  addEventListener,\r\n  bind,\r\n  inArray,\r\n  addAttrClass,\r\n  addRemoveAttrClass,\r\n} from '~/support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n  dataValueHostHtmlBody,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n  resolveInitialization as generalResolveInitialization,\r\n} from '~/initialization';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => () => void,\r\n  canceled: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _viewportArrange: HTMLStyleElement | false | null | undefined;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  _originalScrollOffsetElement: HTMLElement;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _windowElm: Window;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _viewportIsContent: boolean;\r\n  _viewportHasClass: (viewportAttributeClassName: string) => boolean;\r\n  _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) => void;\r\n}\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n  const createUniqueViewportArrangeElement =\r\n    scrollbarsHidingPlugin && scrollbarsHidingPlugin._createUniqueViewportArrangeElement;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    host: defaultHostInitialization,\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    host: hostInitialization,\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const isBody = targetElement === ownerDocument.body;\r\n  const docWnd = ownerDocument.defaultView as Window;\r\n  const staticInitializationElement = bind(generalStaticInitializationElement, [targetElement]);\r\n  const dynamicInitializationElement = bind(generalDynamicInitializationElement, [targetElement]);\r\n  const resolveInitialization = bind(generalResolveInitialization, [targetElement]);\r\n  const createNewDiv = bind(createDiv, '');\r\n  const generateViewportElement = bind(\r\n    staticInitializationElement,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = bind(\r\n    dynamicInitializationElement,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // check the default contentElement\r\n  // if truthy (so the element would be present in the DOM) the passed element is the final content element and the viewport element is generated\r\n  // if falsy (so the element wouldn't be present in the DOM) the passed element is the final viewport element and the content element is omitted\r\n  const viewportIsContent =\r\n    !viewportIsTarget &&\r\n    isHTMLElement(possibleViewportElement) &&\r\n    possibleViewportElement === possibleContentElement;\r\n  const defaultContentElementPresent =\r\n    viewportIsContent && !!resolveInitialization(defaultContentInitialization);\r\n  const viewportIstContentViewport = defaultContentElementPresent\r\n    ? generateViewportElement()\r\n    : possibleViewportElement;\r\n  const viewportIsContentContent = defaultContentElementPresent\r\n    ? possibleContentElement\r\n    : generateContentElement();\r\n  const nonBodyViewportElement = viewportIsContent\r\n    ? viewportIstContentViewport\r\n    : possibleViewportElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : nonBodyViewportElement;\r\n  const nonBodyHostElement = isTextarea\r\n    ? staticInitializationElement(createNewDiv, defaultHostInitialization, hostInitialization)\r\n    : (targetElement as HTMLElement);\r\n  const hostElement = viewportIsTargetBody ? viewportElement : nonBodyHostElement;\r\n  const contentElement = viewportIsContent ? viewportIsContentContent : possibleContentElement;\r\n  const activeElm = ownerDocument.activeElement;\r\n  const setViewportFocus =\r\n    !viewportIsTarget && docWnd.top === docWnd && activeElm === targetElement;\r\n\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding:\r\n      !viewportIsTarget &&\r\n      dynamicInitializationElement(\r\n        createNewDiv,\r\n        defaultPaddingInitialization,\r\n        paddingInitialization\r\n      ),\r\n    _content: contentElement,\r\n    _viewportArrange:\r\n      !viewportIsTarget &&\r\n      !_nativeScrollbarsHiding &&\r\n      createUniqueViewportArrangeElement &&\r\n      createUniqueViewportArrangeElement(env),\r\n    _scrollOffsetElement: viewportIsTargetBody ? docElement : viewportElement,\r\n    _scrollEventElement: viewportIsTargetBody ? ownerDocument : viewportElement,\r\n    _originalScrollOffsetElement: isBody ? docElement : targetElement,\r\n    _windowElm: docWnd,\r\n    _documentElm: ownerDocument,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _viewportIsContent: viewportIsContent,\r\n    _viewportHasClass: (viewportAttributeClassName: string) =>\r\n      hasAttrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportAttributeClassName\r\n      ),\r\n    _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) =>\r\n      addRemoveAttrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportAttributeClassName,\r\n        add\r\n      ),\r\n  };\r\n  const generatedElements = keys(evaluatedTargetObj).reduce((arr, key) => {\r\n    const value = evaluatedTargetObj[key as keyof StructureSetupElementsObj];\r\n    return push(arr, value && isHTMLElement(value) && !parent(value) ? value : false);\r\n  }, [] as Array<HTMLElement | false>);\r\n  const elementIsGenerated = (elm: HTMLElement | false) =>\r\n    elm ? inArray(generatedElements, elm) : null;\r\n  const { _target, _host, _padding, _viewport, _content, _viewportArrange } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttr(_host, dataAttributeHost);\r\n      removeAttr(_host, dataAttributeInitialize);\r\n      removeAttr(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttr(docElement, dataAttributeHost);\r\n        removeAttr(docElement, dataAttributeInitialize);\r\n      }\r\n    },\r\n  ];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  let targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elementIsGenerated(elm) === false\r\n        )\r\n      );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const destroy = bind(runEachAndClear, destroyFns);\r\n  const appendElements = () => {\r\n    attr(_host, dataAttributeHost, viewportIsTarget ? 'viewport' : 'host');\r\n    attr(_padding, dataAttributePadding, '');\r\n    attr(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      attr(_viewport, dataAttributeViewport, '');\r\n      isBody && addAttrClass(docElement, dataAttributeHost, dataValueHostHtmlBody);\r\n    }\r\n\r\n    const unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n      appendChildren(parent(elm), contents(elm));\r\n      removeElements(elm);\r\n    };\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, () => {\r\n      removeAttr(_padding, dataAttributePadding);\r\n      removeAttr(_content, dataAttributeContent);\r\n      removeAttr(_viewport, dataAttributeHostOverflowX);\r\n      removeAttr(_viewport, dataAttributeHostOverflowY);\r\n      removeAttr(_viewport, dataAttributeViewport);\r\n\r\n      elementIsGenerated(_content) && unwrap(_content);\r\n      elementIsGenerated(_viewport) && unwrap(_viewport);\r\n      elementIsGenerated(_padding) && unwrap(_padding);\r\n    });\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      addAttrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden);\r\n      push(destroyFns, bind(removeAttr, _viewport, dataAttributeViewport));\r\n    }\r\n    if (_viewportArrange) {\r\n      insertBefore(_viewport, _viewportArrange);\r\n      push(destroyFns, bind(removeElements, _viewportArrange));\r\n    }\r\n    if (setViewportFocus) {\r\n      const tabIndexStr = 'tabindex';\r\n      const ogTabindex = attr(_viewport, tabIndexStr);\r\n\r\n      attr(_viewport, tabIndexStr, '-1');\r\n      _viewport.focus();\r\n\r\n      const revertViewportTabIndex = () =>\r\n        ogTabindex ? attr(_viewport, tabIndexStr, ogTabindex) : removeAttr(_viewport, tabIndexStr);\r\n      const off = addEventListener(ownerDocument, 'pointerdown keydown', () => {\r\n        revertViewportTabIndex();\r\n        off();\r\n      });\r\n\r\n      push(destroyFns, [revertViewportTabIndex, off]);\r\n    } else if (activeElm && (activeElm as HTMLElement).focus) {\r\n      (activeElm as HTMLElement).focus();\r\n    }\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n\r\n    return destroy;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, destroy];\r\n};\r\n","import { setStyles, strHeight } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment =\r\n  ({ _content }) =>\r\n  ({ _observersUpdateHints, _observersState, _force }) => {\r\n    const { _flexboxGlue } = getEnvironment();\r\n    const { _heightIntrinsicChanged } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const heightIntrinsicChanged =\r\n      (_content || !_flexboxGlue) && (_heightIntrinsicChanged || _force);\r\n\r\n    if (heightIntrinsicChanged) {\r\n      setStyles(_content, {\r\n        [strHeight]: _heightIntrinsic && '100%',\r\n      });\r\n    }\r\n  };\r\n","import {\r\n  createCache,\r\n  topRightBottomLeft,\r\n  equalTRBL,\r\n  assignDeep,\r\n  bind,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  setStyles,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  { _host, _padding, _viewport, _viewportIsTarget },\r\n  state\r\n) => {\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    bind(topRightBottomLeft, _host, 'padding', '')\r\n  );\r\n\r\n  return ({ _checkOption, _observersUpdateHints, _observersState, _force }) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(_force);\r\n    const { _nativeScrollbarsHiding, _flexboxGlue } = getEnvironment();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = _observersUpdateHints || {};\r\n    const { _directionIsRTL } = _observersState;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = _checkOption('paddingAbsolute');\r\n    const contentMutation = _force || (!_flexboxGlue && _contentMutation);\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(_force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_viewportIsTarget && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarsHiding);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        [strMarginRight]: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        [strMarginBottom]: paddingRelative ? -paddingVertical : 0,\r\n        [strMarginLeft]: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        [strWidth]: paddingRelative && `calc(100% + ${paddingHorizontal}px)`,\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        [strPaddingTop]: paddingRelative ? padding.t : 0,\r\n        [strPaddingRight]: paddingRelative ? padding.r : 0,\r\n        [strPaddingBottom]: paddingRelative ? padding.b : 0,\r\n        [strPaddingLeft]: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      setStyles(_padding || _viewport, paddingStyle);\r\n      setStyles(_viewport, viewportStyle);\r\n\r\n      assignDeep(state, {\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  attr,\r\n  scrollSize,\r\n  fractionalSize,\r\n  equalWH,\r\n  clientSize,\r\n  equalXY,\r\n  assignDeep,\r\n  bind,\r\n  wnd,\r\n  mathMax,\r\n  windowSize,\r\n  strHeight,\r\n  strHidden,\r\n  strOverflowX,\r\n  strOverflowY,\r\n  setStyles,\r\n  getStyles,\r\n  addRemoveAttrClass,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  dataValueHostOverflowVisible,\r\n  dataValueViewportScrollbarHidden,\r\n  dataValueViewportOverflowVisible,\r\n  dataAttributeViewport,\r\n  dataAttributePadding,\r\n  dataValuePaddingOverflowVisible,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { WH, XY } from '~/support';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins/scrollbarsHidingPlugin';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\nimport type { ViewportOverflowState } from '../structureSetup.utils';\r\nimport {\r\n  getShowNativeOverlaidScrollbars,\r\n  getViewportOverflowState,\r\n  overflowIsVisible,\r\n  setViewportOverflowState,\r\n} from '../structureSetup.utils';\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  structureSetupState\r\n) => {\r\n  const env = getEnvironment();\r\n  const {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportIsTarget,\r\n    _viewportAddRemoveClass,\r\n    _isBody,\r\n    _windowElm,\r\n  } = structureSetupElements;\r\n  const { _flexboxGlue, _nativeScrollbarsHiding, _nativeScrollbarsOverlaid } = env;\r\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n  const max0 = bind(mathMax, 0);\r\n\r\n  const whCacheOptions = {\r\n    _equal: equalWH,\r\n    _initialValue: { w: 0, h: 0 },\r\n  };\r\n  const xyCacheOptions = {\r\n    _equal: equalXY,\r\n    _initialValue: { x: strHidden, y: strHidden } as XY<OverflowStyle>,\r\n  };\r\n  const getOverflowAmount = (viewportScrollSize: WH<number>, viewportClientSize: WH<number>) => {\r\n    const tollerance = wnd.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n    const amount = {\r\n      w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n      h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n    };\r\n\r\n    return {\r\n      w: amount.w > tollerance ? amount.w : 0,\r\n      h: amount.h > tollerance ? amount.h : 0,\r\n    };\r\n  };\r\n\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    bind(fractionalSize, _viewport)\r\n  );\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, bind(scrollSize, _viewport));\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n  const [updateOverflowStyleCache] = createCache<XY<OverflowStyle>>(xyCacheOptions);\r\n\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  return (\r\n    { _checkOption, _observersUpdateHints, _observersState, _force },\r\n    { _paddingStyleChanged }\r\n  ) => {\r\n    const {\r\n      _sizeChanged,\r\n      _hostMutation,\r\n      _contentMutation,\r\n      _heightIntrinsicChanged,\r\n      _directionChanged,\r\n      _scrollbarSizeChanged,\r\n    } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const scrollbarsHidingPluginViewportArrangement =\r\n      scrollbarsHidingPlugin &&\r\n      scrollbarsHidingPlugin._viewportArrangement(\r\n        structureSetupElements,\r\n        structureSetupState,\r\n        _observersState,\r\n        env,\r\n        _checkOption\r\n      );\r\n\r\n    const {\r\n      _arrangeViewport,\r\n      _undoViewportArrange,\r\n      _hideNativeScrollbars,\r\n      _getViewportOverflowHideOffset,\r\n    } = scrollbarsHidingPluginViewportArrangement || {};\r\n\r\n    /**\r\n     * Applies a fixed height to the viewport so it can't overflow or underflow the host element.\r\n     * @param viewportOverflowState The current overflow state.\r\n     * @param heightIntrinsic Whether the host height is intrinsic or not.\r\n     */\r\n    const fixFlexboxGlue = (\r\n      viewportOverflowState: ViewportOverflowState,\r\n      heightIntrinsic: boolean\r\n    ) => {\r\n      setStyles(_viewport, {\r\n        [strHeight]: '',\r\n      });\r\n\r\n      if (heightIntrinsic) {\r\n        const { _paddingAbsolute, _padding: padding } = structureSetupState;\r\n        const { _overflowScroll } = viewportOverflowState;\r\n        const fSize = fractionalSize(_host);\r\n        const hostClientSize = clientSize(_host);\r\n\r\n        // padding subtraction is only needed if padding is absolute or if viewport is content-box\r\n        const isContentBox = getStyles(_viewport, 'boxSizing') === 'content-box';\r\n        const paddingVertical = _paddingAbsolute || isContentBox ? padding.b + padding.t : 0;\r\n        const subtractXScrollbar = !(_nativeScrollbarsOverlaid.x && isContentBox);\r\n\r\n        setStyles(_viewport, {\r\n          [strHeight]:\r\n            hostClientSize.h +\r\n            fSize.h +\r\n            (_overflowScroll.x && subtractXScrollbar && _getViewportOverflowHideOffset\r\n              ? _getViewportOverflowHideOffset(viewportOverflowState)._scrollbarsHideOffset.x\r\n              : 0) -\r\n            paddingVertical,\r\n        });\r\n      }\r\n    };\r\n\r\n    const [showNativeOverlaidScrollbars, showNativeOverlaidScrollbarsChanged] =\r\n      getShowNativeOverlaidScrollbars(_checkOption, env);\r\n    const [overflow, overflowChanged] = _checkOption('overflow');\r\n\r\n    const adjustFlexboxGlue =\r\n      !_viewportIsTarget &&\r\n      !_flexboxGlue &&\r\n      (_sizeChanged ||\r\n        _contentMutation ||\r\n        _hostMutation ||\r\n        showNativeOverlaidScrollbarsChanged ||\r\n        _heightIntrinsicChanged);\r\n    const adjustViewportArrange =\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      showNativeOverlaidScrollbarsChanged;\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n    const overflowVisible = overflowXVisible || overflowYVisible;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(_force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(_force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(_force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(_force);\r\n\r\n    let preMeasureViewportOverflowState: ViewportOverflowState | undefined;\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(dataValueViewportScrollbarHidden, !showNativeOverlaidScrollbars);\r\n    }\r\n\r\n    if (adjustFlexboxGlue) {\r\n      preMeasureViewportOverflowState = getViewportOverflowState(structureSetupElements);\r\n      fixFlexboxGlue(preMeasureViewportOverflowState, _heightIntrinsic);\r\n    }\r\n\r\n    if (adjustViewportArrange) {\r\n      if (overflowVisible) {\r\n        _viewportAddRemoveClass(dataValueViewportOverflowVisible, false);\r\n      }\r\n\r\n      const [redoViewportArrange, undoViewportArrangeOverflowState] = _undoViewportArrange\r\n        ? _undoViewportArrange(preMeasureViewportOverflowState)\r\n        : [];\r\n\r\n      const [sizeFraction, sizeFractionChanged] = (sizeFractionCache = updateSizeFraction(_force));\r\n      const [viewportScrollSize, viewportScrollSizeChanged] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(_force));\r\n      const viewportClientSize = clientSize(_viewport);\r\n      const arrangedViewportScrollSize = viewportScrollSize;\r\n      const arrangedViewportClientSize = viewportClientSize;\r\n\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      // if re measure is required (only required if content arrange strategy is used)\r\n      if (\r\n        (viewportScrollSizeChanged || sizeFractionChanged || showNativeOverlaidScrollbarsChanged) &&\r\n        undoViewportArrangeOverflowState &&\r\n        !showNativeOverlaidScrollbars &&\r\n        _arrangeViewport &&\r\n        _arrangeViewport(undoViewportArrangeOverflowState, viewportScrollSize, sizeFraction)\r\n      ) {\r\n        // arrangedViewportClientSize = clientSize(_viewport);\r\n        // arrangedViewportScrollSize = scrollSize(_viewport);\r\n      }\r\n\r\n      const windowInnerSize = windowSize(_windowElm);\r\n      const overflowAmountScrollSize = {\r\n        w: max0(mathMax(viewportScrollSize.w, arrangedViewportScrollSize.w) + sizeFraction.w),\r\n        h: max0(mathMax(viewportScrollSize.h, arrangedViewportScrollSize.h) + sizeFraction.h),\r\n      };\r\n\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.w\r\n            : arrangedViewportClientSize.w + max0(viewportClientSize.w - viewportScrollSize.w)) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.h\r\n            : arrangedViewportClientSize.h + max0(viewportClientSize.h - viewportScrollSize.h)) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        _force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const hasOverflow = {\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    };\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n    const adjustViewportStyle =\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      adjustFlexboxGlue ||\r\n      adjustViewportArrange;\r\n\r\n    if (adjustViewportStyle) {\r\n      const viewportStyle: StyleObject = {};\r\n      const viewportOverflowState = setViewportOverflowState(\r\n        structureSetupElements,\r\n        hasOverflow,\r\n        overflow,\r\n        viewportStyle\r\n      );\r\n\r\n      _hideNativeScrollbars &&\r\n        _hideNativeScrollbars(\r\n          viewportOverflowState,\r\n          _observersState,\r\n          !!_arrangeViewport &&\r\n            _arrangeViewport(viewportOverflowState, viewportScrollSize, sizeFraction),\r\n          viewportStyle\r\n        );\r\n\r\n      if (adjustFlexboxGlue) {\r\n        fixFlexboxGlue(viewportOverflowState, _heightIntrinsic);\r\n      }\r\n\r\n      if (_viewportIsTarget) {\r\n        attr(_host, dataAttributeHostOverflowX, viewportStyle[strOverflowX] as string);\r\n        attr(_host, dataAttributeHostOverflowY, viewportStyle[strOverflowY] as string);\r\n      } else {\r\n        setStyles(_viewport, viewportStyle);\r\n      }\r\n    }\r\n\r\n    addRemoveAttrClass(_host, dataAttributeHost, dataValueHostOverflowVisible, removeClipping);\r\n    addRemoveAttrClass(\r\n      _padding,\r\n      dataAttributePadding,\r\n      dataValuePaddingOverflowVisible,\r\n      removeClipping\r\n    );\r\n    if (!_viewportIsTarget) {\r\n      addRemoveAttrClass(\r\n        _viewport,\r\n        dataAttributeViewport,\r\n        dataValueViewportOverflowVisible,\r\n        overflowVisible\r\n      );\r\n    }\r\n\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      getViewportOverflowState(structureSetupElements)._overflowStyle\r\n    );\r\n\r\n    assignDeep(structureSetupState, {\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n    };\r\n  };\r\n};\r\n","import { getEnvironment } from '~/environment';\r\nimport {\r\n  addAttrClass,\r\n  assignDeep,\r\n  each,\r\n  getElmentScroll,\r\n  noop,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  type TRBL,\r\n  type XY,\r\n} from '~/support';\r\nimport { dataAttributeHost, dataValueHostUpdating } from '~/classnames';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport { createStructureSetupElements } from './structureSetup.elements';\r\nimport {\r\n  createOverflowUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createTrinsicUpdateSegment,\r\n} from './updateSegments';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n}\r\n\r\nexport interface StructureSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersState: ObserversSetupState;\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n}\r\n\r\nexport type StructureSetupUpdateHints = {\r\n  _overflowEdgeChanged?: boolean;\r\n  _overflowAmountChanged?: boolean;\r\n  _overflowStyleChanged?: boolean;\r\n  _paddingStyleChanged?: boolean;\r\n};\r\n\r\nexport type StructureSetup = [\r\n  ...Setup<StructureSetupUpdateInfo, StructureSetupState, StructureSetupUpdateHints>,\r\n  /** The elements created by the structure setup. */\r\n  StructureSetupElementsObj,\r\n  /** Function to be called when the initialization was canceled. */\r\n  () => void\r\n];\r\n\r\nexport type StructureUpdateSegment = (\r\n  updateInfo: StructureSetupUpdateInfo,\r\n  updateHints: Readonly<StructureSetupUpdateHints>\r\n) => StructureSetupUpdateHints | void;\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: StructureSetupState\r\n) => StructureUpdateSegment;\r\n\r\nexport const createStructureSetup = (target: InitializationTarget): StructureSetup => {\r\n  const [elements, appendStructureElements, canceled] = createStructureSetupElements(target);\r\n  const state: StructureSetupState = {\r\n    _padding: {\r\n      t: 0,\r\n      r: 0,\r\n      b: 0,\r\n      l: 0,\r\n    },\r\n    _paddingAbsolute: false,\r\n    _viewportPaddingStyle: {\r\n      [strMarginRight]: 0,\r\n      [strMarginBottom]: 0,\r\n      [strMarginLeft]: 0,\r\n      [strPaddingTop]: 0,\r\n      [strPaddingRight]: 0,\r\n      [strPaddingBottom]: 0,\r\n      [strPaddingLeft]: 0,\r\n    },\r\n    _overflowEdge: { x: 0, y: 0 },\r\n    _overflowAmount: { x: 0, y: 0 },\r\n    _overflowStyle: {\r\n      x: strHidden,\r\n      y: strHidden,\r\n    },\r\n    _hasOverflow: {\r\n      x: false,\r\n      y: false,\r\n    },\r\n  };\r\n  const { _target, _viewport, _viewportIsTarget } = elements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _flexboxGlue } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const updateSegments: StructureUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(elements, state),\r\n    createPaddingUpdateSegment(elements, state),\r\n    createOverflowUpdateSegment(elements, state),\r\n  ];\r\n\r\n  return [\r\n    appendStructureElements,\r\n    (updateInfo) => {\r\n      const updateHints: StructureSetupUpdateHints = {};\r\n      const adjustScrollOffset = doViewportArrange || !_flexboxGlue;\r\n      const scrollOffset = adjustScrollOffset && getElmentScroll(_viewport);\r\n\r\n      const removeAttrClass = _viewportIsTarget\r\n        ? addAttrClass(_viewport, dataAttributeHost, dataValueHostUpdating)\r\n        : noop;\r\n\r\n      each(updateSegments, (updateSegment) => {\r\n        assignDeep(updateHints, updateSegment(updateInfo, updateHints) || {});\r\n      });\r\n\r\n      removeAttrClass();\r\n\r\n      scrollElementTo(_viewport, scrollOffset);\r\n      !_viewportIsTarget && scrollElementTo(_target, 0);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n    elements,\r\n    canceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  bind,\r\n  getElmentScroll,\r\n  isEmptyObject,\r\n  keys,\r\n  runEachAndClear,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { createOptionCheck } from '~/options';\r\nimport type { OptionsCheckFn, Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { DeepReadonly } from '~/typings';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { ObserversSetupState, ObserversSetupUpdateHints } from './observersSetup';\r\nimport type { StructureSetupState, StructureSetupUpdateHints } from './structureSetup';\r\nimport type { StructureSetupElementsObj } from './structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { createObserversSetup } from './observersSetup';\r\nimport { createScrollbarsSetup } from './scrollbarsSetup';\r\nimport { createStructureSetup } from './structureSetup';\r\n\r\nexport type SetupUpdateHints = Partial<Record<string, boolean>>;\r\n\r\nexport type SetupUpdateInfo = {\r\n  _checkOption: OptionsCheckFn<Options>;\r\n  _changedOptions: PartialOptions;\r\n  _force: boolean;\r\n};\r\n\r\nexport type Setup<\r\n  U extends SetupUpdateInfo,\r\n  S extends Readonly<Record<string, any>>,\r\n  H extends SetupUpdateHints | void\r\n> = [\r\n  /** The create function which returns the `destroy` function. */\r\n  _create: () => () => void,\r\n  /** Function which updates the setup and returns the update result. */\r\n  _update: (updateInfo: U) => H,\r\n  /** Function which returns the current state. */\r\n  _state: S\r\n];\r\n\r\nexport interface SetupsUpdateInfo {\r\n  /** The options that changed or `undefined` if none changed. */\r\n  _changedOptions?: PartialOptions;\r\n  /** Whether chache should be ignored. */\r\n  _force?: boolean;\r\n  /** Whether observers should take their records and thus update as well. */\r\n  _takeRecords?: boolean;\r\n  /** Whether one or more scrollbars has been cloned. */\r\n  _cloneScrollbar?: boolean;\r\n}\r\n\r\nexport interface SetupsUpdateHints {\r\n  readonly _observersUpdateHints: DeepReadonly<ObserversSetupUpdateHints>;\r\n  readonly _structureUpdateHints: DeepReadonly<StructureSetupUpdateHints>;\r\n}\r\n\r\nexport interface SetupsState {\r\n  readonly _observersSetupState: DeepReadonly<ObserversSetupState>;\r\n  readonly _structureSetupState: DeepReadonly<StructureSetupState>;\r\n}\r\n\r\nexport interface SetupsElements {\r\n  readonly _structureSetupElements: DeepReadonly<StructureSetupElementsObj>;\r\n  readonly _scrollbarsSetupElements: DeepReadonly<ScrollbarsSetupElementsObj>;\r\n}\r\n\r\nexport type Setups = [\r\n  construct: () => () => void,\r\n  update: (updateInfo: SetupsUpdateInfo) => boolean,\r\n  getState: () => SetupsState,\r\n  elements: SetupsElements,\r\n  canceled: () => void\r\n];\r\n\r\nexport const createSetups = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  onUpdated: (updateInfo: SetupsUpdateInfo, updateHints: SetupsUpdateHints) => void,\r\n  onScroll: (scrollEvent: Event) => void\r\n): Setups => {\r\n  const getCurrentOption = createOptionCheck(options, {});\r\n  const [\r\n    structureSetupCreate,\r\n    structureSetupUpdate,\r\n    structureSetupState,\r\n    structureSetupElements,\r\n    structureSetupCanceled,\r\n  ] = createStructureSetup(target);\r\n  const [observersSetupCreate, observersSetupUpdate, observersSetupState] = createObserversSetup(\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    getCurrentOption,\r\n    (observersUpdateHints) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      update({}, observersUpdateHints);\r\n    }\r\n  );\r\n  const [scrollbarsSetupCreate, scrollbarsSetupUpdate, , scrollbarsSetupElements] =\r\n    createScrollbarsSetup(\r\n      target,\r\n      options,\r\n      observersSetupState,\r\n      structureSetupState,\r\n      structureSetupElements,\r\n      onScroll\r\n    );\r\n\r\n  const updateHintsAreTruthy = (hints: SetupUpdateHints) =>\r\n    keys(hints).some((key) => !!hints[key as keyof typeof hints]);\r\n\r\n  const update = (\r\n    updateInfo: SetupsUpdateInfo,\r\n    observerUpdateHints?: ObserversSetupUpdateHints\r\n  ): boolean => {\r\n    const {\r\n      _changedOptions: rawChangedOptions,\r\n      _force: rawForce,\r\n      _takeRecords,\r\n      _cloneScrollbar,\r\n    } = updateInfo;\r\n    const _changedOptions = rawChangedOptions || {};\r\n    const _force = !!rawForce;\r\n    const baseUpdateInfoObj: SetupUpdateInfo = {\r\n      _checkOption: createOptionCheck(options, _changedOptions, _force),\r\n      _changedOptions,\r\n      _force,\r\n    };\r\n\r\n    if (_cloneScrollbar) {\r\n      scrollbarsSetupUpdate(baseUpdateInfoObj);\r\n      return false;\r\n    }\r\n\r\n    const observersHints =\r\n      observerUpdateHints ||\r\n      observersSetupUpdate(\r\n        assignDeep({}, baseUpdateInfoObj, {\r\n          _takeRecords,\r\n        })\r\n      );\r\n\r\n    const structureHints = structureSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersState: observersSetupState,\r\n        _observersUpdateHints: observersHints,\r\n      })\r\n    );\r\n    scrollbarsSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      })\r\n    );\r\n\r\n    const truthyObserversHints = updateHintsAreTruthy(observersHints);\r\n    const truthyStructureHints = updateHintsAreTruthy(structureHints);\r\n    const changed =\r\n      truthyObserversHints || truthyStructureHints || !isEmptyObject(_changedOptions) || _force;\r\n\r\n    changed &&\r\n      onUpdated(updateInfo, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      });\r\n\r\n    return changed;\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      const { _originalScrollOffsetElement, _viewport } = structureSetupElements;\r\n      const initialScroll = getElmentScroll(_originalScrollOffsetElement);\r\n      const destroyFns = [observersSetupCreate(), structureSetupCreate(), scrollbarsSetupCreate()];\r\n\r\n      scrollElementTo(_viewport, initialScroll);\r\n\r\n      return bind(runEachAndClear, destroyFns);\r\n    },\r\n    update,\r\n    () => ({\r\n      _observersSetupState: observersSetupState,\r\n      _structureSetupState: structureSetupState,\r\n    }),\r\n    {\r\n      _structureSetupElements: structureSetupElements,\r\n      _scrollbarsSetupElements: scrollbarsSetupElements,\r\n    },\r\n    structureSetupCanceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  isFunction,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n  keys,\r\n  isArray,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  removeUndefinedProperties,\r\n} from '~/support';\r\nimport { getOptionsDiff } from '~/options';\r\nimport { getEnvironment } from '~/environment';\r\nimport { cancelInitialization } from '~/initialization';\r\nimport { addInstance, getInstance, removeInstance } from '~/instances';\r\nimport { createSetups } from '~/setups';\r\nimport {\r\n  addPlugins,\r\n  getStaticPluginModuleInstance,\r\n  optionsValidationPluginModuleName,\r\n  pluginModules,\r\n  registerPluginModuleInstances,\r\n} from '~/plugins';\r\nimport type { Environment } from '~/environment';\r\nimport type { XY, TRBL } from '~/support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type {\r\n  InferInstancePluginModuleInstance,\r\n  InferStaticPluginModuleInstance,\r\n  InstancePlugin,\r\n  OptionsValidationPlugin,\r\n  Plugin,\r\n  PluginModuleInstance,\r\n  StaticPlugin,\r\n} from '~/plugins';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Adds a single plugin.\r\n   * @param plugin The plugin to be added.\r\n   * @returns The plugins static modules instance or `void` if no instance was found.\r\n   */\r\n  plugin<P extends Plugin>(\r\n    plugin: P\r\n  ): P extends StaticPlugin ? InferStaticPluginModuleInstance<P> : void;\r\n  /**\r\n   * Adds multiple plugins.\r\n   * @param plugins The plugins to be added.\r\n   * @returns The plugins static modules instances or `void` if no instance was found.\r\n   */\r\n  plugin<P extends [Plugin, ...Plugin[]]>(\r\n    plugins: P\r\n  ): P extends [Plugin, ...Plugin[]]\r\n    ? {\r\n        [K in keyof P]: P[K] extends StaticPlugin ? InferStaticPluginModuleInstance<P[K]> : void;\r\n      }\r\n    : void;\r\n\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Gets the environment.\r\n   */\r\n  env(): Environment;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Gets the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options which should be applied.\r\n   * @param pure Whether the options should be reset before the new options are added.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure Whether all already added event listeners should be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes a single event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance and removes all added elements. */\r\n  destroy(): void;\r\n  /** Returns the instance of the passed plugin or `undefined` if no instance was found. */\r\n  plugin<P extends InstancePlugin>(osPlugin: P): InferInstancePluginModuleInstance<P> | undefined;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions } = getEnvironment();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const destroyFns: (() => void)[] = [];\r\n    const instancePluginModuleInstances: Record<string, PluginModuleInstance> = {};\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const newOptionsWithoutUndefined = removeUndefinedProperties(newOptions, true);\r\n      const pluginValidate = getStaticPluginModuleInstance<typeof OptionsValidationPlugin>(\r\n        optionsValidationPluginModuleName\r\n      );\r\n      return pluginValidate\r\n        ? pluginValidate(newOptionsWithoutUndefined, true)\r\n        : newOptionsWithoutUndefined;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addPluginEvent, removePluginEvents, triggerPluginEvent] =\r\n      createEventListenerHub<EventListenerArgs>();\r\n    const [addInstanceEvent, removeInstanceEvents, triggerInstanceEvent] =\r\n      createEventListenerHub(eventListeners);\r\n    const triggerEvent: typeof triggerPluginEvent = (name, args) => {\r\n      triggerInstanceEvent(name, args);\r\n      triggerPluginEvent(name, args);\r\n    };\r\n    const [setupsConstruct, setupsUpdate, setupsState, setupsElements, setupsCanceled] =\r\n      createSetups(\r\n        target,\r\n        currentOptions,\r\n        ({ _changedOptions, _force }, { _observersUpdateHints, _structureUpdateHints }) => {\r\n          const {\r\n            _sizeChanged,\r\n            _directionChanged,\r\n            _heightIntrinsicChanged,\r\n            _contentMutation,\r\n            _hostMutation,\r\n            _appear,\r\n          } = _observersUpdateHints;\r\n\r\n          const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n            _structureUpdateHints;\r\n\r\n          triggerEvent('updated', [\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            instance,\r\n            {\r\n              updateHints: {\r\n                sizeChanged: !!_sizeChanged,\r\n                directionChanged: !!_directionChanged,\r\n                heightIntrinsicChanged: !!_heightIntrinsicChanged,\r\n                overflowEdgeChanged: !!_overflowEdgeChanged,\r\n                overflowAmountChanged: !!_overflowAmountChanged,\r\n                overflowStyleChanged: !!_overflowStyleChanged,\r\n                contentMutation: !!_contentMutation,\r\n                hostMutation: !!_hostMutation,\r\n                appear: !!_appear,\r\n              },\r\n              changedOptions: _changedOptions || {},\r\n              force: !!_force,\r\n            },\r\n          ]);\r\n        },\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n      );\r\n\r\n    const destroy = (canceled: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      runEachAndClear(destroyFns);\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, canceled]);\r\n      removePluginEvents();\r\n      removeInstanceEvents();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            setupsUpdate({ _changedOptions: changedOptions });\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addInstanceEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeInstanceEvents(name, listener);\r\n      },\r\n      state() {\r\n        const { _observersSetupState, _structureSetupState } = setupsState();\r\n        const { _directionIsRTL } = _observersSetupState;\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n        } = _structureSetupState;\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = setupsElements._structureSetupElements;\r\n        const { _horizontal, _vertical } = setupsElements._scrollbarsSetupElements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              setupsUpdate({ _cloneScrollbar: true });\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (_force?: boolean) => setupsUpdate({ _force, _takeRecords: true }),\r\n      destroy: bind(destroy, false),\r\n      plugin: <P extends InstancePlugin>(plugin: P) =>\r\n        instancePluginModuleInstances[keys(plugin)[0]] as\r\n          | InferInstancePluginModuleInstance<P>\r\n          | undefined,\r\n    };\r\n\r\n    push(destroyFns, [setupsCanceled]);\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    registerPluginModuleInstances(pluginModules, OverlayScrollbars, [\r\n      instance,\r\n      addPluginEvent,\r\n      instancePluginModuleInstances,\r\n    ]);\r\n\r\n    if (\r\n      cancelInitialization(\r\n        setupsElements._structureSetupElements._isBody,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    push(destroyFns, setupsConstruct());\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    instance.update(true);\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  const isArr = isArray(plugins);\r\n  const pluginsToAdd: Plugin<string, void | PluginModuleInstance, void | PluginModuleInstance>[] =\r\n    isArr ? plugins : [plugins];\r\n  const result = pluginsToAdd.map(\r\n    (plugin) => registerPluginModuleInstances(plugin, OverlayScrollbars)[0]\r\n  );\r\n  addPlugins(pluginsToAdd);\r\n  return isArr ? result : (result[0] as any);\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _rtlScrollBehavior,\r\n    _flexboxGlue,\r\n    _cssCustomProperties,\r\n    _scrollTimeline,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      rtlScrollBehavior: _rtlScrollBehavior,\r\n      flexboxGlue: _flexboxGlue,\r\n      cssCustomProperties: _cssCustomProperties,\r\n      scrollTimeline: _scrollTimeline,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n"],"names":["createCache","options","update","o","_initialValue","u","_equal","_","_alwaysUpdateValues","_value","_previous","cacheUpdateContextual","newValue","force","curr","newVal","changed","cacheUpdateIsolated","getCurrentCache","isBrowser","window","ElementNodeType","Node","ELEMENT_NODE","toString","hasOwnProperty","Object","prototype","typeRgx","isUndefined","obj","undefined","isNull","type","call","replace","toLowerCase","isNumber","isString","isBoolean","isFunction","isArray","Array","isObject","isArrayLike","length","lengthCorrectFormat","isPlainObject","key","cstr","ctor","ctorProto","hasOwnConstructor","hasIsPrototypeOf","isHTMLElement","instanceofObj","HTMLElement","nodeType","isElement","Element","each","source","callback","i","keys","inArray","arr","item","indexOf","concat","a","b","push","array","items","arrayIsSingleItem","apply","from","original","result","Set","forEach","value","elm","createOrKeepArray","isEmptyArray","deduplicateArray","runEachAndClear","args","keep","runFn","fn","prop","assignDeep","target","object1","object2","object3","object4","object5","object6","sources","copy","copyIsArray","src","clone","slice","removeUndefinedProperties","deep","isEmptyObject","name","wnd","mathMax","Math","max","mathMin","min","mathRound","round","mathAbs","abs","cAF","cancelAnimationFrame","rAF","requestAnimationFrame","setT","setTimeout","clearT","clearTimeout","animationCurrentTime","performance","now","animateNumber","to","duration","onFrame","easing","animationFrameId","timeStart","finalDuration","frame","complete","timeNow","timeElapsed","stopAnimation","percent","progress","animationCompleted","strPaddingTop","strPaddingRight","strPaddingLeft","strPaddingBottom","strMarginLeft","strMarginRight","strMarginBottom","strOverflowX","strOverflowY","strWidth","strHeight","strHidden","strVisible","equal","props","propMutation","compareA","compareB","equalWH","equalXY","equalTRBL","equalBCRWH","noop","bind","selfClearTimeout","timeout","id","setTFn","clearTFn","debounce","functionToDebounce","maxTimeoutId","prevArguments","latestArguments","clear","v","_timeout","p","_maxDelay","S","_mergeParams","invokeFunctionToDebounce","this","mergeParms","flush","debouncedFn","arguments","finalTimeout","hasTimeout","finalMaxWait","hasMaxWait","setTimeoutFn","clearTimeoutFn","mergeParamsResult","invokedArgs","boundInvoke","timeoutId","_flush","attr","attrName","getAttribute","setAttribute","removeAttr","removeAttribute","domTokenListAttr","elmAttr","getDomTokenListSet","tokens","split","filter","token","domTokenListOperation","initialSet","operationTokens","operation","initialSetCopy","join","_remove","removeTokens","_add","addTokens","_has","hasTokens","tokenSet","reduce","boolean","has","size","removeAttrClass","addAttrClass","addRemoveAttrClass","add","hasAttrClass","getElmPrototype","find","selector","rootElm","document","querySelectorAll","findFirst","querySelector","is","matches","msMatchesSelector","contents","childNodes","parent","parentElement","closest","closestFn","liesBetween","highBoundarySelector","deepBoundarySelector","closestHighBoundaryElm","closestDeepBoundaryElm","deepBoundaryIsValid","removeElements","nodes","e","parentElm","removeChild","before","preferredAnchor","insertedElms","anchor","fragment","createDocumentFragment","insertedElm","previousSibling","appendChild","firstChild","nextSibling","insertBefore","appendChildren","node","children","insertedNodes","insertAfter","createDiv","classNames","div","createElement","createDOM","html","createdDiv","innerHTML","trim","firstLetterToUpper","str","charAt","toUpperCase","getDummyStyle","style","cssPrefixes","jsPrefixes","jsCache","cssCache","cssProperty","uppercasedName","elmStyle","prefix","prefixWithoutDashes","resultPossibilities","resultPossibility","jsAPI","MutationObserverConstructor","IntersectionObserverConstructor","ResizeObserverConstructor","scrollT","createDomTokenListClass","removeClass","className","addClass","customCssPropRegex","getCSSVal","computedStyle","getPropertyValue","validFiniteNumber","number","notNaN","isFinite","parseToZeroOrNumber","parseFloat","ratioToCssPercent","ratio","toFixed","numberToCssPx","setStyles","styles","rawValue","test","setProperty","_unused","getStyles","pseudoElm","getSingleStyle","getStylesResult","getComputedStyle","getDirectionIsRTL","topRightBottomLeft","propertyPrefix","propertySuffix","finalPrefix","finalSuffix","top","right","bottom","left","t","r","l","getTrasformTranslateValue","isHorizontal","x","y","zeroObj","w","h","getElmWidthHeightProperty","property","windowSize","customWnd","offsetSize","clientSize","scrollSize","fractionalSize","cssWidth","cssHeight","getBoundingClientRect","domRectHasDimensions","rect","domRectAppeared","currContentRect","prevContentRect","rectHasDimensions","rectHadDimensions","passiveEventsSupport","passiveStr","supportPassiveEvents","addEventListener","defineProperty","get","splitEventNames","eventNames","removeEventListener","listener","capture","eventName","_ref","doSupportPassiveEvents","passive","_passive","_capture","once","_once","nativeOptions","map","finalListener","evt","stopPropagation","preventDefault","absoluteCoordinates","pageYOffset","pageXOffset","getRTLCompatibleScrollPosition","normalizedScrollPosition","normalizedScrollPositionMax","rtlScrollBehavior","n","getRTLCompatibleScrollBounds","scrollElementTo","position","scrollLeft","scrollTop","getElmentScroll","manageListener","createEventListenerHub","initialEventListeners","events","Map","removeEvent","eventSet","currListener","addEvent","nameOrEventListeners","listenerOrPure","set","eventListenerKeys","offFns","eventListener","triggerEvent","event","opsStringify","JSON","stringify","val","getPropByPath","path","defaultOptions","paddingAbsolute","showNativeOverlaidScrollbars","elementEvents","attributes","ignoreMutation","overflow","scrollbars","theme","visibility","autoHide","autoHideDelay","autoHideSuspend","dragScroll","clickScroll","pointers","getOptionsDiff","currOptions","newOptions","diff","optionsKeys","optionKey","currOptionValue","newOptionValue","isDiff","createOptionCheck","changedOptions","dataAttributePrefix","classNameEnvironment","classNameEnvironmentScrollbarHidden","classNameEnvironmentFlexboxGlue","classNameEnvironmentFlexboxGlueMax","dataAttributeInitialize","dataAttributeHost","dataAttributeHostOverflowX","dataAttributeHostOverflowY","dataValueHostOverflowVisible","dataValueHostScrollbarPressed","dataValueHostUpdating","dataValueHostHtmlBody","dataAttributeViewport","dataValueViewportArrange","dataValueViewportScrollbarHidden","dataValueViewportOverflowVisible","dataAttributePadding","dataValuePaddingOverflowVisible","dataAttributeContent","classNameSizeObserver","classNameSizeObserverAppear","classNameSizeObserverListener","classNameSizeObserverListenerScroll","classNameSizeObserverListenerItem","classNameSizeObserverListenerItemFinal","classNameTrinsicObserver","classNameScrollbarNoCssCustomProps","classNameScrollbarThemeNone","classNameScrollbar","classNameScrollbarRtl","classNameScrollbarHorizontal","classNameScrollbarVertical","classNameScrollbarTrack","classNameScrollbarHandle","classNameScrollbarVisible","classNameScrollbarCornerless","classNameScrollbarTransitionless","classNameScrollbarInteraction","classNameScrollbarUnusable","classNameScrollbarAutoHide","classNameScrollbarAutoHideHidden","classNameScrollbarWheel","classNameScrollbarTrackInteractive","classNameScrollbarHandleInteractive","pluginModules","staticPluginModuleInstances","addPlugins","addedPlugin","plugin","registerPluginModuleInstances","staticObj","instanceInfo","static","osStatic","instance","osInstance","instanceObj","instancePluginMap","getStaticPluginModuleInstance","pluginModuleName","optionsValidationPluginModuleName","sizeObserverPluginName","SizeObserverPlugin","listenerElement","onSizeChangedCallback","observeAppearChange","scrollAmount","scrollEventName","observerElementChildren","observerElementChildrenRoot","shrinkElement","lastChild","expandElement","expandElementChild","cacheSize","currSize","isDirty","rAFId","reset","onResized","appear","onScroll","scrollEvent","destroyFns","getShowNativeOverlaidScrollbars","checkOption","env","T","_nativeScrollbarsOverlaid","showNativeOverlaidScrollbarsOption","showNativeOverlaidScrollbarsChanged","overflowIsVisible","overflowBehavior","getViewportOverflowState","structureSetupElements","viewportStyleObj","D","_viewport","getStatePerAxis","styleKey","overflowStyle","objectPrefferedOverflowStyle","overflowScroll","xOverflowStyle","xOverflowScroll","yOverflowStyle","yOverflowScroll","_overflowStyle","_overflowScroll","setViewportOverflowState","hasOverflow","overflowOption","hasAnyOverflow","setAxisOverflowStyle","behavior","hasOverflowAxis","overflowVisible","fallbackVisibilityBehavior","overflowVisibleBehavior","overflowX","visibleBehaviorX","overflowY","visibleBehaviorY","contentArrangeCounter","scrollbarsHidingPluginName","ScrollbarsHidingPlugin","_createUniqueViewportArrangeElement","V","_nativeScrollbarsHiding","P","_cssCustomProperties","create","_viewportArrangement","structureSetupState","observersSetupState","checkOptions","U","_viewportIsTarget","B","_viewportArrange","N","_flexboxGlue","j","_nativeScrollbarsSize","doViewportArrange","_getViewportOverflowHideOffset","viewportOverflowState","M","arrangeHideOffset","getHideOffsetPerAxis","isOverlaid","nativeScrollbarSize","nonScrollbarStylingHideOffset","scrollbarsHideOffset","scrollbarsHideOffsetArrange","xScrollbarsHideOffset","xScrollbarsHideOffsetArrange","yScrollbarsHideOffset","yScrollbarsHideOffsetArrange","_scrollbarsHideOffset","_scrollbarsHideOffsetArrange","_hideNativeScrollbars","_directionIsRTL","viewportArrange","G","q","arrangeX","arrangeY","hideOffsetX","hideOffsetY","W","_viewportPaddingStyle","horizontalMarginKey","viewportHorizontalPaddingKey","horizontalMarginValue","verticalMarginValue","horizontalPaddingValue","verticalPaddingValue","_arrangeViewport","viewportScrollSize","sizeFraction","F","viewportArrangeHorizontalPaddingKey","viewportArrangeHorizontalPaddingValue","viewportArrangeVerticalPaddingValue","paddingTop","fractionalContentWidth","fractionalContenHeight","arrangeSize","sheet","cssRules","insertRule","ruleStyle","_undoViewportArrange","finalViewportOverflowState","viewportPaddingStyle","finalPaddingStyle","assignProps","prevStyle","_envWindowZoom","dpr","getWindowDPR","screen","dDPI","deviceXDPI","sDPI","logicalXDPI","devicePixelRatio","diffBiggerThanOne","valOne","valTwo","absValOne","absValTwo","envInstance","updateNativeScrollbarSizeCache","sizeNew","deltaSize","deltaAbsSize","deltaAbsRatio","dprNew","deltaIsBigger","difference","dprChanged","isZoom","scrollbarSizeChanged","scrollbarSize","clickScrollPluginModuleName","ClickScrollPlugin","moveHandleRelative","getHandleOffset","startOffset","handleLength","relativeTrackPointerOffset","iteration","animateClickScroll","clickScrollProgress","sign","animationProgress","handleStartBound","handleEndBound","mouseBetweenHandleBounds","firstIterationPauseTimeout","environmentInstance","getNativeScrollbarSize","body","measureElm","measureElmChild","cSize","oSize","fSize","getNativeScrollbarsHiding","testElm","revertClass","getRtlScrollBehavior","childElm","direction","parentOffset","childOffset","childOffsetAfterScroll","getFlexboxGlue","revertFbxGlue","minOffsetsizeParent","minOffsetsize","supportsMin","revertFbxGlueMax","maxOffsetsizeParent","maxOffsetsize","supportsMax","createEnvironment","envDOM","envElm","envChildElm","getNativeScrollbarSizeCache","nativeScrollbarsSize","nativeScrollbarsHiding","nativeScrollbarsOverlaid","staticDefaultInitialization","elements","host","padding","viewport","ownerDocument","content","slot","cancel","staticDefaultOptions","getDefaultOptions","getDefaultInitialization","_scrollTimeline","_rtlScrollBehavior","_addResizeListener","_getDefaultInitialization","_setDefaultInitialization","newInitializationStrategy","_getDefaultOptions","_setDefaultOptions","newDefaultOptions","_staticDefaultInitialization","_staticDefaultOptions","scrollbarsHidingPlugin","zoomFn","getEnvironment","resolveInitialization","staticInitializationElement","fallbackStaticInitializationElement","defaultStaticInitializationElement","staticInitializationElementValue","staticInitialization","resolvedInitialization","dynamicInitializationElement","fallbackDynamicInitializationElement","defaultDynamicInitializationElement","dynamicInitializationElementValue","dynamicInitialization","cancelInitialization","isBody","cancelInitializationValue","st","defaultNativeScrollbarsOverlaid","defaultbody","resolvedNativeScrollbarsOverlaid","resolvedDocumentScrollingElement","finalNativeScrollbarsOverlaid","finalDocumentScrollingElement","targetInstanceMap","WeakMap","addInstance","removeInstance","delete","getInstance","createEventContentChange","eventContentChange","destroyed","destroy","updateElements","getElements","eventElmList","entries","isTargetChild","contains","removeListener","createDOMObserver","isContentObserver","isConnected","ut","_attributes","ft","_styleChangingAttributes","_t","_eventContentChange","dt","_nestedTargetSelector","vt","_ignoreTargetChange","ht","_ignoreContentChange","debouncedEventContentChange","destroyEventContentChange","updateEventContentChangeElements","finalAttributes","finalStyleChangingAttributes","observedAttributes","observerCallback","fromRecords","mutations","ignoreTargetChange","ignoreContentChange","totalChangedNodes","targetChangedAttrs","targetStyleChanged","contentChanged","mutation","attributeName","mutationTarget","oldValue","addedNodes","removedNodes","isAttributesType","isChildListType","targetIsMutationTarget","isAttrChange","attributeValue","attributeChanged","styleChangingAttrChanged","contentAttrChanged","isNestedTarget","baseAssertion","contentFinalChanged","mutationObserver","observe","attributeOldValue","attributeFilter","subtree","childList","characterData","disconnect","takeRecords","createSizeObserver","_direction","observeDirectionChange","_appear","sizeObserverPlugin","getIsDirectionRTL","updateResizeObserverContentRectCache","baseElements","sizeObserver","onSizeChangedCallbackProxy","sizeChangedContext","isResizeObserverCall","ResizeObserverEntry","hasDirectionCache","skip","doDirectionScroll","currRContentRect","contentRect","hasDimensions","appeared","firstCall","rtl","_directionIsRTLCache","_sizeChanged","resizeObserverInstance","pop","pluginAppearCallback","pluginDestroyFns","updateDirectionIsRTLCache","directionIsRTLCacheValues","directionIsRTLCache","directionIsRTLCacheChanged","directionIsRTLCachePrevious","createTrinsicObserver","onTrinsicChangedCallback","intersectionObserverInstance","isHeightIntrinsic","ioEntryOrSize","isIntersecting","intersectionRatio","trinsicObserver","updateHeightIntrinsicCache","triggerOnTrinsicChangedCallback","updateValue","heightIntrinsic","heightIntrinsicChanged","intersectionObserverCallback","root","onSizeChanged","newSize","createObserversSetup","getCurrentOption","onObserversUpdated","debounceTimeout","debounceMaxDelay","updateContentMutationObserver","destroyContentMutationObserver","hostSelector","viewportSelector","viewportAttrsFromTarget","baseStyleChangingAttrsTextarea","baseStyleChangingAttrs","state","_heightIntrinsic","_host","Ot","xt","_content","$t","_isTextarea","Ct","_viewportHasClass","Ht","_viewportAddRemoveClass","updateContentSizeCache","hasOver","isArranged","scrollOffset","redoViewportArrange","contentScroll","viewportScroll","fractional","contentMutationObserverAttr","onObserversUpdatedDebounced","prev","prevObj","currObj","updateViewportAttrsFromHost","attribute","hostAttr","onTrinsicChanged","heightIntrinsicCache","updateHints","_heightIntrinsicChanged","exclusiveSizeChange","updateFn","directionIsRTL","directionIsRTLChanged","_directionChanged","onContentMutation","contentChangedThroughEvent","_contentMutation","onHostMutation","_hostMutation","ot","constructTrinsicObserver","updateTrinsicObserver","constructSizeObserver","constructHostMutationObserver","updateHostMutationObserver","viewportIsTargetResizeObserver","destroySizeObserver","destroyTrinsicObserver","destroyHostMutationObserver","removeResizeListener","_scrollbarSizeChanged","_checkOption","_takeRecords","_force","attributesChanged","elementEventsChanged","debounceValue","debounceChanged","contentMutationObserverChanged","ignoreMutationFromOptions","construct","ignore","maxWait","hostUpdateResult","trinsicUpdateResult","contentUpdateResult","capNumber","getScrollbarHandleOffsetPercent","scrollPos","overflowAmount","rawScrollPosMax","scrollPositionMin","scrollPositionMax","scrollPercentNegate","scrollPercentInvert","scrollPercentNone","rawScrollPercent","getScrollbarHandleLengthRatio","scrollbarStructure","axis","Rt","_track","Vt","_handle","handleSize","trackSize","Pt","_overflowAmount","Lt","_overflowEdge","viewportSize","getScrollbarHandleOffsetRatio","scrollPercent","lengthRatio","createScrollbarsSetupElements","scrollbarsSetupEvents","defaultInitScrollbars","defaultInitScrollbarsSlot","Ut","_target","Bt","_targetIsElm","Nt","_scrollOffsetElement","jt","_isBody","scrollbarsInit","initScrollbarsSlot","elementAnimations","initScrollTimeline","scrollTimelineX","scrollTimelineY","evaluatedScrollbarSlot","generalDynamicInitializationElement","doRefreshScrollbarOffset","scrollbar","getScrollbarOffsetKeyframes","directionRTL","cushion","directionRTLMultiplicator","transform","addDirectionRTLKeyframes","keyframes","cancelElementAnimations","currAnimations","element","doCancel","animation","setElementAnimation","timeline","composite","activeAnimations","activeAnimation","effect","KeyframeEffect","animate","scrollbarStructureAddRemoveClass","scrollbarStructures","action","_scrollbar","scrollbarStyle","scrollbarStructureRefreshHandleLength","structure","scrollbarStructureRefreshHandleOffset","Gt","getRatio","start","end","nt","isRTL","offsetRatio","styleScrollbarPosition","horizontalScrollbars","verticalScrollbars","scrollbarsAddRemoveClass","onlyHorizontal","singleAxis","runHorizontal","runVertical","refreshScrollbarsHandleLength","refreshScrollbarsHandleOffset","refreshScrollbarsScrollbarOffset","setScrollbarElementAnimation","generateScrollbarDOM","scrollbarClassName","arrToPush","transitionlessClass","track","handle","generateHorizontalScrollbarStructure","generateVerticalScrollbarStructure","appendElements","_refreshScrollbarsHandleLength","_refreshScrollbarsHandleOffset","_refreshScrollbarsScrollbarOffset","_scrollbarsAddRemoveClass","_horizontal","_scrollbarStructures","_clone","_style","_vertical","createScrollbarsSetupEvents","tn","_documentElm","refreshScrollbarStructuresHandleOffset","wheelTimeout","clearWheelTimeout","requestHandleTransitionAnimationFrame","cancelHandleTransitionTimeout","refreshHandleOffsetTransition","scrollByFn","scrollBy","clientXYKey","widthHeightKey","leftTopKey","whKey","xyKey","isAffectingTransition","propertyName","createInteractiveScrollEvents","releasePointerCaptureEvents","createRelativeHandleMove","mouseDownScroll","invertedScale","deltaMovement","handleTrackDiff","scrollDeltaPercent","scrollDelta","pointerDownEvent","isDragScroll","pointerCaptureElement","scrollbarOptions","button","isPrimary","pointerType","continuePointerDown","includes","instantClickScroll","shiftKey","getHandleRect","getTrackRect","handleRect","trackRect","axisScale","pointerDownOffset","handleCenter","releasePointerCapture","pointerUpEvent","pointerId","pointerMoveEvent","relativeMovement","setPointerCapture","wheelScrollBy","wheelEvent","deltaX","deltaY","deltaMode","animateHandleOffset","createScrollbarsSetup","autoHideIsMove","autoHideIsLeave","autoHideNotNever","mouseInHost","prevTheme","instanceAutoHideSuspendScrollDestroyFn","instanceAutoHideDelay","requestMouseMoveAnimationFrame","cancelMouseMoveAnimationFrame","requestScrollAnimationFrame","cancelScrollAnimationFrame","scrollTimeout","clearScrollTimeout","auotHideMoveTimeout","clearAutoHideTimeout","autoHideSuspendTimeout","clearAutoHideSuspendTimeout","auotHideTimeout","clearAutoTimeout","nn","_scrollEventElement","Xt","qt","Ft","Wt","manageAutoHideSuspension","manageScrollbarsAutoHide","removeAutoHide","delayless","hide","isHoverablePointerType","onHostMouseEnter","_observersUpdateHints","_structureUpdateHints","cn","_overflowEdgeChanged","rn","_overflowAmountChanged","ln","_overflowStyleChanged","It","bt","k","an","_hasOverflow","themeChanged","visibilityChanged","autoHideChanged","autoHideSuspendChanged","dragScrollChanged","clickScrollChanged","trulyAppeared","updateScrollbars","updateVisibility","setScrollbarVisibility","isVisible","xVisible","yVisible","hasCorner","createStructureSetupElements","createUniqueViewportArrangeElement","defaultInitElements","defaultHostInitialization","defaultPaddingInitialization","defaultViewportInitialization","defaultContentInitialization","targetIsElm","targetStructureInitialization","initElements","hostInitialization","paddingInitialization","viewportInitialization","contentInitialization","targetElement","isTextarea","docElement","documentElement","docWnd","defaultView","generalStaticInitializationElement","generalResolveInitialization","createNewDiv","generateViewportElement","generateContentElement","possibleViewportElement","viewportIsTarget","viewportIsTargetBody","possibleContentElement","viewportIsContent","defaultContentElementPresent","viewportIstContentViewport","viewportIsContentContent","nonBodyViewportElement","viewportElement","nonBodyHostElement","hostElement","contentElement","activeElm","activeElement","setViewportFocus","evaluatedTargetObj","_padding","_originalScrollOffsetElement","_windowElm","_viewportIsContent","viewportAttributeClassName","generatedElements","elementIsGenerated","un","isTextareaHostGenerated","targetContents","contentSlot","unwrap","tabIndexStr","ogTabindex","focus","revertViewportTabIndex","off","createTrinsicUpdateSegment","_observersState","zt","yt","createPaddingUpdateSegment","updatePaddingCache","currentPaddingCache","paddingChanged","St","At","paddingAbsoluteChanged","contentMutation","paddingStyleChanged","paddingRelative","paddingHorizontal","paddingVertical","paddingStyle","viewportStyle","_paddingAbsolute","_paddingStyleChanged","createOverflowUpdateSegment","_n","max0","whCacheOptions","xyCacheOptions","getOverflowAmount","viewportClientSize","tollerance","amount","updateSizeFraction","getCurrentSizeFraction","updateViewportScrollSizeCache","getCurrentViewportScrollSizeCache","updateOverflowAmountCache","getCurrentOverflowAmountCache","updateOverflowEdge","getCurrentOverflowEdgeCache","updateOverflowStyleCache","Et","Tt","scrollbarsHidingPluginViewportArrangement","Y","K","J","X","fixFlexboxGlue","hn","hostClientSize","isContentBox","subtractXScrollbar","overflowChanged","adjustFlexboxGlue","adjustViewportArrange","overflowXVisible","overflowYVisible","sizeFractionCache","viewportScrollSizeCache","overflowAmuntCache","overflowEdgeCache","preMeasureViewportOverflowState","undoViewportArrangeOverflowState","sizeFractionChanged","viewportScrollSizeChanged","arrangedViewportScrollSize","arrangedViewportClientSize","windowInnerSize","overflowAmountScrollSize","overflowAmountClientSize","overflowEdge","overflowEdgeChanged","overflowAmountChanged","removeClipping","adjustViewportStyle","overflowStyleChanged","createStructureSetup","appendStructureElements","canceled","updateSegments","updateInfo","adjustScrollOffset","updateSegment","createSetups","onUpdated","structureSetupCreate","structureSetupUpdate","structureSetupCanceled","observersSetupCreate","observersSetupUpdate","observersUpdateHints","scrollbarsSetupCreate","scrollbarsSetupUpdate","scrollbarsSetupElements","updateHintsAreTruthy","hints","some","observerUpdateHints","_changedOptions","rawChangedOptions","rawForce","kt","bn","_cloneScrollbar","baseUpdateInfoObj","observersHints","structureHints","truthyObserversHints","truthyStructureHints","initialScroll","_observersSetupState","_structureSetupState","_structureSetupElements","_scrollbarsSetupElements","OverlayScrollbars","eventListeners","ct","targetIsElement","instanceTarget","potentialInstance","instancePluginModuleInstances","validateOptions","newOptionsWithoutUndefined","pluginValidate","currentOptions","addPluginEvent","removePluginEvents","triggerPluginEvent","addInstanceEvent","removeInstanceEvents","triggerInstanceEvent","setupsConstruct","setupsUpdate","setupsState","setupsElements","setupsCanceled","sizeChanged","directionChanged","hostMutation","pure","base","on","wn","Sn","Yt","Qt","translateScrollbarStructure","translateScrollbarsSetupElement","scrollbarsSetupElement","Kt","Jt","translatedStructure","scrollOffsetElement","scrollEventElement","scrollbarHorizontal","scrollbarVertical","plugins","isArr","pluginsToAdd","valid","hasElmsFn","tt","lt","it","et","rt","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","flexboxGlue","cssCustomProperties","scrollTimeline","setDefaultInitialization","setDefaultOptions"],"mappings":"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"}