{"version":3,"file":"overlayscrollbars.browser.es5.js","sources":["../../src/support/cache.ts","../../src/support/compatibility/isBrowser.ts","../../src/support/utils/alias.ts","../../src/support/compatibility/apis.ts","../../src/support/utils/types.ts","../../src/support/utils/animation.ts","../../src/support/utils/array.ts","../../src/support/utils/strings.ts","../../src/support/utils/equal.ts","../../src/support/utils/noop.ts","../../src/support/utils/function.ts","../../src/support/utils/object.ts","../../src/support/utils/math.ts","../../src/support/dom/attribute.ts","../../src/support/dom/class.ts","../../src/support/dom/traversal.ts","../../src/support/dom/manipulation.ts","../../src/support/dom/create.ts","../../src/support/dom/style.ts","../../src/support/dom/dimensions.ts","../../src/support/dom/events.ts","../../src/support/dom/offset.ts","../../src/support/dom/scroll.ts","../../src/support/eventListeners.ts","../../src/options.ts","../../src/classnames.ts","../../src/plugins/plugins.ts","../../../../node_modules/@babel/runtime/helpers/extends.js","../../src/plugins/optionsValidationPlugin/validation.ts","../../src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","../../src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../../src/setups/structureSetup/structureSetup.utils.ts","../../src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../../src/plugins/clickScrollPlugin/clickScrollPlugin.ts","../../src/environment.ts","../../src/initialization.ts","../../src/instances.ts","../../src/observers/domObserver.ts","../../src/observers/sizeObserver.ts","../../src/observers/trinsicObserver.ts","../../src/setups/observersSetup/observersSetup.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.events.ts","../../src/setups/scrollbarsSetup/scrollbarsSetup.ts","../../src/setups/structureSetup/structureSetup.elements.ts","../../src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../../src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../../src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../../src/setups/structureSetup/structureSetup.ts","../../src/setups/setups.ts","../../src/overlayscrollbars.ts"],"sourcesContent":["export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n","export const isBrowser = typeof window !== 'undefined';\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\n\r\nexport const wnd = (isBrowser ? window : {}) as typeof window;\r\nexport const mathMax = Math.max;\r\nexport const mathMin = Math.min;\r\nexport const mathRound = Math.round;\r\nexport const mathFloor = Math.floor;\r\nexport const mathCeil = Math.ceil;\r\nexport const mathAbs = Math.abs;\r\nexport const cAF = wnd.cancelAnimationFrame;\r\nexport const rAF = wnd.requestAnimationFrame;\r\nexport const setT = wnd.setTimeout;\r\nexport const clearT = wnd.clearTimeout;\r\n","import { wnd } from '../utils/alias';\r\n\r\nconst getApi = <T>(name: string) =>\r\n  (typeof wnd[name as keyof typeof wnd] !== 'undefined'\r\n    ? wnd[name as keyof typeof wnd]\r\n    : undefined) as T;\r\n\r\nexport const MutationObserverConstructor = getApi<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  getApi<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = getApi<typeof ResizeObserver>('ResizeObserver');\r\nexport const scrollT = getApi<new (constructor: unknown) => AnimationTimeline>('ScrollTimeline');\r\n","import type { PlainObject } from '~/typings';\r\nimport { isBrowser } from '../compatibility/isBrowser';\r\n\r\nconst ElementNodeType = isBrowser && Node.ELEMENT_NODE;\r\nconst { toString, hasOwnProperty } = Object.prototype;\r\nconst typeRgx = /^\\[object (.+)\\]$/;\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : toString.call(obj).replace(typeRgx, '$1').toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): obj is object =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> => {\r\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\r\n\r\n  let key;\r\n  const cstr = 'constructor';\r\n  const ctor = obj[cstr];\r\n  const ctorProto = ctor && ctor.prototype;\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\r\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\r\n\r\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => {\r\n  const instanceofObj = HTMLElement;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => {\r\n  const instanceofObj = Element;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n","import { mathMax, rAF, cAF } from './alias';\r\nimport { isFunction } from './types';\r\n\r\n/**\r\n * percent: current percent (0 - 1),\r\n * time: current time (duration * percent),\r\n * min: start value\r\n * max: end value\r\n * duration: duration in ms\r\n */\r\nexport type EasingFn = (\r\n  percent: number,\r\n  time: number,\r\n  min: number,\r\n  max: number,\r\n  duration: number\r\n) => number;\r\n\r\nconst animationCurrentTime = () => performance.now();\r\n\r\nexport const animateNumber = (\r\n  from: number,\r\n  to: number,\r\n  duration: number,\r\n  onFrame: (progress: number, percent: number, completed: boolean) => any,\r\n  easing?: EasingFn | false\r\n): ((complete?: boolean) => void) => {\r\n  let animationFrameId = 0;\r\n  const timeStart = animationCurrentTime();\r\n  const finalDuration = mathMax(0, duration);\r\n  const frame = (complete?: boolean) => {\r\n    const timeNow = animationCurrentTime();\r\n    const timeElapsed = timeNow - timeStart;\r\n    const stopAnimation = timeElapsed >= finalDuration;\r\n    const percent = complete\r\n      ? 1\r\n      : 1 - (mathMax(0, timeStart + finalDuration - timeNow) / finalDuration || 0);\r\n    const progress =\r\n      (to - from) *\r\n        (isFunction(easing)\r\n          ? easing(percent, percent * finalDuration, 0, 1, finalDuration)\r\n          : percent) +\r\n      from;\r\n    const animationCompleted = stopAnimation || percent === 1;\r\n\r\n    onFrame && onFrame(progress, percent, animationCompleted);\r\n\r\n    animationFrameId = animationCompleted ? 0 : rAF!(() => frame());\r\n  };\r\n  frame();\r\n  return (complete) => {\r\n    cAF!(animationFrameId);\r\n    complete && frame(complete);\r\n  };\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isArrayLike, isString } from './types';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | null | undefined;\r\n\r\nexport function each<T extends Array<unknown> | ReadonlyArray<unknown>>(\r\n  array: T,\r\n  callback: (\r\n    value: T extends Array<infer V> | ReadonlyArray<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends ArrayLike<unknown>>(\r\n  arrayLikeObject: T,\r\n  callback: (\r\n    value: T extends ArrayLike<infer V> ? V : never,\r\n    index: number,\r\n    source: T\r\n  ) => boolean | unknown\r\n): T;\r\nexport function each<T extends PlainObject>(\r\n  obj: T,\r\n  callback: (value: any, key: string, source: T) => boolean | unknown\r\n): T;\r\nexport function each(\r\n  source: Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | PlainObject,\r\n  callback: (value: any, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<unknown> | ArrayLike<unknown> | ReadonlyArray<unknown> | Set<unknown> | PlainObject {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    // cant use support func keys here due to circular dep\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns true when the passed item is in the passed array and false otherwise.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @returns Whether the item is in the array.\r\n */\r\nexport const inArray = <T = any>(arr: T[], item: T): boolean => arr.indexOf(item) >= 0;\r\n\r\n/**\r\n * Concats two arrays and returns an new array without modifying any of the passed arrays.\r\n * @param a Array A.\r\n * @param b Array B.\r\n * @returns A new array which has the entries of both arrays.\r\n */\r\nexport const concat = <T>(a: T[] | ReadonlyArray<T>, b: T[] | ReadonlyArray<T>): T[] => a.concat(b);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => Array.from(arr || []);\r\n\r\n/**\r\n * Creates an array if the passed value is not an array, or returns the value if it is.\r\n * @param value The value.\r\n * @returns An array which represents the passed value(s).\r\n */\r\nexport const createOrKeepArray = <T>(value: T | T[]): T[] => (isArray(value) ? value : [value]);\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean => !!array && !array.length;\r\n\r\n/**\r\n * Deduplicates all items of the array.\r\n * @param array The array to be deduplicated.\r\n * @returns The deduplicated array.\r\n */\r\nexport const deduplicateArray = <T extends any[]>(array: T): T => from(new Set(array)) as T;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n","export const strPaddingTop = 'paddingTop';\r\nexport const strPaddingRight = 'paddingRight';\r\nexport const strPaddingLeft = 'paddingLeft';\r\nexport const strPaddingBottom = 'paddingBottom';\r\nexport const strMarginLeft = 'marginLeft';\r\nexport const strMarginRight = 'marginRight';\r\nexport const strMarginBottom = 'marginBottom';\r\nexport const strOverflowX = 'overflowX';\r\nexport const strOverflowY = 'overflowY';\r\nexport const strWidth = 'width';\r\nexport const strHeight = 'height';\r\nexport const strHidden = 'hidden';\r\nexport const strVisible = 'visible';\r\n","import type { WH } from '../dom/dimensions';\r\nimport type { XY } from '../dom/offset';\r\nimport type { TRBL } from '../dom/style';\r\nimport type { PlainObject } from '~/typings';\r\nimport { each } from './array';\r\nimport { mathRound } from './alias';\r\nimport { strHeight, strWidth } from './strings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: WH<T>, b?: WH<T>) => equal<WH<T>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: XY<T>, b?: XY<T>) => equal<XY<T>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, [strWidth, strHeight], round && ((value) => mathRound(value)));\r\n","export const noop = () => {}; // eslint-disable-line\r\n","import { isNumber, isFunction } from './types';\r\nimport { from } from './array';\r\nimport { rAF, cAF, setT, clearT } from './alias';\r\nimport { noop } from './noop';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const bind = <A extends any[], B extends any[], R>(\r\n  fn: (...args: [...A, ...B]) => R,\r\n  ...args: A\r\n): ((...args: B) => R) => fn.bind(0, ...args);\r\n\r\n/**\r\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\r\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\r\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\r\n */\r\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(callback, isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let clear = noop;\r\n  const { _timeout, _maxDelay, _mergeParams } = options || {};\r\n\r\n  const invokeFunctionToDebounce = function (args: IArguments) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      // @ts-ignore\r\n      const timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n      clear = () => clearTimeoutFn(timeoutId);\r\n\r\n      if (hasMaxWait && !maxTimeoutId) {\r\n        maxTimeoutId = setT(flush, finalMaxWait as number);\r\n      }\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isFunction, isPlainObject, isNull } from './types';\r\nimport { each } from './array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(source, (_, key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && isPlainObject(copy)) {\r\n        const src = target[key as keyof T];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key as keyof T] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key as keyof T] = copyIsArray ? copy.slice() : copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\nexport const removeUndefinedProperties = <T extends PlainObject>(target: T, deep?: boolean): T =>\r\n  each(assignDeep({}, target), (value, key, copy) => {\r\n    if (value === undefined) {\r\n      delete copy[key];\r\n    } else if (deep && value && isPlainObject(value)) {\r\n      copy[key as keyof typeof copy] = removeUndefinedProperties(value, deep) as any;\r\n    }\r\n  });\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => {\r\n  // eslint-disable-next-line no-restricted-syntax, no-unreachable-loop, guard-for-in\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n};\r\n","import { mathMax, mathMin } from './alias';\r\n\r\n/**\r\n * Caps the passed number between the `min` and `max` bounds.\r\n * @param min The min bound.\r\n * @param max The max bound.\r\n * @param number The number to be capped.\r\n * @returns The capped number between min and max.\r\n */\r\nexport const capNumber = (min: number, max: number, number: number) =>\r\n  mathMax(min, mathMin(max, number));\r\n","import type { AttributeTarget } from './types';\r\nimport { bind, each, from, isArray } from '../utils';\r\n\r\nexport type DomTokens = string | string[] | false | null | undefined | void;\r\n\r\nexport const getDomTokensArray = (tokens: DomTokens) =>\r\n  from(new Set((isArray(tokens) ? tokens : (tokens || '').split(' ')).filter((token) => token)));\r\n\r\n/**\r\n * Gets a attribute with the given attribute of the given element.\r\n * @param elm The element of which the attribute shall be get.\r\n * @param attrName The attribute name which shall be get.\r\n * @returns The attribute value or `null` when the attribute is not set or `false` if the element is undefined.\r\n */\r\nexport const getAttr = (elm: AttributeTarget, attrName: string) =>\r\n  elm && elm.getAttribute(attrName);\r\n\r\n/**\r\n * Sets the given attributes to the given element.\r\n * @param elm The element of which the attributes shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const setAttrs = (\r\n  elm: AttributeTarget,\r\n  attrNames: string | string[],\r\n  value: string | false | null | undefined\r\n) => {\r\n  each(getDomTokensArray(attrNames), (attrName) => {\r\n    elm && elm.setAttribute(attrName, value || '');\r\n  });\r\n};\r\n\r\n/**\r\n * Removes the given attributes from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute names separated by a space.\r\n */\r\nexport const removeAttrs = (elm: AttributeTarget, attrNames: string | string[]): void => {\r\n  each(getDomTokensArray(attrNames), (attrName) => elm && elm.removeAttribute(attrName));\r\n};\r\n\r\nexport const domTokenListAttr = (elm: AttributeTarget, attrName: string) => {\r\n  const initialArr = getDomTokensArray(getAttr(elm, attrName));\r\n  const setElmAttr = bind(setAttrs, elm, attrName);\r\n  const domTokenListOperation = (operationTokens: DomTokens, operation: 'add' | 'delete') => {\r\n    const initialArrSet = new Set(initialArr);\r\n    each(getDomTokensArray(operationTokens), (token) => initialArrSet[operation](token));\r\n    return from(initialArrSet).join(' ');\r\n  };\r\n\r\n  return {\r\n    _remove: (removeTokens: DomTokens) => setElmAttr(domTokenListOperation(removeTokens, 'delete')),\r\n    _add: (addTokens: DomTokens) => setElmAttr(domTokenListOperation(addTokens, 'add')),\r\n    _has: (hasTokens: DomTokens) => {\r\n      const tokenSet = getDomTokensArray(hasTokens);\r\n      return tokenSet.reduce(\r\n        (boolean, token) => boolean && initialArr.includes(token),\r\n        tokenSet.length > 0\r\n      );\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be removed.\r\n * @param value The value which shall be removed.\r\n */\r\nexport const removeAttrClass = (elm: AttributeTarget, attrName: string, value: DomTokens) => {\r\n  domTokenListAttr(elm, attrName)._remove(value);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds value to it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added.\r\n * @param value The value which shall be added.\r\n */\r\nexport const addAttrClass = (elm: AttributeTarget, attrName: string, value: DomTokens) => {\r\n  domTokenListAttr(elm, attrName)._add(value);\r\n  return bind(removeAttrClass, elm, attrName, value);\r\n};\r\n\r\nexport const addRemoveAttrClass = (\r\n  elm: AttributeTarget,\r\n  attrName: string,\r\n  value: DomTokens,\r\n  add?: boolean\r\n) => {\r\n  (add ? addAttrClass : removeAttrClass)(elm, attrName, value);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (elm: AttributeTarget, attrName: string, value: DomTokens): boolean =>\r\n  domTokenListAttr(elm, attrName)._has(value);\r\n","import type { AttributeTarget } from './types';\r\nimport type { DomTokens } from './attribute';\r\nimport { each, from } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { domTokenListAttr } from './attribute';\r\n\r\nconst createDomTokenListClass = (elm: AttributeTarget) => domTokenListAttr(elm, 'class');\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: AttributeTarget, className: DomTokens): boolean =>\r\n  createDomTokenListClass(elm)._has(className);\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: AttributeTarget, className: DomTokens): void => {\r\n  createDomTokenListClass(elm)._remove(className);\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: AttributeTarget, className: DomTokens): (() => void) => {\r\n  createDomTokenListClass(elm)._add(className);\r\n  return bind(removeClass, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (classNameA: string, classNameB: string) => {\r\n  const set = new Set<string>(classNameA ? classNameA.split(' ') : []);\r\n\r\n  each(classNameB ? classNameB.split(' ') : [], (className) => {\r\n    set.has(className) ? set.delete(className) : set.add(className);\r\n  });\r\n\r\n  return from(set);\r\n};\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\nimport { isElement } from '../utils/types';\r\nimport { push, from } from '../utils/array';\r\n\r\ntype InputElementType = Node | Element | false | null | undefined;\r\ntype OutputElementType = Node | Element | false | null | undefined;\r\n\r\nconst getElmPrototype = (isBrowser && Element.prototype) as Element; // only Element.prototype wont work on server\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst find = (selector: string, elm?: InputElementType): Element[] => {\r\n  const arr: Array<Element> = [];\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? rootElm.querySelector(selector) : null;\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nconst is = (elm: InputElementType, selector: string): boolean => {\r\n  if (isElement(elm)) {\r\n    /* istanbul ignore next */\r\n    // eslint-disable-next-line\r\n    const fn: (...args: any) => boolean =\r\n      // @ts-ignore\r\n      getElmPrototype.matches || getElmPrototype.msMatchesSelector;\r\n    return fn.call(elm, selector);\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nconst parent = (elm: InputElementType): OutputElementType => elm && elm.parentElement;\r\n\r\n/**\r\n * Returns the closest element to the passed element which matches the given selector.\r\n * @param elm The element.\r\n * @param selector The selector.\r\n * @returns The closest element to the passed element which matches the given selector.\r\n */\r\nconst closest = (elm: InputElementType, selector: string): OutputElementType =>\r\n  isElement(elm) && elm.closest(selector);\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nconst liesBetween = (\r\n  elm: InputElementType,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n  const deepBoundaryIsValid =\r\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        (deepBoundaryIsValid &&\r\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\r\n            closestHighBoundaryElm)\r\n    : false;\r\n};\r\n\r\nexport { find, findFirst, is, children, contents, parent, liesBetween, closest };\r\n","import { isArrayLike } from '../utils/types';\r\nimport { each, from } from '../utils/array';\r\nimport { noop } from '../utils/noop';\r\nimport { parent } from './traversal';\r\n\r\ntype ManipulationTarget = Node | false | null | undefined;\r\ntype NodeCollection = ArrayLike<Node> | ManipulationTarget;\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    const parentElm = parent(nodes);\r\n    parentElm && parentElm.removeChild(nodes);\r\n  }\r\n};\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nconst before = (\r\n  parentElm: ManipulationTarget,\r\n  preferredAnchor: ManipulationTarget,\r\n  insertedElms: NodeCollection\r\n): (() => void) => {\r\n  if (insertedElms && parentElm) {\r\n    let anchor: ManipulationTarget = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | null | undefined;\r\n\r\n    if (isArrayLike(insertedElms)) {\r\n      fragment = document.createDocumentFragment();\r\n\r\n      // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n      each(insertedElms, (insertedElm) => {\r\n        if (insertedElm === anchor) {\r\n          anchor = insertedElm.previousSibling;\r\n        }\r\n        fragment!.appendChild(insertedElm);\r\n      });\r\n    } else {\r\n      fragment = insertedElms;\r\n    }\r\n\r\n    // if the preferred anchor isn't null set it to a valid anchor\r\n    if (preferredAnchor) {\r\n      if (!anchor) {\r\n        anchor = parentElm.firstChild;\r\n      } else if (anchor !== preferredAnchor) {\r\n        anchor = anchor.nextSibling;\r\n      }\r\n    }\r\n\r\n    parentElm.insertBefore(fragment, anchor || null);\r\n    return () => removeElements(insertedElms);\r\n  }\r\n  return noop;\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const appendChildren = (node: ManipulationTarget, children: NodeCollection) =>\r\n  before(node, null, children);\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const prependChildren = (node: ManipulationTarget, children: NodeCollection) =>\r\n  before(node, node && node.firstChild, children);\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertBefore = (node: ManipulationTarget, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node, insertedNodes);\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertAfter = (node: ManipulationTarget, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n","import { each } from '../utils/array';\r\nimport { setAttrs } from './attribute';\r\nimport { contents } from './traversal';\r\nimport { removeElements } from './manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  setAttrs(div, 'class', classNames);\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import type { PlainObject, StyleObject, StyleObjectKey, StyleObjectValue } from '~/typings';\r\nimport type { XY } from './offset';\r\nimport type { AttributeTarget } from './types';\r\nimport { wnd } from '../utils/alias';\r\nimport { each } from '../utils/array';\r\nimport { isString, isNumber, isObject } from '../utils/types';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst customCssPropRegex = /^--/;\r\n\r\nconst getCSSVal = (computedStyle: CSSStyleDeclaration, prop: StyleObjectKey): string =>\r\n  computedStyle.getPropertyValue(prop) || computedStyle[prop as any] || '';\r\n\r\nconst validFiniteNumber = (number: number) => {\r\n  const notNaN = number || 0;\r\n  return isFinite(notNaN) ? notNaN : 0;\r\n};\r\n\r\nconst parseToZeroOrNumber = (value?: string): number => validFiniteNumber(parseFloat(value || ''));\r\n\r\nexport const ratioToCssPercent = (ratio: number) =>\r\n  `${(validFiniteNumber(ratio) * 100).toFixed(3)}%`;\r\n\r\nexport const numberToCssPx = (number: number) => `${validFiniteNumber(number)}px`;\r\n\r\nexport function setStyles(elm: AttributeTarget, styles: StyleObject): void {\r\n  elm &&\r\n    each(styles, (rawValue: StyleObjectValue, name) => {\r\n      try {\r\n        const elmStyle = elm.style;\r\n        const value = isNumber(rawValue) ? numberToCssPx(rawValue) : (rawValue || '') + '';\r\n\r\n        if (customCssPropRegex.test(name)) {\r\n          elmStyle.setProperty(name, value);\r\n        } else {\r\n          elmStyle[name as any] = value;\r\n        }\r\n      } catch {}\r\n    });\r\n}\r\n\r\nexport function getStyles(\r\n  elm: AttributeTarget,\r\n  styles: Array<StyleObjectKey>,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>>;\r\nexport function getStyles(\r\n  elm: AttributeTarget,\r\n  styles: StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): string;\r\nexport function getStyles(\r\n  elm: AttributeTarget,\r\n  styles: Array<StyleObjectKey> | StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>> | string {\r\n  const getSingleStyle = isString(styles);\r\n  let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n\r\n  if (elm) {\r\n    const computedStyle = wnd.getComputedStyle(elm, pseudoElm) || elm.style;\r\n    getStylesResult = getSingleStyle\r\n      ? getCSSVal(computedStyle, styles)\r\n      : styles.reduce((result, key) => {\r\n          result[key] = getCSSVal(computedStyle, key);\r\n          return result;\r\n        }, getStylesResult as PlainObject);\r\n  }\r\n  return getStylesResult;\r\n}\r\n\r\nexport const getDirectionIsRTL = (elm: AttributeTarget): boolean =>\r\n  getStyles(elm, 'direction') === 'rtl';\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: AttributeTarget,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}` as StyleObjectKey;\r\n  const right = `${finalPrefix}right${finalSuffix}` as StyleObjectKey;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}` as StyleObjectKey;\r\n  const left = `${finalPrefix}left${finalSuffix}` as StyleObjectKey;\r\n  const result = getStyles(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n\r\nexport const getTrasformTranslateValue = (\r\n  value: string | number | XY<string | number>,\r\n  isHorizontal?: boolean\r\n) =>\r\n  `translate${\r\n    isObject(value) ? `(${value.x},${value.y})` : `${isHorizontal ? 'X' : 'Y'}(${value})`\r\n  }`;\r\n","import type { AttributeTarget } from './types';\r\nimport { getStyles } from './style';\r\nimport { mathRound, wnd } from '../utils/alias';\r\nimport { bind } from '../utils/function';\r\nimport { strHeight, strWidth } from '../utils/strings';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\nconst getElmWidthHeightProperty = <E extends HTMLElement | Window>(\r\n  property: E extends HTMLElement ? 'client' | 'offset' | 'scroll' : 'inner',\r\n  elm: E | false | null | undefined\r\n): Readonly<WH> =>\r\n  elm\r\n    ? {\r\n        w: (elm as any)[`${property}Width`],\r\n        h: (elm as any)[`${property}Height`],\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const windowSize = (customWnd?: Window): Readonly<WH> =>\r\n  getElmWidthHeightProperty('inner', customWnd || wnd);\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const offsetSize = bind(getElmWidthHeightProperty<HTMLElement>, 'offset') satisfies (\r\n  elm: AttributeTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const clientSize = bind(getElmWidthHeightProperty<HTMLElement>, 'client') satisfies (\r\n  elm: AttributeTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const scrollSize = bind(getElmWidthHeightProperty<HTMLElement>, 'scroll') satisfies (\r\n  elm: AttributeTarget\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const fractionalSize = (elm: AttributeTarget): Readonly<WH> => {\r\n  const cssWidth = parseFloat(getStyles(elm, strWidth)) || 0;\r\n  const cssHeight = parseFloat(getStyles(elm, strHeight)) || 0;\r\n  return {\r\n    w: cssWidth - mathRound(cssWidth),\r\n    h: cssHeight - mathRound(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: AttributeTarget): boolean => !!elm && elementHasDimensions(elm);\r\n\r\n/**\r\n * Determines whether the passed DOM Rect has any dimensions.\r\n */\r\nexport const domRectHasDimensions = (rect?: DOMRectReadOnly | false | null) =>\r\n  !!(rect && (rect[strHeight] || rect[strWidth]));\r\n\r\n/**\r\n * Determines whether current DOM Rect has appeared according the the previous dom rect..\r\n * @param currContentRect The current DOM Rect.\r\n * @param prevContentRect The previous DOM Rect.\r\n * @returns Whether the dom rect appeared.\r\n */\r\nexport const domRectAppeared = (\r\n  currContentRect: DOMRectReadOnly | false | null | undefined,\r\n  prevContentRect: DOMRectReadOnly | false | null | undefined\r\n) => {\r\n  const rectHasDimensions = domRectHasDimensions(currContentRect);\r\n  const rectHadDimensions = domRectHasDimensions(prevContentRect);\r\n  return !rectHadDimensions && rectHasDimensions;\r\n};\r\n","import type { DomTokens } from './attribute';\r\nimport { each, runEachAndClear } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { keys } from '../utils';\r\nimport { getDomTokensArray } from './attribute';\r\n\r\nexport interface EventListenerOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\nexport type EventListenerMap = {\r\n  [eventNames: string]: (event: Event) => any;\r\n};\r\n\r\n/**\r\n * Removes the passed event listener for the passed event names with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const removeEventListener = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: DomTokens,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(getDomTokensArray(eventNames), (eventName) => {\r\n    target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const addEventListener = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: DomTokens,\r\n  listener: (event: T) => any,\r\n  options?: EventListenerOptions\r\n): (() => void) => {\r\n  const passive = (options && options._passive) ?? true;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const nativeOptions: AddEventListenerOptions = {\r\n    passive,\r\n    capture,\r\n  };\r\n\r\n  return bind(\r\n    runEachAndClear,\r\n    getDomTokensArray(eventNames).map((eventName) => {\r\n      const finalListener = (\r\n        once\r\n          ? (evt: T) => {\r\n              removeEventListener(target, eventName, finalListener, capture);\r\n              listener(evt);\r\n            }\r\n          : listener\r\n      ) as EventListener;\r\n\r\n      target.addEventListener(eventName, finalListener, nativeOptions);\r\n      return bind(removeEventListener, target, eventName, finalListener, capture);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * Adds the passed event listeners for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventListenerMap A map which descirbes the event names and event listeners to be added.\r\n * @param options The options of the added listeners.\r\n */\r\nexport const addEventListeners = (\r\n  target: EventTarget,\r\n  eventListenerMap: EventListenerMap,\r\n  options?: EventListenerOptions\r\n): (() => void) =>\r\n  bind(\r\n    runEachAndClear,\r\n    keys(eventListenerMap).map((eventNames) =>\r\n      addEventListener(target, eventNames, eventListenerMap[eventNames], options)\r\n    )\r\n  );\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import type { AttributeTarget } from './types';\r\nimport { getBoundingClientRect } from './dimensions';\r\nimport { wnd } from '../utils/alias';\r\n\r\nexport interface XY<T = number> {\r\n  x: T;\r\n  y: T;\r\n}\r\n\r\nconst zeroObj: XY = {\r\n  x: 0,\r\n  y: 0,\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element relative to the document. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const absoluteCoordinates = (elm: AttributeTarget): Readonly<XY> => {\r\n  const rect = elm && getBoundingClientRect(elm);\r\n  return rect\r\n    ? {\r\n        x: rect.left + wnd.scrollX,\r\n        y: rect.top + wnd.scrollY,\r\n      }\r\n    : zeroObj;\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const offsetCoordinates = (elm: AttributeTarget): Readonly<XY> =>\r\n  elm\r\n    ? {\r\n        x: elm.offsetLeft,\r\n        y: elm.offsetTop,\r\n      }\r\n    : zeroObj;\r\n","import type { Env } from '~/environment';\r\nimport type { XY } from './offset';\r\nimport { capNumber, isNumber } from '../utils';\r\n\r\nexport type RTLScrollBehavior = Env['_rtlScrollBehavior'] | false | null | undefined;\r\n\r\n/**\r\n * Transforms a normalized scroll position to a RTL compatilbe scroll position value or vice versa (depending on the input format).\r\n * @param scrollPosition The scroll position value.\r\n * @param overflowAmount The (normalized) overflow amount value.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `falsy` if the rtl scroll behavior doesn't apply.\r\n * @returns The input scroll position, just converted.\r\n * If the input `scrollPosition` is normalized the raw (RTL Compatible) format is returned.\r\n * If the input `scrollPosition` is raw (RTL Compatible) the normalized format is returned.\r\n */\r\nexport const convertScrollPosition = (\r\n  scrollPosition: number,\r\n  overflowAmount: number,\r\n  rtlScrollBehavior?: RTLScrollBehavior\r\n) =>\r\n  rtlScrollBehavior\r\n    ? rtlScrollBehavior.n\r\n      ? -scrollPosition + 0 // +0 avoids negative zero (-0) as a result\r\n      : rtlScrollBehavior.i\r\n      ? overflowAmount - scrollPosition\r\n      : scrollPosition\r\n    : scrollPosition;\r\n\r\n/**\r\n * Gets the raw (RTL compatilbe) scroll boundaries from the normalized overflow amount.\r\n * @param overflowAmount The normalzed overflow amount value.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `falsy` if the rtl scroll behavior doesn't apply.\r\n * @returns The raw (RTL compatible) scroll boundaries. (min value will scroll to start (0%) and max will scroll to end (100%))\r\n */\r\nexport const getRawScrollBounds = (\r\n  overflowAmount: number,\r\n  rtlScrollBehavior?: RTLScrollBehavior\r\n): [min: number, max: number] => [\r\n  convertScrollPosition(0, overflowAmount, rtlScrollBehavior),\r\n  convertScrollPosition(overflowAmount, overflowAmount, rtlScrollBehavior),\r\n];\r\n\r\n/**\r\n * Gets the scroll ratio of the current raw (RTL compatilbe) scroll position.\r\n * @param rawScrollPosition The raw (RTL compatible) scroll position.\r\n * @param overflowAmount The normalized overflow amount.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `falsy` if the rtl scroll behavior doesn't apply.\r\n * @returns The scroll ratio of the current scroll position 0..1.\r\n */\r\nexport const getRawScrollRatio = (\r\n  rawScrollPosition: number,\r\n  overflowAmount: number,\r\n  rtlScrollBehavior?: RTLScrollBehavior\r\n) =>\r\n  capNumber(\r\n    0,\r\n    1,\r\n    convertScrollPosition(rawScrollPosition, overflowAmount, rtlScrollBehavior) / overflowAmount ||\r\n      0\r\n  );\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const scrollElementTo = (\r\n  elm: HTMLElement,\r\n  position: Partial<XY> | number | false | null | undefined\r\n): void => {\r\n  const { x, y } = isNumber(position) ? { x: position, y: position } : position || {};\r\n  isNumber(x) && (elm.scrollLeft = x);\r\n  isNumber(y) && (elm.scrollTop = y);\r\n};\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const getElmentScroll = (elm: HTMLElement): Readonly<XY> => ({\r\n  x: elm.scrollLeft,\r\n  y: elm.scrollTop,\r\n});\r\n","import { isBoolean, isFunction, isString } from './utils/types';\r\nimport { keys } from './utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear, createOrKeepArray } from './utils/array';\r\nimport { bind } from './utils/function';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(createOrKeepArray(listener), callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = (\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure?:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener((currListener) => {\r\n        isFunction(currListener) && eventSet.add(currListener);\r\n      }, listenerOrPure as Exclude<typeof listenerOrPure, boolean>);\r\n\r\n      return bind(\r\n        removeEvent,\r\n        nameOrEventListeners,\r\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\r\n      );\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      eventListener && push(offFns, addEvent(key, eventListener));\r\n    });\r\n\r\n    return bind(runEachAndClear, offFns);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    each(from(events.get(name)), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n","import {\r\n  assignDeep,\r\n  each,\r\n  isObject,\r\n  keys,\r\n  isArray,\r\n  hasOwnProperty,\r\n  isFunction,\r\n  isEmptyObject,\r\n  concat,\r\n} from '~/support';\r\nimport type { DeepPartial, DeepReadonly } from '~/typings';\r\n\r\nexport type OptionsField = string;\r\n\r\nexport type OptionsPrimitiveValue =\r\n  | boolean\r\n  | number\r\n  | string\r\n  | Array<any>\r\n  | ReadonlyArray<any>\r\n  | [any]\r\n  | [any, ...any[]]\r\n  | ((this: any, ...args: any[]) => any)\r\n  | null;\r\n\r\nexport type OptionsObject = {\r\n  [field: OptionsField]: OptionsPrimitiveValue | OptionsObject;\r\n};\r\n\r\ntype OptionsObjectFieldNameTuples<T> = T extends OptionsPrimitiveValue\r\n  ? []\r\n  : {\r\n      [K in Extract<keyof T, OptionsField>]: [K, ...OptionsObjectFieldNameTuples<T[K]>];\r\n    }[Extract<keyof T, OptionsField>];\r\n\r\ntype JoinOptionsObjectFieldTuples<\r\n  T extends OptionsField[],\r\n  IncompletePath extends boolean = false\r\n> = T extends [infer F]\r\n  ? F\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends OptionsField\r\n    ?\r\n        | (IncompletePath extends true ? F : never)\r\n        | `${F}.${JoinOptionsObjectFieldTuples<Extract<R, OptionsField[]>>}`\r\n    : never\r\n  : OptionsField;\r\n\r\ntype SplitJoinedOptionsObjectFieldTuples<S extends string> = string extends S\r\n  ? OptionsField[]\r\n  : S extends ''\r\n  ? []\r\n  : S extends `${infer T}.${infer U}`\r\n  ? [T, ...SplitJoinedOptionsObjectFieldTuples<U>]\r\n  : [S];\r\n\r\ntype OptionsObjectFieldTuplesType<O, T extends OptionsField[]> = T extends [infer F]\r\n  ? F extends keyof O\r\n    ? O[F]\r\n    : never\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends keyof O\r\n    ? O[F] extends OptionsPrimitiveValue\r\n      ? O[F]\r\n      : OptionsObjectFieldTuplesType<O[F], Extract<R, OptionsField[]>>\r\n    : never\r\n  : never;\r\n\r\ntype OptionsObjectFieldPath<O extends OptionsObject> = JoinOptionsObjectFieldTuples<\r\n  OptionsObjectFieldNameTuples<O>,\r\n  true\r\n>;\r\n\r\ntype OptionsObjectFieldPathType<\r\n  O extends OptionsObject,\r\n  P extends string\r\n> = OptionsObjectFieldTuplesType<O, SplitJoinedOptionsObjectFieldTuples<P>>;\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw 0;\r\n    }\r\n    return val;\r\n  });\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? `${path}`\r\n        .split('.')\r\n        .reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\n/**\r\n * The overflow behavior of an axis.\r\n */\r\nexport type OverflowBehavior =\r\n  /** No scrolling is possible and the content is clipped. */\r\n  | 'hidden'\r\n  /** No scrolling is possible and the content isn't clipped. */\r\n  | 'visible'\r\n  /** Scrolling is possible if there is an overflow. */\r\n  | 'scroll'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `hidden`.\r\n   */\r\n  | 'visible-hidden'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `scroll`.\r\n   */\r\n  | 'visible-scroll';\r\n\r\n/**\r\n * The scrollbars visibility behavior.\r\n */\r\nexport type ScrollbarsVisibilityBehavior =\r\n  /** The scrollbars are always visible. */\r\n  | 'visible'\r\n  /** The scrollbars are always hidden. */\r\n  | 'hidden'\r\n  /** The scrollbars are only visibile if there is overflow. */\r\n  | 'auto';\r\n\r\n/**\r\n * The scrollbars auto hide behavior\r\n */\r\nexport type ScrollbarsAutoHideBehavior =\r\n  /** The scrollbars are never hidden automatically. */\r\n  | 'never'\r\n  /** The scrollbars are hidden unless the user scrolls. */\r\n  | 'scroll'\r\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\r\n  | 'move'\r\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\r\n  | 'leave';\r\n\r\n/**\r\n * The options of a OverlayScrollbars instance.\r\n */\r\nexport type Options = {\r\n  /** Whether the padding shall be absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\r\n  showNativeOverlaidScrollbars: boolean;\r\n  /** Customizes the automatic update behavior. */\r\n  update: {\r\n    /**\r\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\r\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\r\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\r\n     */\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    /**\r\n     * The debounce which is used to detect content changes.\r\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\r\n     * If a single number customizes only the `timeout`.\r\n     *\r\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\r\n     */\r\n    debounce: [timeout: number, maxWait: number] | number | null;\r\n    /**\r\n     * HTML attributes which will trigger an update if they're changed.\r\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\r\n     */\r\n    attributes: string[] | null;\r\n    /**\r\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\r\n     * @param mutation The MutationRecord from the MutationObserver.\r\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\r\n     */\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  /** Customizes the overflow behavior per axis. */\r\n  overflow: {\r\n    /** The overflow behavior of the horizontal (x) axis. */\r\n    x: OverflowBehavior;\r\n    /** The overflow behavior of the vertical (y) axis. */\r\n    y: OverflowBehavior;\r\n  };\r\n  /** Customizes appearance of the scrollbars. */\r\n  scrollbars: {\r\n    /**\r\n     * The scrollbars theme.\r\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\r\n     */\r\n    theme: string | null;\r\n    /** The scrollbars visibility behavior. */\r\n    visibility: ScrollbarsVisibilityBehavior;\r\n    /** The scrollbars auto hide behavior. */\r\n    autoHide: ScrollbarsAutoHideBehavior;\r\n    /** The scrollbars auto hide delay in milliseconds. */\r\n    autoHideDelay: number;\r\n    /** Whether the scrollbars auto hide behavior is suspended until a scroll happened. */\r\n    autoHideSuspend: boolean;\r\n    /** Whether its possible to drag the handle of a scrollbar to scroll the viewport. */\r\n    dragScroll: boolean;\r\n    /** Whether its possible to click the track of a scrollbar to scroll the viewport. */\r\n    clickScroll: boolean;\r\n    /**\r\n     * An array of pointer types which shall be supported.\r\n     * Common pointer types are: `mouse`, `pen` and `touch`.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\r\n     */\r\n    pointers: string[] | null;\r\n  };\r\n};\r\n\r\nexport type ReadonlyOptions = DeepReadonly<Options>;\r\n\r\nexport type PartialOptions = DeepPartial<Options>;\r\n\r\nexport type OptionsCheckFn<O extends OptionsObject> = <P extends OptionsObjectFieldPath<O>>(\r\n  path: P\r\n) => [value: OptionsObjectFieldPathType<O, P>, changed: boolean];\r\n\r\nexport const defaultOptions: ReadonlyOptions = {\r\n  paddingAbsolute: false,\r\n  showNativeOverlaidScrollbars: false,\r\n  update: {\r\n    elementEvents: [['img', 'load']],\r\n    debounce: [0, 33],\r\n    attributes: null,\r\n    ignoreMutation: null,\r\n  },\r\n  overflow: {\r\n    x: 'scroll',\r\n    y: 'scroll',\r\n  },\r\n  scrollbars: {\r\n    theme: 'os-theme-dark',\r\n    visibility: 'auto',\r\n    autoHide: 'never',\r\n    autoHideDelay: 1300,\r\n    autoHideSuspend: false,\r\n    dragScroll: true,\r\n    clickScroll: false,\r\n    pointers: ['mouse', 'touch', 'pen'],\r\n  },\r\n} satisfies OptionsObject & Options;\r\n\r\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\r\n  const diff: DeepPartial<T> = {};\r\n  const optionsKeys = concat(keys(newOptions), keys(currOptions)) as Array<\r\n    keyof T & keyof DeepPartial<T>\r\n  >;\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {} as any), getOptionsDiff(currOptionValue, newOptionValue));\r\n      // delete empty nested objects\r\n      if (isEmptyObject(diff[optionKey])) {\r\n        delete diff[optionKey];\r\n      }\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n\r\nexport const createOptionCheck =\r\n  <T extends OptionsObject>(\r\n    options: T,\r\n    changedOptions: DeepPartial<T>,\r\n    force?: boolean\r\n  ): OptionsCheckFn<T> =>\r\n  (path) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n","const dataAttributePrefix = `data-overlayscrollbars`;\r\n\r\n// environment\r\nexport const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentScrollbarHidden = `${classNameEnvironment}-scrollbar-hidden`;\r\nexport const classNameEnvironmentFlexboxGlue = `${classNameEnvironment}-flexbox-glue`;\r\nexport const classNameEnvironmentFlexboxGlueMax = `${classNameEnvironmentFlexboxGlue}-max`;\r\n\r\n// initialize\r\nexport const dataAttributeInitialize = `${dataAttributePrefix}-initialize`;\r\n\r\n// host\r\nexport const dataAttributeHost = dataAttributePrefix;\r\nexport const dataAttributeHostOverflowX = `${dataAttributeHost}-overflow-x`;\r\nexport const dataAttributeHostOverflowY = `${dataAttributeHost}-overflow-y`;\r\nexport const dataValueHostOverflowVisible = 'overflowVisible';\r\nexport const dataValueHostScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueHostScrollbarPressed = 'scrollbarPressed';\r\nexport const dataValueHostUpdating = 'updating';\r\nexport const dataValueHostHtmlBody = 'body';\r\n\r\n// viewport\r\nexport const dataAttributeViewport = `${dataAttributePrefix}-viewport`;\r\nexport const dataValueViewportArrange = 'arrange';\r\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueViewportOverflowVisible = dataValueHostOverflowVisible;\r\n\r\n// padding\r\nexport const dataAttributePadding = `${dataAttributePrefix}-padding`;\r\nexport const dataValuePaddingOverflowVisible = dataValueViewportOverflowVisible;\r\n\r\n// content\r\nexport const dataAttributeContent = `${dataAttributePrefix}-content`;\r\n\r\n// size observer\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\n// trinsic observer\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\n// scrollbars\r\nexport const classNameScrollbarThemeNone = 'os-theme-none';\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\r\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\r\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\r\nexport const classNameScrollbarAutoHide = `${classNameScrollbar}-auto-hide`;\r\nexport const classNameScrollbarAutoHideHidden = `${classNameScrollbarAutoHide}-hidden`;\r\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\r\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\r\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\r\n","import { each, keys } from '~/support';\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\r\nimport type { EventListener, EventListenerArgs, EventListeners } from '..';\r\n\r\nexport type PluginModuleInstance = Record<string | number | symbol, any>;\r\n\r\nexport type InstancePluginEvent = {\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  (eventListeners: EventListeners): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbars plugin module.\r\n * Plugin modules must be side-effect free and deterministic. (same input produces same output)\r\n */\r\nexport type PluginModule<\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = (S extends PluginModuleInstance\r\n  ? {\r\n      /**\r\n       * Creates a plugin which is bound to the static object.\r\n       * The function will be called once with the static object as soon as the plugin is registered.\r\n       * The plugin can add new methods or fields to the passed static object.\r\n       * @param osStatic The static object the plugin is bound to.\r\n       * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n       */\r\n      static: (osStatic: OverlayScrollbarsStatic) => S | void;\r\n    }\r\n  : object) &\r\n  (I extends PluginModuleInstance\r\n    ? {\r\n        /**\r\n         * Creates a A plugin which is bound to an instance.\r\n         * The function will be called each time a new instance is created.\r\n         * The plugin can add new methods or fields to the passed instance object.\r\n         * @param osInstance The instance object the plugin is bound to.\r\n         * @param event A function which adds events to the instance which can't be removed from outside the plugin. (instance events added with the `on` function can be removed with the optional `pure` parameter)\r\n         * @param osStatic The static object the plugin is bound to.\r\n         * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n         */\r\n        instance: (\r\n          osInstance: OverlayScrollbars,\r\n          event: InstancePluginEvent,\r\n          osStatic: OverlayScrollbarsStatic\r\n        ) => I | void;\r\n      }\r\n    : object);\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin.\r\n */\r\nexport type Plugin<\r\n  Name extends string = string,\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = {\r\n  /** The field is the plugins name. Plugin names must be globally unique, please choose wisely. */\r\n  [pluginName in Name]: PluginModule<S, I>;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a static module.\r\n */\r\nexport type StaticPlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, T, void>;\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a instance module.\r\n */\r\nexport type InstancePlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, void, T>;\r\n\r\n/**\r\n * Infers the type of the static modules instance of the passed plugin.\r\n */\r\nexport type InferStaticPluginModuleInstance<T extends StaticPlugin> = T extends StaticPlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['static'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['static']>\r\n    : void\r\n  : void;\r\n\r\n/**\r\n * Infers the type of the instance modules instance of the passed plugin.\r\n */\r\nexport type InferInstancePluginModuleInstance<T extends InstancePlugin> = T extends InstancePlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['instance'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['instance']>\r\n    : void\r\n  : void;\r\n\r\n/** All registered plugin modules. */\r\nexport const pluginModules: Record<string, PluginModule> = {};\r\n\r\n/** All static plugin module instances. */\r\nexport const staticPluginModuleInstances: Record<string, PluginModuleInstance | void> = {};\r\n\r\n/**\r\n * Adds plugins.\r\n * @param addedPlugin The plugin(s) to add.\r\n * @returns The added plugin modules of the registered plugins.\r\n */\r\nexport const addPlugins = (addedPlugin: Plugin[]) => {\r\n  each(addedPlugin, (plugin) =>\r\n    each(plugin, (_, key) => {\r\n      pluginModules[key] = plugin[key];\r\n    })\r\n  );\r\n};\r\n\r\nexport const registerPluginModuleInstances = (\r\n  plugin: Plugin,\r\n  staticObj: OverlayScrollbarsStatic,\r\n  instanceInfo?: [\r\n    instanceObj: OverlayScrollbars,\r\n    event: InstancePluginEvent,\r\n    instancePluginMap?: Record<string, PluginModuleInstance>\r\n  ]\r\n): Array<PluginModuleInstance | void> =>\r\n  keys(plugin).map((name) => {\r\n    const { static: osStatic, instance: osInstance } = (\r\n      plugin as Plugin<string, PluginModuleInstance, PluginModuleInstance>\r\n    )[name];\r\n    const [instanceObj, event, instancePluginMap] = instanceInfo || [];\r\n    const ctor = instanceInfo ? osInstance : osStatic;\r\n    if (ctor) {\r\n      const instance = instanceInfo\r\n        ? (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (\r\n                osInstance: OverlayScrollbars,\r\n                event: InstancePluginEvent,\r\n                osStatic: OverlayScrollbarsStatic\r\n              ) => PluginModuleInstance | void\r\n            >\r\n          )(instanceObj!, event!, staticObj)\r\n        : (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (osStatic: OverlayScrollbarsStatic) => PluginModuleInstance | void\r\n            >\r\n          )(staticObj);\r\n      return ((instancePluginMap || staticPluginModuleInstances)[name] = instance);\r\n    }\r\n  });\r\n\r\nexport const getStaticPluginModuleInstance = <T extends StaticPlugin>(\r\n  pluginModuleName: T extends StaticPlugin<infer N> ? N : never\r\n): InferStaticPluginModuleInstance<T> | undefined =>\r\n  staticPluginModuleInstances[pluginModuleName] as InferStaticPluginModuleInstance<T> | undefined;\r\n","function _extends() {\n  module.exports = _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _extends.apply(this, arguments);\n}\nmodule.exports = _extends, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import {\r\n  each,\r\n  hasOwnProperty,\r\n  keys,\r\n  push,\r\n  isEmptyObject,\r\n  type,\r\n  isUndefined,\r\n  isPlainObject,\r\n  isString,\r\n  createOrKeepArray,\r\n} from '~/support';\r\nimport type { PlainObject, DeepPartial } from '~/typings';\r\nimport type { OptionsObject } from '~/options';\r\n\r\nexport type OptionsFunctionType = (this: any, ...args: any[]) => any;\r\nexport type OptionsTemplateType<T extends OptionsTemplateNativeTypes> = ExtractPropsKey<\r\n  OptionsTemplateTypeMap,\r\n  T\r\n>;\r\nexport type OptionsTemplateTypes = keyof OptionsTemplateTypeMap;\r\nexport type OptionsTemplateNativeTypes = OptionsTemplateTypeMap[keyof OptionsTemplateTypeMap];\r\n\r\nexport type OptionsTemplateValue<T extends OptionsTemplateNativeTypes = string> = T extends string\r\n  ? string extends T\r\n    ? OptionsTemplateValueNonEnum<T>\r\n    : string\r\n  : OptionsTemplateValueNonEnum<T>;\r\n\r\nexport type OptionsTemplate<T> = {\r\n  [P in keyof T]: T[P] extends OptionsObject\r\n    ? OptionsTemplate<T[P]>\r\n    : T[P] extends OptionsTemplateNativeTypes\r\n    ? OptionsTemplateValue<T[P]>\r\n    : never;\r\n};\r\n\r\nexport type OptionsValidationResult<T> = [\r\n  validated: DeepPartial<T>,\r\n  foreign: Record<string, unknown>\r\n];\r\n\r\ntype OptionsTemplateTypeMap = {\r\n  __TPL_boolean_TYPE__: boolean;\r\n  __TPL_number_TYPE__: number;\r\n  __TPL_string_TYPE__: string;\r\n  __TPL_array_TYPE__: Array<any> | ReadonlyArray<any>;\r\n  __TPL_function_TYPE__: OptionsFunctionType;\r\n  __TPL_null_TYPE__: null;\r\n  __TPL_object_TYPE__: OptionsObject;\r\n};\r\n\r\ntype OptionsTemplateValueNonEnum<T extends OptionsTemplateNativeTypes> =\r\n  | OptionsTemplateType<T>\r\n  | [OptionsTemplateType<T>, ...Array<OptionsTemplateTypes>];\r\n\r\ntype ExtractPropsKey<T, TProps extends T[keyof T]> = {\r\n  [P in keyof T]: TProps extends T[P] ? P : never;\r\n}[keyof T];\r\n\r\ntype OptionsTemplateTypesDictionary = {\r\n  readonly boolean: OptionsTemplateType<boolean>;\r\n  readonly number: OptionsTemplateType<number>;\r\n  readonly string: OptionsTemplateType<string>;\r\n  readonly array: OptionsTemplateType<Array<any>>;\r\n  readonly object: OptionsTemplateType<OptionsObject>;\r\n  readonly function: OptionsTemplateType<OptionsFunctionType>;\r\n  readonly null: OptionsTemplateType<null>;\r\n};\r\n\r\nconst optionsTemplateTypes: OptionsTemplateTypesDictionary = {\r\n  boolean: '__TPL_boolean_TYPE__',\r\n  number: '__TPL_number_TYPE__',\r\n  string: '__TPL_string_TYPE__',\r\n  array: '__TPL_array_TYPE__',\r\n  object: '__TPL_object_TYPE__',\r\n  function: '__TPL_function_TYPE__',\r\n  null: '__TPL_null_TYPE__',\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a object which looks like:\r\n * {\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n * }\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param optionsDiff When provided the returned validated object will only have properties which are different to this objects properties.\r\n * Example (assume all properties are valid to the template):\r\n * Options object            : { a: 'a', b: 'b', c: 'c' }\r\n * optionsDiff object        : { a: 'a', b: 'b', c: undefined }\r\n * Returned validated object : { c: 'c' }\r\n * Because the value of the properties a and b didn't change, they aren't included in the returned object.\r\n * Without the optionsDiff object the returned validated object would be: { a: 'a', b: 'b', c: 'c' }\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n * @param propPath The propertyPath which lead to this object. (used for error logging)\r\n */\r\nconst validateRecursive = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: DeepPartial<T>,\r\n  doWriteErrors?: boolean,\r\n  propPath?: string\r\n): OptionsValidationResult<T> => {\r\n  const validatedOptions: DeepPartial<T> = {};\r\n  const optionsCopy: DeepPartial<T> = { ...options };\r\n  const props = keys(template).filter((prop) => hasOwnProperty(options, prop));\r\n\r\n  each(props, (prop: Extract<keyof T, string>) => {\r\n    const optionsValue: any = options[prop];\r\n    const templateValue: PlainObject | string | OptionsTemplateTypes | Array<OptionsTemplateTypes> =\r\n      template[prop];\r\n    const templateIsComplex = isPlainObject(templateValue);\r\n    const propPrefix = propPath ? `${propPath}.` : '';\r\n\r\n    // if the template has a object as value, it means that the options are complex (verschachtelt)\r\n    if (templateIsComplex && isPlainObject(optionsValue)) {\r\n      const [validated, foreign] = validateRecursive(\r\n        templateValue as T,\r\n        optionsValue,\r\n        doWriteErrors,\r\n        propPrefix + prop\r\n      );\r\n      validatedOptions[prop] = validated as any;\r\n      optionsCopy[prop] = foreign as any;\r\n\r\n      each([optionsCopy, validatedOptions], (value) => {\r\n        if (isEmptyObject(value[prop])) {\r\n          delete value[prop];\r\n        }\r\n      });\r\n    } else if (!templateIsComplex) {\r\n      let isValid = false;\r\n      const errorEnumStrings: Array<string> = [];\r\n      const errorPossibleTypes: Array<string> = [];\r\n      const optionsValueType = type(optionsValue) as keyof typeof optionsTemplateTypes;\r\n      const templateValueArr: Array<string | OptionsTemplateTypes> =\r\n        createOrKeepArray(templateValue);\r\n\r\n      each(templateValueArr, (currTemplateType) => {\r\n        // if currType value isn't inside possibleTemplateTypes we assume its a enum string value\r\n        let typeString: string | undefined;\r\n        each(optionsTemplateTypes, (value: string, key: string) => {\r\n          if (value === currTemplateType) {\r\n            typeString = key;\r\n          }\r\n        });\r\n        const isEnumString = isUndefined(typeString);\r\n        if (isEnumString && isString(optionsValue)) {\r\n          // split it into a array which contains all possible values for example: [\"yes\", \"no\", \"maybe\"]\r\n          const enumStringSplit = currTemplateType.split(' ');\r\n          isValid = !!enumStringSplit.find((possibility) => possibility === optionsValue);\r\n\r\n          // build error message\r\n          push(errorEnumStrings, enumStringSplit);\r\n        } else {\r\n          isValid = optionsTemplateTypes[optionsValueType] === currTemplateType;\r\n        }\r\n\r\n        // build error message\r\n        push(errorPossibleTypes, isEnumString ? optionsTemplateTypes.string : typeString!);\r\n\r\n        // continue if invalid, break if valid\r\n        return !isValid;\r\n      });\r\n\r\n      if (isValid) {\r\n        validatedOptions[prop] = optionsValue;\r\n      } else if (doWriteErrors) {\r\n        console.warn(\r\n          `${\r\n            `The option \"${propPrefix}${prop}\" wasn't set, because it doesn't accept the type [ ${optionsValueType.toUpperCase()} ] with the value of \"${optionsValue}\".\\r\\n` +\r\n            `Accepted types are: [ ${errorPossibleTypes.join(', ').toUpperCase()} ].\\r\\n`\r\n          }${\r\n            errorEnumStrings.length > 0\r\n              ? `\\r\\nValid strings are: [ ${errorEnumStrings.join(', ')} ].`\r\n              : ''\r\n          }`\r\n        );\r\n      }\r\n\r\n      delete optionsCopy[prop];\r\n    }\r\n  });\r\n\r\n  return [validatedOptions, optionsCopy]; // optionsCopy equals now to foreign options\r\n};\r\n\r\n/**\r\n * Validates the given options object according to the given template object and returns a tuple which looks like:\r\n * [\r\n *  validated : a object which consists only of valid properties. (property name is inside the template and value has a correct type)\r\n *  foreign   : a object which consists of properties which aren't defined inside the template. (foreign properties)\r\n * ]\r\n * @param template The template according to which the options object shall be validated.\r\n * @param options The options object which shall be validated.\r\n * @param doWriteErrors True if errors shall be logged into the console, false otherwise.\r\n */\r\nconst validateOptions = <T extends PlainObject>(\r\n  template: OptionsTemplate<T>,\r\n  options: DeepPartial<T>,\r\n  doWriteErrors?: boolean\r\n): OptionsValidationResult<T> => validateRecursive<T>(template, options, doWriteErrors);\r\n\r\nexport { validateOptions, optionsTemplateTypes };\r\n","import type {\r\n  Options,\r\n  PartialOptions,\r\n  OverflowBehavior,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n} from '~/options';\r\nimport type { OptionsTemplate, OptionsTemplateValue } from './validation';\r\nimport type { StaticPlugin } from '~/plugins';\r\nimport { validateOptions, optionsTemplateTypes as oTypes } from './validation';\r\n\r\nexport const optionsValidationPluginModuleName = '__osOptionsValidationPlugin';\r\n\r\nexport const OptionsValidationPlugin = /* @__PURE__ */ (() => ({\r\n  [optionsValidationPluginModuleName]: {\r\n    static: () => {\r\n      const numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\n      const booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\n      const arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [\r\n        oTypes.array,\r\n        oTypes.null,\r\n      ];\r\n      const overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n        'hidden scroll visible visible-hidden';\r\n      const scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\r\n        'visible hidden auto';\r\n      const scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\r\n        'never scroll leavemove';\r\n\r\n      const optionsTemplate: OptionsTemplate<Options> = {\r\n        // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\r\n        paddingAbsolute: booleanAllowedValues, // true || false\r\n        showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\r\n        update: {\r\n          elementEvents: arrayNullValues, // array of tuples || null\r\n          attributes: arrayNullValues,\r\n          debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n          ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n        },\r\n        overflow: {\r\n          x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n          y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n        },\r\n        scrollbars: {\r\n          theme: [oTypes.string, oTypes.null], // string || null\r\n          visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\r\n          autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n          autoHideDelay: numberAllowedValues, // number\r\n          autoHideSuspend: booleanAllowedValues, // true || false\r\n          dragScroll: booleanAllowedValues, // true || false\r\n          clickScroll: booleanAllowedValues, // true || false\r\n          pointers: [oTypes.array, oTypes.null], // string array\r\n        },\r\n        /*\r\n        textarea: {\r\n          dynWidth: booleanAllowedValues, // true || false\r\n          dynHeight: booleanAllowedValues, // true || false\r\n          inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n        },\r\n        */\r\n      };\r\n      return (options: PartialOptions, doWriteErrors?: boolean): PartialOptions => {\r\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n        return { ...foreign, ...validated };\r\n      };\r\n    },\r\n  },\r\n}))() satisfies StaticPlugin<typeof optionsValidationPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  appendChildren,\r\n  offsetSize,\r\n  addEventListener,\r\n  addClass,\r\n  equalWH,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n  bind,\r\n  scrollElementTo,\r\n  strWidth,\r\n  strHeight,\r\n  setStyles,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from '~/classnames';\r\nimport type { StaticPlugin } from '../plugins';\r\n\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const SizeObserverPlugin = /* @__PURE__ */ (() => ({\r\n  [sizeObserverPluginName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        listenerElement: HTMLElement,\r\n        onSizeChangedCallback: (appear: boolean) => any,\r\n        observeAppearChange: boolean | null | undefined\r\n      ): [appearCallback: () => void, offFns: (() => any)[]] => {\r\n        const scrollAmount = 3333333;\r\n        const scrollEventName = 'scroll';\r\n        const observerElementChildren = createDOM(\r\n          `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n        );\r\n        const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n        const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n        const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n        const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n        let cacheSize = offsetSize(observerElementChildrenRoot);\r\n        let currSize = cacheSize;\r\n        let isDirty = false;\r\n        let rAFId: number;\r\n\r\n        const reset = () => {\r\n          scrollElementTo(expandElement, scrollAmount);\r\n          scrollElementTo(shrinkElement, scrollAmount);\r\n        };\r\n        const onResized = (appear?: unknown) => {\r\n          rAFId = 0;\r\n          if (isDirty) {\r\n            cacheSize = currSize;\r\n            onSizeChangedCallback(appear === true);\r\n          }\r\n        };\r\n        const onScroll = (scrollEvent?: Event | false) => {\r\n          currSize = offsetSize(observerElementChildrenRoot);\r\n          isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n          if (scrollEvent) {\r\n            stopPropagation(scrollEvent);\r\n\r\n            if (isDirty && !rAFId) {\r\n              cAF!(rAFId);\r\n              rAFId = rAF!(onResized);\r\n            }\r\n          } else {\r\n            onResized(scrollEvent === false);\r\n          }\r\n\r\n          reset();\r\n        };\r\n        const destroyFns = [\r\n          appendChildren(listenerElement, observerElementChildren),\r\n          addEventListener(expandElement, scrollEventName, onScroll),\r\n          addEventListener(shrinkElement, scrollEventName, onScroll),\r\n        ];\r\n\r\n        addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n\r\n        // lets assume that the divs will never be that large and a constant value is enough\r\n        setStyles(expandElementChild, {\r\n          [strWidth]: scrollAmount,\r\n          [strHeight]: scrollAmount,\r\n        });\r\n\r\n        rAF!(reset);\r\n\r\n        return [observeAppearChange ? bind(onScroll, false) : reset, destroyFns];\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof sizeObserverPluginName>;\r\n","import { getStyles, strOverflowX, strOverflowY, strVisible } from '~/support';\r\nimport type { Env } from '~/environment';\r\nimport type { XY } from '~/support';\r\nimport type { Options, OptionsCheckFn, OverflowBehavior } from '~/options';\r\nimport type { OverflowStyle, StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\n\r\nexport interface ViewportOverflowState {\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport const getShowNativeOverlaidScrollbars = (checkOption: OptionsCheckFn<Options>, env: Env) => {\r\n  const { _nativeScrollbarsOverlaid } = env;\r\n  const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] = checkOption(\r\n    'showNativeOverlaidScrollbars'\r\n  );\r\n\r\n  return [\r\n    showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y,\r\n    showNativeOverlaidScrollbarsChanged,\r\n  ] as const;\r\n};\r\n\r\nexport const overflowIsVisible = (overflowBehavior: string) =>\r\n  overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n/**\r\n * Gets the current overflow state of the viewport.\r\n * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n * @param viewportStyleObj The viewport style object where the overflow scroll property can be read of, or undefined if shall be determined.\r\n * @returns A object which contains informations about the current overflow state.\r\n */\r\nexport const getViewportOverflowState = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  viewportStyleObj?: StyleObject\r\n): ViewportOverflowState => {\r\n  const { _viewport } = structureSetupElements;\r\n  const getStatePerAxis = (styleKey: StyleObjectKey) => {\r\n    const overflowStyle = getStyles(_viewport, styleKey);\r\n    // can't do something like \"viewportStyleObj && viewportStyleObj[styleKey] || overflowStyle\" here!\r\n    const objectPrefferedOverflowStyle = viewportStyleObj\r\n      ? viewportStyleObj[styleKey]\r\n      : overflowStyle;\r\n    const overflowScroll = objectPrefferedOverflowStyle === 'scroll';\r\n\r\n    return [overflowStyle, overflowScroll] as [\r\n      overflowStyle: OverflowStyle,\r\n      overflowScroll: boolean\r\n    ];\r\n  };\r\n\r\n  const [xOverflowStyle, xOverflowScroll] = getStatePerAxis(strOverflowX);\r\n  const [yOverflowStyle, yOverflowScroll] = getStatePerAxis(strOverflowY);\r\n\r\n  return {\r\n    _overflowStyle: {\r\n      x: xOverflowStyle,\r\n      y: yOverflowStyle,\r\n    },\r\n    _overflowScroll: {\r\n      x: xOverflowScroll,\r\n      y: yOverflowScroll,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Sets the overflow property of the viewport and calculates the a overflow state according to the new parameters.\r\n * @param showNativeOverlaidScrollbars Whether to show natively overlaid scrollbars.\r\n * @param overflowAmount The overflow amount.\r\n * @param overflow The overflow behavior according to the options.\r\n * @param viewportStyleObj The viewport style object to which the overflow style shall be applied.\r\n * @returns A object which represents the newly set overflow state.\r\n */\r\nexport const setViewportOverflowState = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  hasOverflow: XY<boolean>,\r\n  overflowOption: XY<OverflowBehavior>,\r\n  viewportStyleObj: StyleObject\r\n): ViewportOverflowState => {\r\n  const hasAnyOverflow = hasOverflow.x || hasOverflow.y;\r\n\r\n  const setAxisOverflowStyle = (behavior: OverflowBehavior, hasOverflowAxis: boolean) => {\r\n    const overflowVisible = overflowIsVisible(behavior);\r\n    const fallbackVisibilityBehavior = overflowVisible && hasAnyOverflow ? 'hidden' : '';\r\n    const overflowVisibleBehavior =\r\n      (hasOverflowAxis && overflowVisible && behavior.replace(`${strVisible}-`, '')) ||\r\n      fallbackVisibilityBehavior;\r\n\r\n    return [\r\n      hasOverflowAxis && !overflowVisible ? behavior : '',\r\n      overflowIsVisible(overflowVisibleBehavior) ? 'hidden' : overflowVisibleBehavior,\r\n    ];\r\n  };\r\n\r\n  const [overflowX, visibleBehaviorX] = setAxisOverflowStyle(overflowOption.x, hasOverflow.x);\r\n  const [overflowY, visibleBehaviorY] = setAxisOverflowStyle(overflowOption.y, hasOverflow.y);\r\n\r\n  viewportStyleObj[strOverflowX] = visibleBehaviorX && overflowY ? visibleBehaviorX : overflowX;\r\n  viewportStyleObj[strOverflowY] = visibleBehaviorY && overflowX ? visibleBehaviorY : overflowY;\r\n\r\n  return getViewportOverflowState(structureSetupElements, viewportStyleObj);\r\n};\r\n","import {\r\n  keys,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  windowSize,\r\n  wnd,\r\n  mathAbs,\r\n  mathRound,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  getStyles,\r\n  setStyles,\r\n  addAttrClass,\r\n  removeAttrClass,\r\n  strWidth,\r\n} from '~/support';\r\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\r\nimport {\r\n  getShowNativeOverlaidScrollbars,\r\n  getViewportOverflowState,\r\n} from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { ObserversSetupState } from '~/setups';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { StructureSetupElementsObj } from '~/setups/structureSetup/structureSetup.elements';\r\nimport type { ViewportOverflowState } from '~/setups/structureSetup/structureSetup.utils';\r\nimport type { Env } from '~/environment';\r\nimport type { UpdateCache, WH, XY } from '~/support';\r\nimport type { StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupState } from '~/setups/structureSetup';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const ScrollbarsHidingPlugin = /* @__PURE__ */ (() => ({\r\n  [scrollbarsHidingPluginName]: {\r\n    static: () => ({\r\n      _viewportArrangement: (\r\n        structureSetupElements: StructureSetupElementsObj,\r\n        structureSetupState: StructureSetupState,\r\n        observersSetupState: ObserversSetupState,\r\n        env: Env,\r\n        checkOptions: OptionsCheckFn<Options>\r\n      ) => {\r\n        const { _viewportIsTarget, _viewport } = structureSetupElements;\r\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _nativeScrollbarsSize } = env;\r\n        const doViewportArrange =\r\n          !_viewportIsTarget &&\r\n          !_nativeScrollbarsHiding &&\r\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n        const [showNativeOverlaidScrollbars] = getShowNativeOverlaidScrollbars(checkOptions, env);\r\n\r\n        const _getViewportOverflowHideOffset = (viewportOverflowState: ViewportOverflowState) => {\r\n          const { _overflowScroll } = viewportOverflowState;\r\n          const arrangeHideOffset =\r\n            _nativeScrollbarsHiding || showNativeOverlaidScrollbars ? 0 : 42;\r\n\r\n          const getHideOffsetPerAxis = (\r\n            isOverlaid: boolean,\r\n            overflowScroll: boolean,\r\n            nativeScrollbarSize: number\r\n          ) => {\r\n            const nonScrollbarStylingHideOffset = isOverlaid\r\n              ? arrangeHideOffset\r\n              : nativeScrollbarSize;\r\n            const scrollbarsHideOffset =\r\n              overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n            const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n            return [scrollbarsHideOffset, scrollbarsHideOffsetArrange] as const;\r\n          };\r\n\r\n          const [xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.x,\r\n            _overflowScroll.x,\r\n            _nativeScrollbarsSize.x\r\n          );\r\n          const [yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] = getHideOffsetPerAxis(\r\n            _nativeScrollbarsOverlaid.y,\r\n            _overflowScroll.y,\r\n            _nativeScrollbarsSize.y\r\n          );\r\n\r\n          return {\r\n            _scrollbarsHideOffset: {\r\n              x: xScrollbarsHideOffset,\r\n              y: yScrollbarsHideOffset,\r\n            },\r\n            _scrollbarsHideOffsetArrange: {\r\n              x: xScrollbarsHideOffsetArrange,\r\n              y: yScrollbarsHideOffsetArrange,\r\n            },\r\n          };\r\n        };\r\n\r\n        /**\r\n         * Hides the native scrollbars according to the passed parameters.\r\n         * @param viewportOverflowState The viewport overflow state.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n         * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n         */\r\n        const _hideNativeScrollbars = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          { _directionIsRTL }: ObserversSetupState,\r\n          viewportArrange: boolean,\r\n          viewportStyleObj: StyleObject\r\n        ): void => {\r\n          assignDeep(viewportStyleObj, {\r\n            [strMarginRight]: 0,\r\n            [strMarginBottom]: 0,\r\n            [strMarginLeft]: 0,\r\n          });\r\n          if (!_viewportIsTarget) {\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const horizontalMarginKey: keyof StyleObject = _directionIsRTL\r\n              ? strMarginLeft\r\n              : strMarginRight;\r\n            const viewportHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingLeft\r\n              : strPaddingRight;\r\n            const horizontalMarginValue = _viewportPaddingStyle[horizontalMarginKey] as number;\r\n            const verticalMarginValue = _viewportPaddingStyle[strMarginBottom] as number;\r\n            const horizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportHorizontalPaddingKey\r\n            ] as number;\r\n            const verticalPaddingValue = _viewportPaddingStyle[strPaddingBottom] as number;\r\n\r\n            // horizontal\r\n            viewportStyleObj[strWidth] = `calc(100% + ${\r\n              hideOffsetY + horizontalMarginValue * -1\r\n            }px)`;\r\n            viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n            // vertical\r\n            viewportStyleObj[strMarginBottom] = -hideOffsetX + verticalMarginValue;\r\n\r\n            // viewport arrange additional styles\r\n            if (viewportArrange) {\r\n              viewportStyleObj[viewportHorizontalPaddingKey] =\r\n                horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n              viewportStyleObj[strPaddingBottom] =\r\n                verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n            }\r\n          }\r\n        };\r\n\r\n        /**\r\n         * Sets the styles of the viewport arrange element.\r\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n         * @param viewportScrollSize The content scroll size.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n         */\r\n        const _arrangeViewport = (\r\n          viewportOverflowState: ViewportOverflowState,\r\n          viewportScrollSize: WH<number>,\r\n          sizeFraction: WH<number>\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const { _viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } =\r\n              _getViewportOverflowHideOffset(viewportOverflowState);\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const { _directionIsRTL } = observersSetupState;\r\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = _directionIsRTL\r\n              ? strPaddingRight\r\n              : strPaddingLeft;\r\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportArrangeHorizontalPaddingKey\r\n            ] as number;\r\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n            const arrangeSize = {\r\n              w:\r\n                hideOffsetY && arrangeY\r\n                  ? `${\r\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                    }px`\r\n                  : '',\r\n              h:\r\n                hideOffsetX && arrangeX\r\n                  ? `${\r\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\r\n                    }px`\r\n                  : '',\r\n            };\r\n\r\n            setStyles(_viewport, {\r\n              '--os-vaw': arrangeSize.w,\r\n              '--os-vah': arrangeSize.h,\r\n            });\r\n          }\r\n\r\n          return doViewportArrange;\r\n        };\r\n\r\n        /**\r\n         * Removes all styles applied because of the viewport arrange strategy.\r\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n         */\r\n        const _undoViewportArrange = (viewportOverflowState?: ViewportOverflowState) => {\r\n          if (doViewportArrange) {\r\n            const finalViewportOverflowState =\r\n              viewportOverflowState || getViewportOverflowState(structureSetupElements);\r\n            const { _viewportPaddingStyle: viewportPaddingStyle } = structureSetupState;\r\n            const { _scrollbarsHideOffsetArrange } = _getViewportOverflowHideOffset(\r\n              finalViewportOverflowState\r\n            );\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const finalPaddingStyle: StyleObject = {};\r\n            const assignProps = (props: string[]) =>\r\n              each(props, (prop) => {\r\n                finalPaddingStyle[prop as StyleObjectKey] =\r\n                  viewportPaddingStyle[prop as StyleObjectKey];\r\n              });\r\n\r\n            if (arrangeX) {\r\n              assignProps([strMarginBottom, strPaddingTop, strPaddingBottom]);\r\n            }\r\n\r\n            if (arrangeY) {\r\n              assignProps([strMarginLeft, strMarginRight, strPaddingLeft, strPaddingRight]);\r\n            }\r\n\r\n            const prevStyle = getStyles(_viewport, keys(finalPaddingStyle) as StyleObjectKey[]);\r\n            removeAttrClass(_viewport, dataAttributeViewport, dataValueViewportArrange);\r\n\r\n            setStyles(_viewport, finalPaddingStyle);\r\n\r\n            return [\r\n              () => {\r\n                _hideNativeScrollbars(\r\n                  finalViewportOverflowState,\r\n                  observersSetupState,\r\n                  doViewportArrange,\r\n                  prevStyle\r\n                );\r\n                setStyles(_viewport, prevStyle);\r\n                addAttrClass(_viewport, dataAttributeViewport, dataValueViewportArrange);\r\n              },\r\n              finalViewportOverflowState,\r\n            ] as const;\r\n          }\r\n          return [noop] as const;\r\n        };\r\n\r\n        return {\r\n          _getViewportOverflowHideOffset,\r\n          _arrangeViewport,\r\n          _undoViewportArrange,\r\n          _hideNativeScrollbars,\r\n        };\r\n      },\r\n      _envWindowZoom: () => {\r\n        let size = { w: 0, h: 0 };\r\n        let dpr = 0;\r\n        const getWindowDPR = (): number => {\r\n          const screen = wnd.screen;\r\n          // eslint-disable-next-line\r\n          // @ts-ignore\r\n          const dDPI = screen.deviceXDPI || 0;\r\n          // eslint-disable-next-line\r\n          // @ts-ignore\r\n          const sDPI = screen.logicalXDPI || 1;\r\n          return wnd.devicePixelRatio || dDPI / sDPI;\r\n        };\r\n        const diffBiggerThanOne = (valOne: number, valTwo: number): boolean => {\r\n          const absValOne = mathAbs(valOne);\r\n          const absValTwo = mathAbs(valTwo);\r\n          return !(\r\n            absValOne === absValTwo ||\r\n            absValOne + 1 === absValTwo ||\r\n            absValOne - 1 === absValTwo\r\n          );\r\n        };\r\n\r\n        return (\r\n          envInstance: Env,\r\n          updateNativeScrollbarSizeCache: UpdateCache<XY<number>>\r\n        ): boolean | undefined => {\r\n          const sizeNew = windowSize();\r\n          const deltaSize = {\r\n            w: sizeNew.w - size.w,\r\n            h: sizeNew.h - size.h,\r\n          };\r\n\r\n          if (deltaSize.w === 0 && deltaSize.h === 0) {\r\n            return;\r\n          }\r\n\r\n          const deltaAbsSize = {\r\n            w: mathAbs(deltaSize.w),\r\n            h: mathAbs(deltaSize.h),\r\n          };\r\n          const deltaAbsRatio = {\r\n            w: mathAbs(mathRound(sizeNew.w / (size.w / 100.0))),\r\n            h: mathAbs(mathRound(sizeNew.h / (size.h / 100.0))),\r\n          };\r\n          const dprNew = getWindowDPR();\r\n          const deltaIsBigger = deltaAbsSize.w > 2 && deltaAbsSize.h > 2;\r\n          const difference = !diffBiggerThanOne(deltaAbsRatio.w, deltaAbsRatio.h);\r\n          const dprChanged = dprNew !== dpr && dprNew > 0;\r\n          const isZoom = deltaIsBigger && difference && dprChanged;\r\n          let scrollbarSizeChanged;\r\n          let scrollbarSize;\r\n\r\n          if (isZoom) {\r\n            [scrollbarSize, scrollbarSizeChanged] = updateNativeScrollbarSizeCache();\r\n\r\n            assignDeep(envInstance._nativeScrollbarsSize, scrollbarSize); // keep the object same!\r\n          }\r\n\r\n          size = sizeNew;\r\n          dpr = dprNew;\r\n\r\n          return scrollbarSizeChanged;\r\n        };\r\n      },\r\n    }),\r\n  },\r\n}))() satisfies StaticPlugin<typeof scrollbarsHidingPluginName>;\r\n","import { animateNumber, noop, setT } from '~/support';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const clickScrollPluginModuleName = '__osClickScrollPlugin';\r\n\r\nexport const ClickScrollPlugin = /* @__PURE__ */ (() => ({\r\n  [clickScrollPluginModuleName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        moveHandleRelative: (deltaMovement: number) => void,\r\n        getHandleOffset: (handleRect?: DOMRect, trackRect?: DOMRect) => number,\r\n        startOffset: number,\r\n        handleLength: number,\r\n        relativeTrackPointerOffset: number\r\n      ): (() => void) => {\r\n        // click scroll animation\r\n        let iteration = 0;\r\n        let clear = noop;\r\n        const animateClickScroll = (clickScrollProgress: number) => {\r\n          clear = animateNumber(\r\n            clickScrollProgress,\r\n            clickScrollProgress + handleLength * Math.sign(startOffset),\r\n            133,\r\n            (animationProgress, _, animationCompleted) => {\r\n              moveHandleRelative(animationProgress);\r\n              const handleStartBound = getHandleOffset();\r\n              const handleEndBound = handleStartBound + handleLength;\r\n              const mouseBetweenHandleBounds =\r\n                relativeTrackPointerOffset >= handleStartBound &&\r\n                relativeTrackPointerOffset <= handleEndBound;\r\n\r\n              if (animationCompleted && !mouseBetweenHandleBounds) {\r\n                if (iteration) {\r\n                  animateClickScroll(animationProgress);\r\n                } else {\r\n                  const firstIterationPauseTimeout = setT(() => {\r\n                    animateClickScroll(animationProgress);\r\n                  }, 222);\r\n                  clear = () => {\r\n                    clearTimeout(firstIterationPauseTimeout);\r\n                  };\r\n                }\r\n                iteration++;\r\n              }\r\n            }\r\n          );\r\n        };\r\n\r\n        animateClickScroll(0);\r\n\r\n        return () => clear();\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof clickScrollPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  appendChildren,\r\n  fractionalSize,\r\n  clientSize,\r\n  absoluteCoordinates,\r\n  offsetSize,\r\n  removeAttrs,\r\n  removeElements,\r\n  assignDeep,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  scrollT,\r\n  bind,\r\n  wnd,\r\n  noop,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strOverflowX,\r\n  strOverflowY,\r\n  getStyles,\r\n  setStyles,\r\n} from '~/support';\r\nimport { classNameEnvironment, classNameEnvironmentScrollbarHidden } from '~/classnames';\r\nimport { defaultOptions } from '~/options';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { XY, EventListener } from '~/support';\r\nimport type { Options, PartialOptions } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { Initialization, PartialInitialization } from '~/initialization';\r\nimport type { StyleObjectKey } from './typings';\r\n\r\ntype EnvironmentEventArgs = {\r\n  r: [scrollbarSizeChanged?: boolean];\r\n};\r\n\r\nexport interface Env {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _rtlScrollBehavior: { n: boolean; i: boolean };\r\n  readonly _scrollTimeline: boolean;\r\n  readonly _staticDefaultInitialization: Initialization;\r\n  readonly _staticDefaultOptions: Options;\r\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\r\n  _getDefaultInitialization(): Initialization;\r\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nlet environmentInstance: Env;\r\n\r\nconst createEnvironment = (): Env => {\r\n  const getNativeScrollbarSize = (\r\n    body: HTMLElement,\r\n    measureElm: HTMLElement,\r\n    measureElmChild: HTMLElement,\r\n    clear?: boolean\r\n  ): XY => {\r\n    appendChildren(body, measureElm);\r\n\r\n    const cSize = clientSize(measureElm);\r\n    const oSize = offsetSize(measureElm);\r\n    const fSize = fractionalSize(measureElmChild);\r\n\r\n    clear && removeElements(measureElm);\r\n\r\n    return {\r\n      x: oSize.h - cSize.h + fSize.h,\r\n      y: oSize.w - cSize.w + fSize.w,\r\n    };\r\n  };\r\n\r\n  const getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n    let result = false;\r\n    const revertClass = addClass(testElm, classNameEnvironmentScrollbarHidden);\r\n    try {\r\n      result =\r\n        getStyles(testElm, 'scrollbar-width' as StyleObjectKey) === 'none' ||\r\n        getStyles(testElm, 'display', '::-webkit-scrollbar') === 'none';\r\n    } catch {}\r\n    revertClass();\r\n    return result;\r\n  };\r\n\r\n  const getRtlScrollBehavior = (\r\n    parentElm: HTMLElement,\r\n    childElm: HTMLElement\r\n  ): { i: boolean; n: boolean } => {\r\n    setStyles(parentElm, {\r\n      [strOverflowX]: strHidden,\r\n      [strOverflowY]: strHidden,\r\n      direction: 'rtl',\r\n    });\r\n    scrollElementTo(parentElm, { x: 0 });\r\n\r\n    const parentOffset = absoluteCoordinates(parentElm);\r\n    const childOffset = absoluteCoordinates(childElm);\r\n    scrollElementTo(parentElm, { x: -999 }); // https://github.com/KingSora/OverlayScrollbars/issues/187\r\n    const childOffsetAfterScroll = absoluteCoordinates(childElm);\r\n    return {\r\n      /**\r\n       * origin direction = determines if the zero scroll position is on the left or right side\r\n       * 'i' means 'invert' (i === true means that the axis must be inverted to be correct)\r\n       * true = on the left side\r\n       * false = on the right side\r\n       */\r\n      i: parentOffset.x === childOffset.x,\r\n      /**\r\n       * negative = determines if the maximum scroll is positive or negative\r\n       * 'n' means 'negate' (n === true means that the axis must be negated to be correct)\r\n       * true = negative\r\n       * false = positive\r\n       */\r\n      n: childOffset.x !== childOffsetAfterScroll.x,\r\n    };\r\n  };\r\n\r\n  const { body } = document;\r\n  const envDOM = createDOM(`<div class=\"${classNameEnvironment}\"><div></div></div>`);\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(body, envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    bind(getNativeScrollbarSize, body, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const staticDefaultInitialization: Initialization = {\r\n    elements: {\r\n      host: null,\r\n      padding: !nativeScrollbarsHiding,\r\n      viewport: (target) =>\r\n        nativeScrollbarsHiding && target === target.ownerDocument.body && target,\r\n      content: false,\r\n    },\r\n    scrollbars: {\r\n      slot: true,\r\n    },\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: false,\r\n      body: null,\r\n    },\r\n  };\r\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\r\n  const getDefaultOptions = bind(\r\n    assignDeep as typeof assignDeep<Options, Options>,\r\n    {} as Options,\r\n    staticDefaultOptions\r\n  );\r\n  const getDefaultInitialization = bind(\r\n    assignDeep as typeof assignDeep<Initialization, Initialization>,\r\n    {} as Initialization,\r\n    staticDefaultInitialization\r\n  );\r\n\r\n  const env: Env = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _scrollTimeline: !!scrollT,\r\n    _rtlScrollBehavior: getRtlScrollBehavior(envElm, envChildElm),\r\n    _addResizeListener: bind(addEvent, 'r'),\r\n    _getDefaultInitialization: getDefaultInitialization,\r\n    _setDefaultInitialization: (newInitializationStrategy) =>\r\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\r\n      getDefaultInitialization(),\r\n    _getDefaultOptions: getDefaultOptions,\r\n    _setDefaultOptions: (newDefaultOptions) =>\r\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\r\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\r\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\r\n  };\r\n\r\n  removeAttrs(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  // needed in case content has css viewport units\r\n  wnd.addEventListener('resize', () => {\r\n    let scrollbarSizeChanged;\r\n    if (!nativeScrollbarsHiding && (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)) {\r\n      const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n        scrollbarsHidingPluginName\r\n      );\r\n      const zoomFn = scrollbarsHidingPlugin ? scrollbarsHidingPlugin._envWindowZoom() : noop;\r\n      scrollbarSizeChanged = !!zoomFn(env, updateNativeScrollbarSizeCache);\r\n    }\r\n\r\n    triggerEvent('r', [scrollbarSizeChanged]);\r\n  });\r\n\r\n  return env;\r\n};\r\n\r\nconst getEnvironment = (): Env => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n\r\nexport { getEnvironment };\r\n","import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { DeepPartial } from '~/typings';\r\n\r\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\r\n  StaticInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\r\n  DynamicInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\nexport type StaticInitialization = HTMLElement | false | null;\r\nexport type DynamicInitialization = HTMLElement | boolean | null;\r\n\r\n/**\r\n * Static elements are elements which MUST be present in the final DOM.\r\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\r\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the StaticInitialization value. */\r\n  | ((...args: Args) => StaticInitialization)\r\n  /** The StaticInitialization value. */\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic elements are elements which CAN be present in the final DOM.\r\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\r\n * With `true` an appropriate element is generated automatically.\r\n * With `false`, `null` or `undefined` the element won't be in the DOM.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the DynamicInitialization value. */\r\n  | ((...args: Args) => DynamicInitialization)\r\n  /** The DynamicInitialization value. */\r\n  | DynamicInitialization;\r\n\r\n/**\r\n * Describes how a OverlayScrollbar instance should initialize.\r\n */\r\nexport type Initialization = {\r\n  /**\r\n   * Customizes which elements are generated and used.\r\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\r\n   * Any passed function should be a \"pure\" function. (same input produces same output)\r\n   */\r\n  elements: {\r\n    /**\r\n     * Assign a custom element as the host element.\r\n     * Only relevant if the target element is a Textarea.\r\n     */\r\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the viewport element. */\r\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the padding element or force the element not to be generated. */\r\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the content element or force the element not to be generated. */\r\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n  };\r\n  /**\r\n   * Customizes elements related to the scrollbars.\r\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\r\n   */\r\n  scrollbars: {\r\n    slot: DynamicInitializationElement<\r\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\r\n    >;\r\n  };\r\n  /**\r\n   * Customizes the cancelation behavior.\r\n   */\r\n  cancel: {\r\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\r\n    nativeScrollbarsOverlaid: boolean;\r\n    /**\r\n     * Whether the initialization shall be canceled if its applied to a body element.\r\n     * With `true` an initialization is always canceled, with `false` its never canceled.\r\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\r\n     */\r\n    body: boolean | null;\r\n  };\r\n};\r\n\r\nexport type PartialInitialization = DeepPartial<Initialization>;\r\n\r\n/** The initialization target element. */\r\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\r\n\r\n/**\r\n * The initialization target object.\r\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\r\n */\r\nexport type InitializationTargetObject = PartialInitialization & {\r\n  target: InitializationTargetElement;\r\n};\r\n\r\n/** The initialization target. */\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\r\n  args: any,\r\n  value: any\r\n): T => (isFunction(value) ? value.apply(0, args) : value);\r\n\r\nexport const staticInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\r\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\r\n  staticInitializationElementValue?: StaticInitializationElement<Args>\r\n): HTMLElement => {\r\n  const staticInitialization = isUndefined(staticInitializationElementValue)\r\n    ? defaultStaticInitializationElement\r\n    : staticInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\r\n    args,\r\n    staticInitialization\r\n  );\r\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\r\n};\r\n\r\nexport const dynamicInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\r\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\r\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\r\n): HTMLElement | false => {\r\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\r\n    ? defaultDynamicInitializationElement\r\n    : dynamicInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\r\n    args,\r\n    dynamicInitialization\r\n  );\r\n  return (\r\n    !!resolvedInitialization &&\r\n    (isHTMLElement(resolvedInitialization)\r\n      ? resolvedInitialization\r\n      : fallbackDynamicInitializationElement.apply(0, args))\r\n  );\r\n};\r\n\r\nexport const cancelInitialization = (\r\n  isBody: boolean,\r\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\r\n): boolean => {\r\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\r\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding, _getDefaultInitialization } =\r\n    getEnvironment();\r\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\r\n    _getDefaultInitialization().cancel;\r\n\r\n  const resolvedNativeScrollbarsOverlaid =\r\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\r\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\r\n\r\n  const finalNativeScrollbarsOverlaid =\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\r\n    resolvedNativeScrollbarsOverlaid;\r\n  const finalDocumentScrollingElement =\r\n    isBody &&\r\n    (isNull(resolvedDocumentScrollingElement)\r\n      ? !_nativeScrollbarsHiding\r\n      : resolvedDocumentScrollingElement);\r\n\r\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\r\n};\r\n","import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  MutationObserverConstructor,\r\n  addEventListener,\r\n  is,\r\n  find,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  isEmptyArray,\r\n  deduplicateArray,\r\n  inArray,\r\n  concat,\r\n  getAttr,\r\n} from '~/support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\r\n  /**\r\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\r\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\r\n   */\r\n  _styleChangingAttributes?: string[];\r\n}\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  construct: () => () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (\r\n  getElements?: (selector: string) => Node[],\r\n  removed?: boolean\r\n) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: HTMLElement,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let destroyed = false;\r\n  const map = eventContentChange ? new WeakMap<Node, (() => any)[]>() : false; // weak map to prevent memory leak for detached elements\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\r\n    if (map && eventContentChange) {\r\n      const eventElmList = eventContentChange.map((item) => {\r\n        const [selector, eventNames] = item || [];\r\n        const elements = eventNames && selector ? (getElements || find)(selector, target) : [];\r\n        return [elements, eventNames] as const;\r\n      });\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entries = map.get(elm) || [];\r\n          const isTargetChild = target.contains(elm);\r\n\r\n          if (isTargetChild && eventNames) {\r\n            const removeListener = addEventListener(elm, eventNames, (event: Event) => {\r\n              if (destroyed) {\r\n                removeListener();\r\n                map.delete(elm);\r\n              } else {\r\n                callback(event);\r\n              }\r\n            });\r\n            map.set(elm, push(entries, removeListener));\r\n          } else {\r\n            runEachAndClear(entries);\r\n            map.delete(elm);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  updateElements();\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => isConnected && (callback as DOMContentObserverCallback)(true),\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = concat(finalAttributes, finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    fromRecords: boolean,\r\n    mutations: MutationRecord[]\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    if (!isEmptyArray(mutations)) {\r\n      const ignoreTargetChange = _ignoreTargetChange || noop;\r\n      const ignoreContentChange = _ignoreContentChange || noop;\r\n      const totalChangedNodes: Node[] = [];\r\n      const targetChangedAttrs: string[] = [];\r\n      let targetStyleChanged: boolean | '' | null | undefined = false;\r\n      let contentChanged: boolean | '' | null | undefined = false;\r\n      let childListChanged: boolean | '' | null | undefined = false;\r\n\r\n      each(mutations, (mutation) => {\r\n        const {\r\n          attributeName,\r\n          target: mutationTarget,\r\n          type,\r\n          oldValue,\r\n          addedNodes,\r\n          removedNodes,\r\n        } = mutation;\r\n        const isAttributesType = type === 'attributes';\r\n        const isChildListType = type === 'childList';\r\n        const targetIsMutationTarget = target === mutationTarget;\r\n        const isAttrChange = isAttributesType && attributeName;\r\n        // isAttrChange check needed, otherwise mutationTarget might not be a valid HTMLElement\r\n        const attributeValue =\r\n          (isAttrChange && getAttr(mutationTarget as HTMLElement, attributeName || '')) || null;\r\n        const attributeChanged = isAttrChange && oldValue !== attributeValue;\r\n        const styleChangingAttrChanged =\r\n          inArray(finalStyleChangingAttributes, attributeName) && attributeChanged;\r\n\r\n        // if is content observer and something changed in children\r\n        if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\r\n          const contentAttrChanged = isAttributesType && attributeChanged;\r\n          const isNestedTarget =\r\n            contentAttrChanged &&\r\n            _nestedTargetSelector &&\r\n            is(mutationTarget, _nestedTargetSelector);\r\n          const baseAssertion = isNestedTarget\r\n            ? !ignoreTargetChange(mutationTarget, attributeName, oldValue, attributeValue)\r\n            : !isAttributesType || contentAttrChanged;\r\n          const contentFinalChanged =\r\n            baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n          each(addedNodes, (node) => push(totalChangedNodes, node));\r\n          each(removedNodes, (node) => push(totalChangedNodes, node));\r\n\r\n          contentChanged = contentChanged || contentFinalChanged;\r\n          childListChanged = childListChanged || isChildListType;\r\n        }\r\n        // if is target observer and target attr changed\r\n        if (\r\n          !isContentObserver &&\r\n          targetIsMutationTarget &&\r\n          attributeChanged &&\r\n          !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n        ) {\r\n          push(targetChangedAttrs, attributeName);\r\n          targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n        }\r\n      });\r\n\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector: string) =>\r\n        deduplicateArray(totalChangedNodes).reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n\r\n      if (isContentObserver) {\r\n        !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n        return [false] satisfies Parameters<DOMObserverCallback<true>> as Parameters<\r\n          DOMObserverCallback<ContentObserver>\r\n        >;\r\n      }\r\n\r\n      if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n        const args = [\r\n          deduplicateArray(targetChangedAttrs),\r\n          targetStyleChanged,\r\n        ] satisfies Parameters<DOMTargetObserverCallback> & Parameters<DOMObserverCallback<false>>;\r\n        !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\r\n\r\n        return args as Parameters<DOMObserverCallback<ContentObserver>>;\r\n      }\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(\r\n    bind(observerCallback, false)\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      mutationObserver.observe(target, {\r\n        attributes: true,\r\n        attributeOldValue: true,\r\n        attributeFilter: observedAttributes,\r\n        subtree: isContentObserver,\r\n        childList: isContentObserver,\r\n        characterData: isContentObserver,\r\n      });\r\n      isConnected = true;\r\n\r\n      return () => {\r\n        if (isConnected) {\r\n          destroyEventContentChange();\r\n          mutationObserver.disconnect();\r\n          isConnected = false;\r\n        }\r\n      };\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n        return observerCallback(true, mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  createCache,\r\n  createDOM,\r\n  runEachAndClear,\r\n  addEventListener,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  removeClass,\r\n  stopPropagation,\r\n  appendChildren,\r\n  getDirectionIsRTL,\r\n  domRectHasDimensions,\r\n  bind,\r\n  noop,\r\n  isArray,\r\n  convertScrollPosition,\r\n  scrollElementTo,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, sizeObserverPluginName } from '~/plugins';\r\nimport type { CacheValues } from '~/support';\r\nimport type { SizeObserverPlugin } from '~/plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  /** Whether direction changes should be observed. */\r\n  _direction?: boolean;\r\n  /** Whether appearing should be observed. */\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _directionIsRTLCache?: CacheValues<boolean>;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = () => () => void;\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const scrollAmount = 3333333;\r\n  const { _direction: observeDirectionChange, _appear: observeAppearChange } = options || {};\r\n  const sizeObserverPlugin =\r\n    getStaticPluginModuleInstance<typeof SizeObserverPlugin>(sizeObserverPluginName);\r\n  const { _rtlScrollBehavior: rtlScrollBehavior } = getEnvironment();\r\n  const getIsDirectionRTL = bind(getDirectionIsRTL, target);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | false>({\r\n    _initialValue: false,\r\n    _alwaysUpdateValues: true,\r\n  });\r\n\r\n  return () => {\r\n    const destroyFns: (() => void)[] = [];\r\n    const baseElements = createDOM(\r\n      `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n    );\r\n    const sizeObserver = baseElements[0] as HTMLElement;\r\n    const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n    const onSizeChangedCallbackProxy = (\r\n      sizeChangedContext?: CacheValues<boolean> | ResizeObserverEntry | boolean\r\n    ) => {\r\n      const isResizeObserverCall = sizeChangedContext instanceof ResizeObserverEntry;\r\n      const hasDirectionCache = !isResizeObserverCall && isArray(sizeChangedContext);\r\n\r\n      let skip = false;\r\n      let appear = false;\r\n      let doDirectionScroll = true; // always true if sizeChangedContext is Event (appear callback or RO. Polyfill)\r\n\r\n      // if triggered from RO.\r\n      if (isResizeObserverCall) {\r\n        const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n          sizeChangedContext.contentRect\r\n        );\r\n        const hasDimensions = domRectHasDimensions(currRContentRect);\r\n        const appeared = domRectAppeared(currRContentRect, prevContentRect);\r\n        const firstCall = !prevContentRect;\r\n        appear = firstCall || appeared;\r\n        skip = !appear && !hasDimensions; // skip if display is none or when window resize\r\n\r\n        doDirectionScroll = !skip; // direction scroll when not skipping\r\n      }\r\n      // else if its triggered with DirectionCache\r\n      else if (hasDirectionCache) {\r\n        [, doDirectionScroll] = sizeChangedContext; // direction scroll when DirectionCache changed, false otherwise\r\n      }\r\n      // else if it triggered with appear from polyfill\r\n      else {\r\n        appear = sizeChangedContext === true;\r\n      }\r\n\r\n      if (observeDirectionChange && doDirectionScroll) {\r\n        const rtl = hasDirectionCache ? sizeChangedContext[0] : getDirectionIsRTL(sizeObserver);\r\n        scrollElementTo(sizeObserver, {\r\n          x: convertScrollPosition(scrollAmount, scrollAmount, rtl && rtlScrollBehavior),\r\n          y: scrollAmount,\r\n        });\r\n      }\r\n\r\n      if (!skip) {\r\n        onSizeChangedCallback({\r\n          _directionIsRTLCache: hasDirectionCache ? sizeChangedContext : undefined,\r\n          _sizeChanged: !hasDirectionCache,\r\n          _appear: appear,\r\n        });\r\n      }\r\n    };\r\n\r\n    if (ResizeObserverConstructor) {\r\n      const resizeObserverInstance = new ResizeObserverConstructor((entries) =>\r\n        onSizeChangedCallbackProxy(entries.pop())\r\n      );\r\n      resizeObserverInstance.observe(listenerElement);\r\n      push(destroyFns, () => {\r\n        resizeObserverInstance.disconnect();\r\n      });\r\n    } else if (sizeObserverPlugin) {\r\n      const [pluginAppearCallback, pluginDestroyFns] = sizeObserverPlugin(\r\n        listenerElement,\r\n        onSizeChangedCallbackProxy,\r\n        observeAppearChange\r\n      );\r\n      push(\r\n        destroyFns,\r\n        concat(\r\n          [\r\n            addClass(sizeObserver, classNameSizeObserverAppear),\r\n            addEventListener(sizeObserver, 'animationstart', pluginAppearCallback),\r\n          ],\r\n          pluginDestroyFns\r\n        )\r\n      );\r\n    } else {\r\n      return noop;\r\n    }\r\n\r\n    if (observeDirectionChange) {\r\n      const [updateDirectionIsRTLCache] = createCache(\r\n        {\r\n          _initialValue: undefined,\r\n        },\r\n        getIsDirectionRTL\r\n      );\r\n\r\n      push(\r\n        destroyFns,\r\n        addEventListener(sizeObserver, 'scroll', (event) => {\r\n          const directionIsRTLCacheValues = updateDirectionIsRTLCache();\r\n          const [directionIsRTLCache, directionIsRTLCacheChanged, directionIsRTLCachePrevious] =\r\n            directionIsRTLCacheValues;\r\n          if (directionIsRTLCacheChanged) {\r\n            removeClass(listenerElement, 'ltr rtl');\r\n            addClass(listenerElement, directionIsRTLCache ? 'rtl' : 'ltr');\r\n\r\n            onSizeChangedCallbackProxy([\r\n              !!directionIsRTLCache,\r\n              directionIsRTLCacheChanged,\r\n              directionIsRTLCachePrevious,\r\n            ]);\r\n          }\r\n\r\n          stopPropagation(event);\r\n        })\r\n      );\r\n    }\r\n\r\n    return bind(runEachAndClear, push(destroyFns, appendChildren(target, sizeObserver)));\r\n  };\r\n};\r\n","import {\r\n  createDiv,\r\n  offsetSize,\r\n  runEachAndClear,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n  bind,\r\n} from '~/support';\r\nimport { createSizeObserver } from '~/observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from '~/classnames';\r\nimport type { WH, CacheValues } from '~/support';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  construct: () => () => void,\r\n  update: () => void | false | null | undefined | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n    (ioEntryOrSize as WH<number>).h === 0 ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue: IntersectionObserverEntry | WH<number> | undefined,\r\n    fromRecords?: boolean\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n      return (\r\n        heightIntrinsicChanged &&\r\n        !fromRecords &&\r\n        onTrinsicChangedCallback(heightIntrinsic) && [heightIntrinsic]\r\n      );\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    fromRecords: boolean,\r\n    entries: IntersectionObserverEntry[]\r\n  ) => triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n\r\n  return [\r\n    () => {\r\n      const destroyFns: (() => void)[] = [];\r\n\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          bind(intersectionObserverCallback, false),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(destroyFns, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = offsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        push(destroyFns, createSizeObserver(trinsicObserver, onSizeChanged)());\r\n        onSizeChanged();\r\n      }\r\n\r\n      return bind(runEachAndClear, push(destroyFns, appendChildren(target, trinsicObserver)));\r\n    },\r\n    () =>\r\n      intersectionObserverInstance &&\r\n      intersectionObserverCallback(true, intersectionObserverInstance.takeRecords()),\r\n  ];\r\n};\r\n","import {\r\n  ResizeObserverConstructor,\r\n  assignDeep,\r\n  closest,\r\n  createCache,\r\n  debounce,\r\n  getDirectionIsRTL,\r\n  each,\r\n  equalWH,\r\n  fractionalSize,\r\n  isArray,\r\n  isFunction,\r\n  isNumber,\r\n  isString,\r\n  keys,\r\n  liesBetween,\r\n  removeAttrs,\r\n  scrollSize,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n  inArray,\r\n  domRectAppeared,\r\n  concat,\r\n  getAttr,\r\n  setAttrs,\r\n} from '~/support';\r\nimport { createDOMObserver, createSizeObserver, createTrinsicObserver } from '~/observers';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbar,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueHostUpdating,\r\n  dataValueViewportArrange,\r\n  dataValueViewportOverflowVisible,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { Options, OptionsCheckFn } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { SizeObserverCallbackParams } from '~/observers';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { Setup, SetupUpdateInfo, StructureSetupState } from '~/setups';\r\nimport type { CacheValues, WH } from '~/support';\r\nimport type { PlainObject } from '~/typings';\r\n\r\nexport interface ObserversSetupState {\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface ObserversSetupUpdateInfo extends SetupUpdateInfo {\r\n  _takeRecords?: boolean;\r\n}\r\n\r\nexport type ObserversSetupUpdateHints = {\r\n  _sizeChanged?: boolean;\r\n  _directionChanged?: boolean;\r\n  _heightIntrinsicChanged?: boolean;\r\n  _hostMutation?: boolean;\r\n  _contentMutation?: boolean;\r\n  _appear?: boolean;\r\n  _scrollbarSizeChanged?: boolean;\r\n};\r\n\r\nexport type ObserversSetup = Setup<\r\n  ObserversSetupUpdateInfo,\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints\r\n>;\r\n\r\nexport const createObserversSetup = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  getCurrentOption: OptionsCheckFn<Options>,\r\n  onObserversUpdated: (updateHints: ObserversSetupUpdateHints) => void\r\n): ObserversSetup => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let updateContentMutationObserver: (() => void) | undefined;\r\n  let destroyContentMutationObserver: (() => void) | undefined;\r\n  let prevContentRect: DOMRectReadOnly | undefined;\r\n  let prevDirectionIsRTL: boolean | undefined;\r\n\r\n  const { _nativeScrollbarsHiding } = getEnvironment();\r\n\r\n  const hostSelector = `[${dataAttributeHost}]`;\r\n\r\n  // TODO: observer textarea attrs if textarea\r\n\r\n  const viewportSelector = `[${dataAttributeViewport}]`;\r\n  const viewportAttrsFromTarget = ['tabindex'];\r\n  const baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'];\r\n  const baseStyleChangingAttrs = ['id', 'class', 'style', 'open'];\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n\r\n  const state: ObserversSetupState = {\r\n    _heightIntrinsic: false,\r\n    _directionIsRTL: getDirectionIsRTL(_target),\r\n  };\r\n  const env = getEnvironment();\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const _undoViewportArrange =\r\n        scrollbarsHidingPlugin &&\r\n        scrollbarsHidingPlugin._viewportArrangement(\r\n          structureSetupElements,\r\n          structureSetupState,\r\n          state,\r\n          env,\r\n          getCurrentOption\r\n        )._undoViewportArrange;\r\n\r\n      const hasOver = _viewportHasClass(dataValueViewportOverflowVisible);\r\n      const isArranged = !_viewportIsTarget && _viewportHasClass(dataValueViewportArrange);\r\n      const scrollOffset = isArranged && getElmentScroll(_viewport);\r\n\r\n      _viewportAddRemoveClass(dataValueViewportOverflowVisible);\r\n      _viewportIsTarget && _viewportAddRemoveClass(dataValueHostUpdating, true);\r\n      const redoViewportArrange = isArranged && _undoViewportArrange && _undoViewportArrange()[0];\r\n\r\n      const contentScroll = scrollSize(_content);\r\n      const viewportScroll = scrollSize(_viewport);\r\n      const fractional = fractionalSize(_viewport);\r\n\r\n      _viewportAddRemoveClass(dataValueViewportOverflowVisible, hasOver);\r\n      _viewportIsTarget && _viewportAddRemoveClass(dataValueHostUpdating);\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      scrollElementTo(_viewport, scrollOffset);\r\n\r\n      return {\r\n        w: viewportScroll.w + contentScroll.w + fractional.w,\r\n        h: viewportScroll.h + contentScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : concat(baseStyleChangingAttrs, baseStyleChangingAttrsTextarea);\r\n\r\n  const onObserversUpdatedDebounced = debounce(onObserversUpdated, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        concat(keys(prevObj), keys(currObj)).reduce((obj, key) => {\r\n          obj[key] = prevObj[key as keyof typeof prevObj] || currObj[key as keyof typeof currObj];\r\n          return obj;\r\n        }, {} as PlainObject),\r\n      ] as [Partial<ObserversSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const setDirectionWhenViewportIsTarget = (updateHints: ObserversSetupUpdateHints) => {\r\n    if (_viewportIsTarget) {\r\n      const newDirectionIsRTL = getDirectionIsRTL(_target);\r\n      assignDeep(updateHints, { _directionChanged: prevDirectionIsRTL !== newDirectionIsRTL });\r\n      assignDeep(state, { _directionIsRTL: newDirectionIsRTL });\r\n      prevDirectionIsRTL = newDirectionIsRTL;\r\n    }\r\n  };\r\n\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (inArray(viewportAttrsFromTarget, attribute)) {\r\n        const hostAttr = getAttr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          setAttrs(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttrs(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const onTrinsicChanged = (\r\n    heightIntrinsicCache: CacheValues<boolean>,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n\r\n    assignDeep(state, { _heightIntrinsic: heightIntrinsic });\r\n    !fromRecords && onObserversUpdated(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onSizeChanged = ({\r\n    _sizeChanged,\r\n    _directionIsRTLCache,\r\n    _appear,\r\n  }: SizeObserverCallbackParams) => {\r\n    const exclusiveSizeChange = _sizeChanged && !_appear && !_directionIsRTLCache;\r\n    const updateFn =\r\n      // use debounceed update:\r\n      // if native scrollbars hiding is supported\r\n      // and if the update is more than just a exclusive sizeChange (e.g. size change + appear, or size change + direction)\r\n      !exclusiveSizeChange && _nativeScrollbarsHiding\r\n        ? onObserversUpdatedDebounced\r\n        : onObserversUpdated;\r\n\r\n    const [directionIsRTL, directionIsRTLChanged] = _directionIsRTLCache || [];\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _sizeChanged: _sizeChanged || _appear,\r\n      _appear,\r\n      _directionChanged: directionIsRTLChanged,\r\n    };\r\n\r\n    setDirectionWhenViewportIsTarget(updateHints);\r\n\r\n    _directionIsRTLCache && assignDeep(state, { _directionIsRTL: directionIsRTL });\r\n\r\n    updateFn(updateHints);\r\n  };\r\n\r\n  const onContentMutation = (\r\n    contentChangedThroughEvent: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [, _contentMutation] = updateContentSizeCache();\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _contentMutation,\r\n    };\r\n\r\n    setDirectionWhenViewportIsTarget(updateHints);\r\n\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent ? onObserversUpdated : onObserversUpdatedDebounced;\r\n\r\n    _contentMutation && !fromRecords && updateFn(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const updateHints: ObserversSetupUpdateHints = {\r\n      _hostMutation: targetStyleChanged,\r\n    };\r\n\r\n    setDirectionWhenViewportIsTarget(updateHints);\r\n\r\n    if (targetStyleChanged && !fromRecords) {\r\n      onObserversUpdatedDebounced(updateHints);\r\n    } else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const { _addResizeListener } = env;\r\n  const [constructTrinsicObserver, updateTrinsicObserver] = _content\r\n    ? createTrinsicObserver(_host, onTrinsicChanged)\r\n    : [];\r\n\r\n  const constructSizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n      _direction: true,\r\n    });\r\n\r\n  const [constructHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: concat(baseStyleChangingAttrs, viewportAttrsFromTarget),\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor((entries) => {\r\n      const currContentRect = entries[entries.length - 1].contentRect;\r\n      onSizeChanged({\r\n        _sizeChanged: true,\r\n        _appear: domRectAppeared(currContentRect, prevContentRect),\r\n      });\r\n      prevContentRect = currContentRect;\r\n    });\r\n\r\n  return [\r\n    () => {\r\n      // order is matter!\r\n      updateViewportAttrsFromHost();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n      const destroySizeObserver = constructSizeObserver && constructSizeObserver();\r\n      const destroyTrinsicObserver = constructTrinsicObserver && constructTrinsicObserver();\r\n      const destroyHostMutationObserver = constructHostMutationObserver();\r\n      const removeResizeListener = _addResizeListener((_scrollbarSizeChanged) => {\r\n        const [, _contentMutation] = updateContentSizeCache();\r\n        onObserversUpdatedDebounced({ _scrollbarSizeChanged, _contentMutation });\r\n      });\r\n\r\n      return () => {\r\n        viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n        destroySizeObserver && destroySizeObserver();\r\n        destroyTrinsicObserver && destroyTrinsicObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n        destroyHostMutationObserver();\r\n        removeResizeListener();\r\n      };\r\n    },\r\n    ({ _checkOption, _takeRecords, _force }) => {\r\n      const updateHints: ObserversSetupUpdateHints = {};\r\n\r\n      const [ignoreMutation] = _checkOption('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = _checkOption('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = _checkOption('update.elementEvents');\r\n      const [debounceValue, debounceChanged] = _checkOption('update.debounce');\r\n      const contentMutationObserverChanged = elementEventsChanged || attributesChanged;\r\n      const takeRecords = _takeRecords || _force;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (contentMutationObserverChanged) {\r\n        updateContentMutationObserver && updateContentMutationObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n\r\n        const [construct, update] = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: concat(contentMutationObserverAttr, attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target: mutationTarget, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(mutationTarget, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(mutationTarget, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n\r\n        destroyContentMutationObserver = construct();\r\n        updateContentMutationObserver = update;\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        onObserversUpdatedDebounced._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n\r\n      if (takeRecords) {\r\n        const hostUpdateResult = updateHostMutationObserver();\r\n        const trinsicUpdateResult = updateTrinsicObserver && updateTrinsicObserver();\r\n        const contentUpdateResult =\r\n          updateContentMutationObserver && updateContentMutationObserver();\r\n\r\n        hostUpdateResult &&\r\n          assignDeep(\r\n            updateHints,\r\n            onHostMutation(hostUpdateResult[0], hostUpdateResult[1], takeRecords)\r\n          );\r\n\r\n        trinsicUpdateResult &&\r\n          assignDeep(updateHints, onTrinsicChanged(trinsicUpdateResult[0], takeRecords));\r\n\r\n        contentUpdateResult &&\r\n          assignDeep(updateHints, onContentMutation(contentUpdateResult[0], takeRecords));\r\n      }\r\n\r\n      setDirectionWhenViewportIsTarget(updateHints);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n  ];\r\n};\r\n","import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  getDirectionIsRTL,\r\n  each,\r\n  getTrasformTranslateValue,\r\n  isBoolean,\r\n  isEmptyArray,\r\n  parent,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  scrollT,\r\n  setT,\r\n  bind,\r\n  getElmentScroll,\r\n  inArray,\r\n  strWidth,\r\n  strHeight,\r\n  concat,\r\n  assignDeep,\r\n  ratioToCssPercent,\r\n  numberToCssPx,\r\n  setStyles,\r\n  createOrKeepArray,\r\n  getRawScrollBounds,\r\n  getRawScrollRatio,\r\n  getBoundingClientRect,\r\n  capNumber,\r\n} from '~/support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarTransitionless,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\r\nimport type { RTLScrollBehavior } from '~/support';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { StructureSetupState } from '../structureSetup';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollTimeline: AnimationTimeline | undefined;\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _style: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: () => void;\r\n  _refreshScrollbarsHandleOffset: () => void;\r\n  _refreshScrollbarsScrollbarOffset: () => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => () => void\r\n];\r\n\r\ntype PotentialAnimation = Animation | false | null | undefined;\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const { _getDefaultInitialization, _rtlScrollBehavior } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const elementAnimations = new Map<HTMLElement, PotentialAnimation[]>();\r\n  const initScrollTimeline = (axis: 'x' | 'y') =>\r\n    scrollT &&\r\n    new scrollT({\r\n      source: _scrollOffsetElement,\r\n      axis,\r\n    });\r\n  const scrollTimelineX = initScrollTimeline('x');\r\n  const scrollTimelineY = initScrollTimeline('y');\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n\r\n  /**\r\n   * Gets the scrollbar handle length ratio.\r\n   * @param isHorizontal Whether the axis is horizontal.\r\n   * @param scrollbarStructure The scrollbar structure. Only passed when the length ratio is calculated for the offset ratio (respects handle min. & max. size via. css)\r\n   * @returns The scrollbar handle length ratio.\r\n   */\r\n  const getScrollbarHandleLengthRatio = (\r\n    isHorizontal?: boolean,\r\n    scrollbarStructure?: ScrollbarStructure\r\n  ) => {\r\n    if (scrollbarStructure) {\r\n      const axis = isHorizontal ? strWidth : strHeight;\r\n      const { _track, _handle } = scrollbarStructure;\r\n\r\n      const handleSize = getBoundingClientRect(_handle)[axis];\r\n      const trackSize = getBoundingClientRect(_track)[axis];\r\n\r\n      return capNumber(0, 1, handleSize / trackSize || 0);\r\n    }\r\n\r\n    const axis = isHorizontal ? 'x' : 'y';\r\n    const { _overflowAmount, _overflowEdge } = structureSetupState;\r\n\r\n    const viewportSize = _overflowEdge[axis];\r\n    const overflowAmount = _overflowAmount[axis];\r\n\r\n    return capNumber(0, 1, viewportSize / (viewportSize + overflowAmount) || 0);\r\n  };\r\n\r\n  /**\r\n   * Gets the scrollbar handle offset ratio.\r\n   * @param structureSetupState The structure setup state.\r\n   * @param scrollbarStructure The scrollbar structure.\r\n   * @param scrollPercent The scroll percent 0..1.\r\n   * @param isHorizontal Whether the axis is horizontal.\r\n   * @returns The scrollbar handle offset ratio.\r\n   */\r\n  const getScrollbarHandleOffsetRatio = (\r\n    scrollbarStructure: ScrollbarStructure,\r\n    scrollPercent: number,\r\n    isHorizontal?: boolean,\r\n    rtlScrollBehavior?: RTLScrollBehavior\r\n  ) => {\r\n    const lengthRatio = getScrollbarHandleLengthRatio(isHorizontal, scrollbarStructure);\r\n\r\n    return (\r\n      (1 / lengthRatio) *\r\n        (1 - lengthRatio) *\r\n        (rtlScrollBehavior ? 1 - scrollPercent : scrollPercent) || 0\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Adds additional directional keyframes to the passed keyframes.\r\n   * @param keyframes The keyframes.\r\n   * @param directionRTL Whether the direction is RTL.\r\n   * @returns The passed keyframes with additional directional keyframes.\r\n   */\r\n  const addDirectionRTLKeyframes = (\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    directionRTL?: boolean | RTLScrollBehavior\r\n  ) =>\r\n    assignDeep(\r\n      keyframes,\r\n      directionRTL\r\n        ? {\r\n            clear: ['left'], // dummy keyframe for direction rtl animation because of chrome bug\r\n          }\r\n        : {}\r\n    );\r\n\r\n  /**\r\n   * Cancels the animations of the passed elements or of all elements if no elements are passed.\r\n   * @param elements The elements of which the animation shall be canceled.\r\n   */\r\n  const cancelElementAnimations = (elements?: HTMLElement | HTMLElement[]) => {\r\n    elementAnimations.forEach((currAnimations, element) => {\r\n      const doCancel = elements ? inArray(createOrKeepArray(elements), element) : true;\r\n      if (doCancel) {\r\n        each(currAnimations || [], (animation) => {\r\n          animation && animation.cancel();\r\n        });\r\n        elementAnimations.delete(element);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Sets of overwrites the animation of the passed element.\r\n   * @param element The element of which the animation shall be set.\r\n   * @param timeline The animation timeline of the animation.\r\n   * @param keyframes The keyframes of the animation.\r\n   * @param composite The composite information of the animation.\r\n   */\r\n  const setElementAnimation = (\r\n    element: HTMLElement,\r\n    timeline: AnimationTimeline,\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    composite?: CompositeOperation\r\n  ) => {\r\n    const activeAnimations = elementAnimations.get(element) || [];\r\n    const activeAnimation = activeAnimations.find(\r\n      (animation) => animation && animation.timeline === timeline\r\n    );\r\n\r\n    if (activeAnimation) {\r\n      activeAnimation.effect = new KeyframeEffect(element, keyframes, { composite });\r\n    } else {\r\n      elementAnimations.set(\r\n        element,\r\n        concat(activeAnimations, [\r\n          element.animate(keyframes, {\r\n            timeline,\r\n            composite,\r\n          }),\r\n        ])\r\n      );\r\n    }\r\n  };\r\n\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      setStyles(elm, styles);\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleLength = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    scrollbarStyle(scrollbarStructures, (structure) => {\r\n      const { _handle } = structure;\r\n      return [\r\n        _handle,\r\n        {\r\n          [isHorizontal ? strWidth : strHeight]: ratioToCssPercent(\r\n            getScrollbarHandleLengthRatio(isHorizontal)\r\n          ),\r\n        },\r\n      ];\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleOffset = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    const { _overflowAmount } = structureSetupState;\r\n    const overflowAmount = isHorizontal ? _overflowAmount.x : _overflowAmount.y;\r\n    const getTransformValue = (\r\n      structure: ScrollbarStructure,\r\n      rawScrollPosition: number,\r\n      rtlScrollBehavior: RTLScrollBehavior\r\n    ) =>\r\n      getTrasformTranslateValue(\r\n        ratioToCssPercent(\r\n          getScrollbarHandleOffsetRatio(\r\n            structure,\r\n            getRawScrollRatio(rawScrollPosition, overflowAmount, rtlScrollBehavior),\r\n            isHorizontal,\r\n            rtlScrollBehavior\r\n          )\r\n        ),\r\n        isHorizontal\r\n      );\r\n    if (scrollTimelineX && scrollTimelineY) {\r\n      each(scrollbarStructures, (structure: ScrollbarStructure) => {\r\n        const { _scrollbar, _handle } = structure;\r\n        const rtlScrollBehavior =\r\n          isHorizontal && getDirectionIsRTL(_scrollbar) && _rtlScrollBehavior;\r\n\r\n        setElementAnimation(\r\n          _handle,\r\n          isHorizontal ? scrollTimelineX : scrollTimelineY,\r\n          addDirectionRTLKeyframes(\r\n            {\r\n              transform: getRawScrollBounds(overflowAmount, rtlScrollBehavior).map((bound) =>\r\n                getTransformValue(structure, bound, rtlScrollBehavior)\r\n              ),\r\n            },\r\n            rtlScrollBehavior\r\n          )\r\n        );\r\n      });\r\n    } else {\r\n      const scroll = getElmentScroll(_scrollOffsetElement);\r\n      scrollbarStyle(scrollbarStructures, (structure) => {\r\n        const { _handle, _scrollbar } = structure;\r\n        return [\r\n          _handle,\r\n          {\r\n            transform: getTransformValue(\r\n              structure,\r\n              isHorizontal ? scroll.x : scroll.y,\r\n              isHorizontal && getDirectionIsRTL(_scrollbar) && _rtlScrollBehavior\r\n            ),\r\n          },\r\n        ];\r\n      });\r\n    }\r\n  };\r\n  const doRefreshScrollbarOffset = (scrollbar: HTMLElement) =>\r\n    _viewportIsTarget && !_isBody && parent(scrollbar) === _viewport;\r\n\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = () => {\r\n    scrollbarStructureRefreshHandleLength(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleLength(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsHandleOffset = () => {\r\n    scrollbarStructureRefreshHandleOffset(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleOffset(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsScrollbarOffset = () => {\r\n    if (_viewportIsTarget) {\r\n      const { _overflowAmount } = structureSetupState;\r\n      const cushion = 0.5; // otherwise it sometimes happens that scrolling to 100% will cause the scrollbars to disappear\r\n      if (scrollTimelineX && scrollTimelineY) {\r\n        each(concat(verticalScrollbars, horizontalScrollbars), ({ _scrollbar }) => {\r\n          if (doRefreshScrollbarOffset(_scrollbar)) {\r\n            const setScrollbarElementAnimation = (\r\n              timeline: AnimationTimeline,\r\n              overflowAmount: number,\r\n              isHorizontal?: boolean\r\n            ) => {\r\n              const rtlScrollBehavior =\r\n                isHorizontal && getDirectionIsRTL(_scrollbar) && _rtlScrollBehavior;\r\n              setElementAnimation(\r\n                _scrollbar,\r\n                timeline,\r\n                addDirectionRTLKeyframes(\r\n                  {\r\n                    transform: getRawScrollBounds(overflowAmount - cushion, rtlScrollBehavior).map(\r\n                      (bound) => getTrasformTranslateValue(numberToCssPx(bound), isHorizontal)\r\n                    ),\r\n                  },\r\n                  rtlScrollBehavior\r\n                ),\r\n                'add'\r\n              );\r\n            };\r\n\r\n            setScrollbarElementAnimation(scrollTimelineX, _overflowAmount.x, true);\r\n            setScrollbarElementAnimation(scrollTimelineY, _overflowAmount.y);\r\n          } else {\r\n            cancelElementAnimations(_scrollbar);\r\n          }\r\n        });\r\n      } else {\r\n        const scroll = getElmentScroll(_scrollOffsetElement);\r\n        const styleScrollbarPosition = (structure: ScrollbarStructure) => {\r\n          const { _scrollbar } = structure;\r\n          const elm = doRefreshScrollbarOffset(_scrollbar) && _scrollbar;\r\n          const getTranslateValue = (\r\n            axisScroll: number,\r\n            axisOverflowAmount: number,\r\n            rtlScrollBehavior?: RTLScrollBehavior\r\n          ) => {\r\n            const percent = getRawScrollRatio(axisScroll, axisOverflowAmount, rtlScrollBehavior);\r\n            const px = axisOverflowAmount * percent;\r\n            return numberToCssPx(rtlScrollBehavior ? -px : px);\r\n          };\r\n\r\n          return [\r\n            elm,\r\n            {\r\n              transform: elm\r\n                ? getTrasformTranslateValue({\r\n                    x: getTranslateValue(\r\n                      scroll.x,\r\n                      _overflowAmount.x,\r\n                      getDirectionIsRTL(_scrollbar) && _rtlScrollBehavior\r\n                    ),\r\n                    y: getTranslateValue(scroll.y, _overflowAmount.y),\r\n                  })\r\n                : '',\r\n            },\r\n          ] as [HTMLElement | false, StyleObject];\r\n        };\r\n        scrollbarStyle(horizontalScrollbars, styleScrollbarPosition);\r\n        scrollbarStyle(verticalScrollbars, styleScrollbarPosition);\r\n      }\r\n    }\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const arrToPush = isHorizontal ? horizontalScrollbars : verticalScrollbars;\r\n    const transitionlessClass = isEmptyArray(arrToPush) ? classNameScrollbarTransitionless : '';\r\n    const scrollbar = createDiv(\r\n      `${classNameScrollbar} ${scrollbarClassName} ${transitionlessClass}`\r\n    );\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n\r\n    push(arrToPush, result);\r\n    push(destroyFns, [\r\n      appendChildren(scrollbar, track),\r\n      appendChildren(track, handle),\r\n      bind(removeElements, scrollbar),\r\n      cancelElementAnimations,\r\n      scrollbarsSetupEvents(\r\n        result,\r\n        scrollbarsAddRemoveClass,\r\n        scrollbarStructureRefreshHandleOffset,\r\n        isHorizontal\r\n      ),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = bind(generateScrollbarDOM, true);\r\n  const generateVerticalScrollbarStructure = bind(generateScrollbarDOM, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    setT(() => {\r\n      scrollbarsAddRemoveClass(classNameScrollbarTransitionless);\r\n    }, 300);\r\n\r\n    return bind(runEachAndClear, destroyFns);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _refreshScrollbarsScrollbarOffset: refreshScrollbarsScrollbarOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollTimeline: scrollTimelineX,\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollTimeline: scrollTimelineY,\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  offsetSize,\r\n  addEventListener,\r\n  preventDefault,\r\n  runEachAndClear,\r\n  stopPropagation,\r\n  selfClearTimeout,\r\n  parent,\r\n  closest,\r\n  push,\r\n  bind,\r\n  mathRound,\r\n  strWidth,\r\n  strHeight,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n  addAttrClass,\r\n} from '~/support';\r\nimport { clickScrollPluginModuleName, getStaticPluginModuleInstance } from '~/plugins';\r\nimport {\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarInteraction,\r\n  classNameScrollbarWheel,\r\n  dataAttributeHost,\r\n  dataValueHostScrollbarPressed,\r\n} from '~/classnames';\r\nimport type { ClickScrollPlugin } from '~/plugins';\r\nimport type { ReadonlyOptions } from '~/options';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarsSetupElementsObj, ScrollbarStructure } from './scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\n\r\nexport type ScrollbarsSetupEvents = (\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\r\n  refreshScrollbarStructuresHandleOffset: (\r\n    scrollbarStructure: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => void,\r\n  isHorizontal?: boolean\r\n) => () => void;\r\n\r\nexport const createScrollbarsSetupEvents = (\r\n  options: ReadonlyOptions,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState\r\n): ScrollbarsSetupEvents => {\r\n  const { _host, _scrollOffsetElement, _documentElm } = structureSetupElements;\r\n\r\n  return (\r\n    scrollbarStructure,\r\n    scrollbarsAddRemoveClass,\r\n    refreshScrollbarStructuresHandleOffset,\r\n    isHorizontal\r\n  ) => {\r\n    const { _scrollbar, _track, _handle } = scrollbarStructure;\r\n    const [wheelTimeout, clearWheelTimeout] = selfClearTimeout(333);\r\n    const [requestHandleTransitionAnimationFrame, cancelHandleTransitionTimeout] =\r\n      selfClearTimeout();\r\n    const refreshHandleOffsetTransition = bind(\r\n      refreshScrollbarStructuresHandleOffset,\r\n      [scrollbarStructure],\r\n      isHorizontal\r\n    );\r\n    const scrollByFn = !!_scrollOffsetElement.scrollBy;\r\n\r\n    const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}` as 'clientX' | 'clientY';\r\n    const widthHeightKey = isHorizontal ? strWidth : strHeight;\r\n    const leftTopKey = isHorizontal ? 'left' : 'top';\r\n    const whKey = isHorizontal ? 'w' : 'h';\r\n    const xyKey = isHorizontal ? 'x' : 'y';\r\n\r\n    const isAffectingTransition = (event: TransitionEvent) =>\r\n      event.propertyName.indexOf(widthHeightKey) > -1;\r\n\r\n    const createInteractiveScrollEvents = () => {\r\n      const releasePointerCaptureEvents = 'pointerup pointerleave pointercancel lostpointercapture';\r\n\r\n      const createRelativeHandleMove =\r\n        (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\r\n          const { _overflowAmount } = structureSetupState;\r\n          const handleTrackDiff = offsetSize(_track)[whKey] - offsetSize(_handle)[whKey];\r\n          const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\r\n          const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\r\n\r\n          scrollElementTo(_scrollOffsetElement, {\r\n            [xyKey]: mouseDownScroll + scrollDelta,\r\n          });\r\n        };\r\n\r\n      return addEventListener(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\r\n        const isDragScroll =\r\n          closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\r\n        const pointerCaptureElement = isDragScroll ? _handle : _track;\r\n\r\n        const scrollbarOptions = options.scrollbars;\r\n        const { button, isPrimary, pointerType } = pointerDownEvent;\r\n        const { pointers } = scrollbarOptions;\r\n\r\n        const continuePointerDown =\r\n          button === 0 &&\r\n          isPrimary &&\r\n          scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'] &&\r\n          (pointers || []).includes(pointerType);\r\n\r\n        if (continuePointerDown) {\r\n          const instantClickScroll = !isDragScroll && pointerDownEvent.shiftKey;\r\n          const getHandleRect = bind(getBoundingClientRect, _handle);\r\n          const getTrackRect = bind(getBoundingClientRect, _track);\r\n          const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\r\n            (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\r\n          const axisScale =\r\n            mathRound(getBoundingClientRect(_scrollOffsetElement)[widthHeightKey]) /\r\n              offsetSize(_scrollOffsetElement)[whKey] || 1;\r\n          const moveHandleRelative = createRelativeHandleMove(\r\n            getElmentScroll(_scrollOffsetElement)[xyKey] || 0,\r\n            1 / axisScale\r\n          );\r\n          const pointerDownOffset = pointerDownEvent[clientXYKey];\r\n          const handleRect = getHandleRect();\r\n          const trackRect = getTrackRect();\r\n          const handleLength = handleRect[widthHeightKey];\r\n          const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\r\n          const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\r\n          const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\r\n          const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            runEachAndClear(offFns);\r\n            pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\r\n          };\r\n          const removeAttrClass = addAttrClass(\r\n            _host,\r\n            dataAttributeHost,\r\n            dataValueHostScrollbarPressed\r\n          );\r\n\r\n          const offFns = [\r\n            removeAttrClass,\r\n            addEventListener(_documentElm, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_documentElm, 'selectstart', (event: Event) => preventDefault(event), {\r\n              _passive: false,\r\n            }),\r\n            addEventListener(_track, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_track, 'pointermove', (pointerMoveEvent: PointerEvent) => {\r\n              const relativeMovement = pointerMoveEvent[clientXYKey] - pointerDownOffset;\r\n\r\n              if (isDragScroll || instantClickScroll) {\r\n                moveHandleRelative(startOffset + relativeMovement);\r\n              }\r\n            }),\r\n          ];\r\n\r\n          pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\r\n\r\n          if (instantClickScroll) {\r\n            moveHandleRelative(startOffset);\r\n          } else if (!isDragScroll) {\r\n            const animateClickScroll = getStaticPluginModuleInstance<typeof ClickScrollPlugin>(\r\n              clickScrollPluginModuleName\r\n            );\r\n\r\n            animateClickScroll &&\r\n              push(\r\n                offFns,\r\n                animateClickScroll(\r\n                  moveHandleRelative,\r\n                  getHandleOffset,\r\n                  startOffset,\r\n                  handleLength,\r\n                  relativeTrackPointerOffset\r\n                )\r\n              );\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    let wheelScrollBy = true;\r\n\r\n    return bind(runEachAndClear, [\r\n      addEventListener(_scrollbar, 'pointerenter', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\r\n      }),\r\n      addEventListener(_scrollbar, 'pointerleave pointercancel', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, false);\r\n      }),\r\n      addEventListener(\r\n        _scrollbar,\r\n        'wheel',\r\n        (wheelEvent: WheelEvent) => {\r\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\r\n\r\n          // the first wheel event is swallowed, simulate scroll to compensate for it\r\n          if (scrollByFn && wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === _host) {\r\n            _scrollOffsetElement.scrollBy({\r\n              left: deltaX,\r\n              top: deltaY,\r\n              behavior: 'smooth',\r\n            });\r\n          }\r\n\r\n          wheelScrollBy = false;\r\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\r\n          wheelTimeout(() => {\r\n            wheelScrollBy = true;\r\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\r\n          });\r\n\r\n          preventDefault(wheelEvent);\r\n        },\r\n        { _passive: false, _capture: true }\r\n      ),\r\n      addEventListener(_handle, 'transitionstart', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          const animateHandleOffset = () => {\r\n            refreshHandleOffsetTransition();\r\n            requestHandleTransitionAnimationFrame(animateHandleOffset);\r\n          };\r\n          animateHandleOffset();\r\n        }\r\n      }),\r\n      addEventListener(_handle, 'transitionend transitioncancel', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          cancelHandleTransitionTimeout();\r\n          refreshHandleOffsetTransition();\r\n        }\r\n      }),\r\n      // rootClickStopPropagationEvent\r\n      addEventListener(\r\n        _scrollbar,\r\n        'mousedown',\r\n        bind(addEventListener, _documentElm, 'click', stopPropagation, {\r\n          _once: true,\r\n          _capture: true,\r\n        }),\r\n        { _capture: true }\r\n      ),\r\n      createInteractiveScrollEvents(),\r\n      clearWheelTimeout,\r\n      cancelHandleTransitionTimeout,\r\n    ]);\r\n  };\r\n};\r\n","import { bind, noop, addEventListener, push, runEachAndClear, selfClearTimeout } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHideHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n  classNameScrollbarAutoHide,\r\n} from '~/classnames';\r\nimport { type ReadonlyOptions } from '~/options';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n  StructureSetupState,\r\n  StructureSetupUpdateHints,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport { createScrollbarsSetupElements } from './scrollbarsSetup.elements';\r\nimport { createScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n  _structureUpdateHints?: StructureSetupUpdateHints;\r\n}\r\n\r\nexport type ScrollbarsSetup = [\r\n  ...Setup<ScrollbarsSetupUpdateInfo, ScrollbarsSetupState, void>,\r\n  /** The elements created by the scrollbars setup. */\r\n  ScrollbarsSetupElementsObj\r\n];\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  observersSetupState: ObserversSetupState,\r\n  structureSetupState: StructureSetupState,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onScroll: (event: Event) => void\r\n): ScrollbarsSetup => {\r\n  let autoHideIsMove: boolean | undefined;\r\n  let autoHideIsLeave: boolean | undefined;\r\n  let autoHideNotNever: boolean | undefined;\r\n  let mouseInHost: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let instanceAutoHideSuspendScrollDestroyFn = noop;\r\n  let instanceAutoHideDelay = 0;\r\n\r\n  const [requestMouseMoveAnimationFrame, cancelMouseMoveAnimationFrame] = selfClearTimeout();\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [scrollTimeout, clearScrollTimeout] = selfClearTimeout(100);\r\n  const [auotHideMoveTimeout, clearAutoHideTimeout] = selfClearTimeout(100);\r\n  const [autoHideSuspendTimeout, clearAutoHideSuspendTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoTimeout] = selfClearTimeout(() => instanceAutoHideDelay);\r\n  const [elements, appendElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    createScrollbarsSetupEvents(options, structureSetupElements, structureSetupState)\r\n  );\r\n  const { _host, _scrollEventElement, _isBody } = structureSetupElements;\r\n  const {\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n    _refreshScrollbarsScrollbarOffset,\r\n  } = elements;\r\n  const manageAutoHideSuspension = (add: boolean) => {\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, true);\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, false);\r\n  };\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHideHidden);\r\n    } else {\r\n      const hide = bind(_scrollbarsAddRemoveClass, classNameScrollbarAutoHideHidden, true);\r\n      if (instanceAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n\r\n  // needed to not fire unnecessary operations for pointer events on safari which will cause side effects: https://github.com/KingSora/OverlayScrollbars/issues/560\r\n  const isHoverablePointerType = (event: PointerEvent) => event.pointerType === 'mouse';\r\n\r\n  const onHostMouseEnter = (event: PointerEvent) => {\r\n    if (isHoverablePointerType(event)) {\r\n      mouseInHost = autoHideIsLeave;\r\n      mouseInHost && manageScrollbarsAutoHide(true);\r\n    }\r\n  };\r\n\r\n  const destroyFns: (() => void)[] = [\r\n    clearScrollTimeout,\r\n    clearAutoTimeout,\r\n    clearAutoHideTimeout,\r\n    clearAutoHideSuspendTimeout,\r\n    cancelScrollAnimationFrame,\r\n    cancelMouseMoveAnimationFrame,\r\n    () => instanceAutoHideSuspendScrollDestroyFn(),\r\n\r\n    addEventListener(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    addEventListener(_host, 'pointerenter', onHostMouseEnter),\r\n    addEventListener(_host, 'pointerleave', (event: PointerEvent) => {\r\n      if (isHoverablePointerType(event)) {\r\n        mouseInHost = false;\r\n        autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n      }\r\n    }),\r\n    addEventListener(_host, 'pointermove', (event: PointerEvent) => {\r\n      isHoverablePointerType(event) &&\r\n        autoHideIsMove &&\r\n        requestMouseMoveAnimationFrame(() => {\r\n          clearScrollTimeout();\r\n          manageScrollbarsAutoHide(true);\r\n          auotHideMoveTimeout(() => {\r\n            autoHideIsMove && manageScrollbarsAutoHide(false);\r\n          });\r\n        });\r\n    }),\r\n    addEventListener(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset();\r\n\r\n        autoHideNotNever && manageScrollbarsAutoHide(true);\r\n        scrollTimeout(() => {\r\n          autoHideNotNever && !mouseInHost && manageScrollbarsAutoHide(false);\r\n        });\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _refreshScrollbarsScrollbarOffset();\r\n    }),\r\n  ];\r\n\r\n  return [\r\n    () => bind(runEachAndClear, push(destroyFns, appendElements())),\r\n    ({ _checkOption, _force, _observersUpdateHints, _structureUpdateHints }) => {\r\n      const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n        _structureUpdateHints || {};\r\n      const { _directionChanged, _appear } = _observersUpdateHints || {};\r\n      const { _directionIsRTL } = observersSetupState;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const { _overflowAmount, _overflowStyle, _hasOverflow } = structureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        _checkOption('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = _checkOption('scrollbars.theme');\r\n      const [visibility, visibilityChanged] = _checkOption('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] = _checkOption('scrollbars.autoHide');\r\n      const [autoHideSuspend, autoHideSuspendChanged] = _checkOption('scrollbars.autoHideSuspend');\r\n      const [autoHideDelay] = _checkOption('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = _checkOption('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = _checkOption('scrollbars.clickScroll');\r\n      const trulyAppeared = _appear && !_force;\r\n      const hasOverflow = _hasOverflow.x || _hasOverflow.y;\r\n      const updateScrollbars =\r\n        _overflowEdgeChanged || _overflowAmountChanged || _directionChanged || _force;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (overflowStyle: OverflowStyle, isHorizontal: boolean) => {\r\n        const isVisible =\r\n          visibility === 'visible' || (visibility === 'auto' && overflowStyle === 'scroll');\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n        return isVisible;\r\n      };\r\n\r\n      instanceAutoHideDelay = autoHideDelay;\r\n\r\n      if (trulyAppeared) {\r\n        if (autoHideSuspend && hasOverflow) {\r\n          manageAutoHideSuspension(false);\r\n          instanceAutoHideSuspendScrollDestroyFn();\r\n          autoHideSuspendTimeout(() => {\r\n            instanceAutoHideSuspendScrollDestroyFn = addEventListener(\r\n              _scrollEventElement,\r\n              'scroll',\r\n              bind(manageAutoHideSuspension, true),\r\n              {\r\n                _once: true,\r\n              }\r\n            );\r\n          });\r\n        } else {\r\n          manageAutoHideSuspension(true);\r\n        }\r\n      }\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n\r\n      if (autoHideSuspendChanged && !autoHideSuspend) {\r\n        manageAutoHideSuspension(true);\r\n      }\r\n\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideNotNever = autoHide !== 'never';\r\n        manageScrollbarsAutoHide(!autoHideNotNever, true);\r\n      }\r\n\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, clickScroll);\r\n      }\r\n\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(_overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(_overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n\r\n      if (updateScrollbars) {\r\n        // order is matter! length has to be refreshed before offset\r\n        _refreshScrollbarsHandleLength();\r\n        _refreshScrollbarsHandleOffset();\r\n        _refreshScrollbarsScrollbarOffset();\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    {},\r\n    elements,\r\n  ];\r\n};\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  parent,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  keys,\r\n  removeAttrs,\r\n  hasAttrClass,\r\n  addEventListener,\r\n  bind,\r\n  inArray,\r\n  addAttrClass,\r\n  addRemoveAttrClass,\r\n  setAttrs,\r\n  getAttr,\r\n  noop,\r\n  stopPropagation,\r\n} from '~/support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n  dataValueHostHtmlBody,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n  resolveInitialization as generalResolveInitialization,\r\n} from '~/initialization';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => () => void,\r\n  canceled: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  _originalScrollOffsetElement: HTMLElement;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _windowElm: Window;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _viewportIsContent: boolean;\r\n  _viewportHasClass: (viewportAttributeClassName: string) => boolean;\r\n  _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) => void;\r\n}\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    host: defaultHostInitialization,\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    host: hostInitialization,\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const isBody = targetElement === ownerDocument.body;\r\n  const docWnd = ownerDocument.defaultView as Window;\r\n  const getFocusedElement = () => ownerDocument.activeElement;\r\n  const focusElm = (customActiveElm: Element | null) => {\r\n    if (customActiveElm && (customActiveElm as HTMLElement).focus) {\r\n      (customActiveElm as HTMLElement).focus();\r\n    }\r\n  };\r\n  const staticInitializationElement = bind(generalStaticInitializationElement, [targetElement]);\r\n  const dynamicInitializationElement = bind(generalDynamicInitializationElement, [targetElement]);\r\n  const resolveInitialization = bind(generalResolveInitialization, [targetElement]);\r\n  const createNewDiv = bind(createDiv, '');\r\n  const generateViewportElement = bind(\r\n    staticInitializationElement,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = bind(\r\n    dynamicInitializationElement,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // check the default contentElement\r\n  // if truthy (so the element would be present in the DOM) the passed element is the final content element and the viewport element is generated\r\n  // if falsy (so the element wouldn't be present in the DOM) the passed element is the final viewport element and the content element is omitted\r\n  const viewportIsContent =\r\n    !viewportIsTarget &&\r\n    isHTMLElement(possibleViewportElement) &&\r\n    possibleViewportElement === possibleContentElement;\r\n  const defaultContentElementPresent =\r\n    viewportIsContent && !!resolveInitialization(defaultContentInitialization);\r\n  const viewportIstContentViewport = defaultContentElementPresent\r\n    ? generateViewportElement()\r\n    : possibleViewportElement;\r\n  const viewportIsContentContent = defaultContentElementPresent\r\n    ? possibleContentElement\r\n    : generateContentElement();\r\n  const nonBodyViewportElement = viewportIsContent\r\n    ? viewportIstContentViewport\r\n    : possibleViewportElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : nonBodyViewportElement;\r\n  const nonBodyHostElement = isTextarea\r\n    ? staticInitializationElement(createNewDiv, defaultHostInitialization, hostInitialization)\r\n    : (targetElement as HTMLElement);\r\n  const hostElement = viewportIsTargetBody ? viewportElement : nonBodyHostElement;\r\n  const contentElement = viewportIsContent ? viewportIsContentContent : possibleContentElement;\r\n\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding:\r\n      !viewportIsTarget &&\r\n      dynamicInitializationElement(\r\n        createNewDiv,\r\n        defaultPaddingInitialization,\r\n        paddingInitialization\r\n      ),\r\n    _content: contentElement,\r\n    _scrollOffsetElement: viewportIsTargetBody ? docElement : viewportElement,\r\n    _scrollEventElement: viewportIsTargetBody ? ownerDocument : viewportElement,\r\n    _originalScrollOffsetElement: isBody ? docElement : targetElement,\r\n    _windowElm: docWnd,\r\n    _documentElm: ownerDocument,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _viewportIsContent: viewportIsContent,\r\n    _viewportHasClass: (viewportAttributeClassName: string) =>\r\n      hasAttrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportAttributeClassName\r\n      ),\r\n    _viewportAddRemoveClass: (viewportAttributeClassName: string, add?: boolean) =>\r\n      addRemoveAttrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportAttributeClassName,\r\n        add\r\n      ),\r\n  };\r\n  const generatedElements = keys(evaluatedTargetObj).reduce((arr, key) => {\r\n    const value = evaluatedTargetObj[key as keyof StructureSetupElementsObj];\r\n    return push(arr, value && isHTMLElement(value) && !parent(value) ? value : false);\r\n  }, [] as Array<HTMLElement | false>);\r\n  const elementIsGenerated = (elm: HTMLElement | false) =>\r\n    elm ? inArray(generatedElements, elm) : null;\r\n  const { _target, _host, _padding, _viewport, _content } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttrs(_host, [dataAttributeHost, dataAttributeInitialize]);\r\n      removeAttrs(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttrs(docElement, [dataAttributeInitialize, dataAttributeHost]);\r\n      }\r\n    },\r\n  ];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  let targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elementIsGenerated(elm) === false\r\n        )\r\n      );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const destroy = bind(runEachAndClear, destroyFns);\r\n  const appendElements = () => {\r\n    const initActiveElm = getFocusedElement();\r\n    const unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n      appendChildren(parent(elm), contents(elm));\r\n      removeElements(elm);\r\n    };\r\n    // wrapping / unwrapping will cause the focused element to blur, this should prevent those events to surface\r\n    const prepareWrapUnwrapFocus = (activeElement?: Element | null) =>\r\n      activeElement\r\n        ? addEventListener(\r\n            activeElement,\r\n            'focus blur',\r\n            (event) => {\r\n              stopPropagation(event);\r\n              event.stopImmediatePropagation();\r\n            },\r\n            {\r\n              _capture: true,\r\n              _passive: false,\r\n            }\r\n          )\r\n        : noop;\r\n\r\n    const undoInitWrapUndwrapFocus = prepareWrapUnwrapFocus(initActiveElm);\r\n    setAttrs(_host, dataAttributeHost, viewportIsTarget ? 'viewport' : 'host');\r\n    setAttrs(_padding, dataAttributePadding, '');\r\n    setAttrs(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      setAttrs(_viewport, dataAttributeViewport, '');\r\n      isBody && addAttrClass(docElement, dataAttributeHost, dataValueHostHtmlBody);\r\n    }\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, [\r\n      undoInitWrapUndwrapFocus,\r\n      () => {\r\n        const destroyActiveElm = getFocusedElement();\r\n        const undoDestroyWrapUndwrapFocus = prepareWrapUnwrapFocus(destroyActiveElm);\r\n        removeAttrs(_padding, dataAttributePadding);\r\n        removeAttrs(_content, dataAttributeContent);\r\n        removeAttrs(_viewport, [\r\n          dataAttributeHostOverflowX,\r\n          dataAttributeHostOverflowY,\r\n          dataAttributeViewport,\r\n        ]);\r\n\r\n        elementIsGenerated(_content) && unwrap(_content);\r\n        elementIsGenerated(_viewport) && unwrap(_viewport);\r\n        elementIsGenerated(_padding) && unwrap(_padding);\r\n        focusElm(destroyActiveElm);\r\n        undoDestroyWrapUndwrapFocus();\r\n      },\r\n    ]);\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      addAttrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden);\r\n      push(destroyFns, bind(removeAttrs, _viewport, dataAttributeViewport));\r\n    }\r\n    if (!viewportIsTarget && docWnd.top === docWnd && initActiveElm === targetElement) {\r\n      const tabIndexStr = 'tabindex';\r\n      const ogTabindex = getAttr(_viewport, tabIndexStr);\r\n\r\n      setAttrs(_viewport, tabIndexStr, '-1');\r\n      focusElm(_viewport);\r\n\r\n      const revertViewportTabIndex = () =>\r\n        ogTabindex\r\n          ? setAttrs(_viewport, tabIndexStr, ogTabindex)\r\n          : removeAttrs(_viewport, tabIndexStr);\r\n      const off = addEventListener(ownerDocument, 'pointerdown keydown', () => {\r\n        revertViewportTabIndex();\r\n        off();\r\n      });\r\n\r\n      push(destroyFns, [revertViewportTabIndex, off]);\r\n    } else {\r\n      focusElm(initActiveElm);\r\n    }\r\n\r\n    undoInitWrapUndwrapFocus();\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n\r\n    return destroy;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, destroy];\r\n};\r\n","import { setStyles, strHeight } from '~/support';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment =\r\n  ({ _content }) =>\r\n  ({ _observersUpdateHints, _observersState, _force }) => {\r\n    const { _heightIntrinsicChanged } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const heightIntrinsicChanged = _content && (_heightIntrinsicChanged || _force);\r\n\r\n    if (heightIntrinsicChanged) {\r\n      setStyles(_content, {\r\n        [strHeight]: _heightIntrinsic && '100%',\r\n      });\r\n    }\r\n  };\r\n","import {\r\n  createCache,\r\n  topRightBottomLeft,\r\n  equalTRBL,\r\n  assignDeep,\r\n  bind,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  setStyles,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  { _host, _padding, _viewport, _viewportIsTarget },\r\n  state\r\n) => {\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    bind(topRightBottomLeft, _host, 'padding', '')\r\n  );\r\n\r\n  return ({ _checkOption, _observersUpdateHints, _observersState, _force }) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(_force);\r\n    const { _nativeScrollbarsHiding } = getEnvironment();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = _observersUpdateHints || {};\r\n    const { _directionIsRTL } = _observersState;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = _checkOption('paddingAbsolute');\r\n    const contentMutation = _force || _contentMutation;\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(_force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_viewportIsTarget && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarsHiding);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        [strMarginRight]: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        [strMarginBottom]: paddingRelative ? -paddingVertical : 0,\r\n        [strMarginLeft]: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        [strWidth]: paddingRelative && `calc(100% + ${paddingHorizontal}px)`,\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        [strPaddingTop]: paddingRelative ? padding.t : 0,\r\n        [strPaddingRight]: paddingRelative ? padding.r : 0,\r\n        [strPaddingBottom]: paddingRelative ? padding.b : 0,\r\n        [strPaddingLeft]: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      setStyles(_padding || _viewport, paddingStyle);\r\n      setStyles(_viewport, viewportStyle);\r\n\r\n      assignDeep(state, {\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  scrollSize,\r\n  fractionalSize,\r\n  equalWH,\r\n  clientSize,\r\n  equalXY,\r\n  assignDeep,\r\n  bind,\r\n  wnd,\r\n  mathMax,\r\n  windowSize,\r\n  strHeight,\r\n  strHidden,\r\n  strOverflowX,\r\n  strOverflowY,\r\n  setStyles,\r\n  getStyles,\r\n  addRemoveAttrClass,\r\n  setAttrs,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  dataValueHostOverflowVisible,\r\n  dataValueViewportScrollbarHidden,\r\n  dataValueViewportOverflowVisible,\r\n  dataAttributeViewport,\r\n  dataAttributePadding,\r\n  dataValuePaddingOverflowVisible,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { WH, XY } from '~/support';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins/scrollbarsHidingPlugin';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\nimport type { ViewportOverflowState } from '../structureSetup.utils';\r\nimport {\r\n  getShowNativeOverlaidScrollbars,\r\n  getViewportOverflowState,\r\n  overflowIsVisible,\r\n  setViewportOverflowState,\r\n} from '../structureSetup.utils';\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  structureSetupElements,\r\n  structureSetupState\r\n) => {\r\n  const env = getEnvironment();\r\n  const {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportIsTarget,\r\n    _viewportAddRemoveClass,\r\n    _isBody,\r\n    _windowElm,\r\n  } = structureSetupElements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid } = env;\r\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n  const max0 = bind(mathMax, 0);\r\n\r\n  const whCacheOptions = {\r\n    _equal: equalWH,\r\n    _initialValue: { w: 0, h: 0 },\r\n  };\r\n  const xyCacheOptions = {\r\n    _equal: equalXY,\r\n    _initialValue: { x: strHidden, y: strHidden } as XY<OverflowStyle>,\r\n  };\r\n  const getOverflowAmount = (viewportScrollSize: WH<number>, viewportClientSize: WH<number>) => {\r\n    const tollerance = wnd.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n    const amount = {\r\n      w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n      h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n    };\r\n\r\n    return {\r\n      w: amount.w > tollerance ? amount.w : 0,\r\n      h: amount.h > tollerance ? amount.h : 0,\r\n    };\r\n  };\r\n\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    bind(fractionalSize, _viewport)\r\n  );\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, bind(scrollSize, _viewport));\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n  const [updateOverflowStyleCache] = createCache<XY<OverflowStyle>>(xyCacheOptions);\r\n\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n\r\n  return (\r\n    { _checkOption, _observersUpdateHints, _observersState, _force },\r\n    { _paddingStyleChanged }\r\n  ) => {\r\n    const {\r\n      _sizeChanged,\r\n      _hostMutation,\r\n      _contentMutation,\r\n      _heightIntrinsicChanged,\r\n      _directionChanged,\r\n      _scrollbarSizeChanged,\r\n    } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const scrollbarsHidingPluginViewportArrangement =\r\n      scrollbarsHidingPlugin &&\r\n      scrollbarsHidingPlugin._viewportArrangement(\r\n        structureSetupElements,\r\n        structureSetupState,\r\n        _observersState,\r\n        env,\r\n        _checkOption\r\n      );\r\n\r\n    const {\r\n      _arrangeViewport,\r\n      _undoViewportArrange,\r\n      _hideNativeScrollbars,\r\n      _getViewportOverflowHideOffset,\r\n    } = scrollbarsHidingPluginViewportArrangement || {};\r\n\r\n    /**\r\n     * Applies a fixed height to the viewport so it can't overflow or underflow the host element.\r\n     * @param viewportOverflowState The current overflow state.\r\n     * @param heightIntrinsic Whether the host height is intrinsic or not.\r\n     */\r\n    const fixFlexboxGlue = (\r\n      viewportOverflowState: ViewportOverflowState,\r\n      heightIntrinsic: boolean\r\n    ) => {\r\n      setStyles(_viewport, {\r\n        [strHeight]: '',\r\n      });\r\n\r\n      if (heightIntrinsic) {\r\n        const { _paddingAbsolute, _padding: padding } = structureSetupState;\r\n        const { _overflowScroll } = viewportOverflowState;\r\n        const fSize = fractionalSize(_host);\r\n        const hostClientSize = clientSize(_host);\r\n\r\n        // padding subtraction is only needed if padding is absolute or if viewport is content-box\r\n        const isContentBox = getStyles(_viewport, 'boxSizing') === 'content-box';\r\n        const paddingVertical = _paddingAbsolute || isContentBox ? padding.b + padding.t : 0;\r\n        const subtractXScrollbar = !(_nativeScrollbarsOverlaid.x && isContentBox);\r\n\r\n        setStyles(_viewport, {\r\n          [strHeight]:\r\n            hostClientSize.h +\r\n            fSize.h +\r\n            (_overflowScroll.x && subtractXScrollbar && _getViewportOverflowHideOffset\r\n              ? _getViewportOverflowHideOffset(viewportOverflowState)._scrollbarsHideOffset.x\r\n              : 0) -\r\n            paddingVertical,\r\n        });\r\n      }\r\n    };\r\n\r\n    const [showNativeOverlaidScrollbars, showNativeOverlaidScrollbarsChanged] =\r\n      getShowNativeOverlaidScrollbars(_checkOption, env);\r\n    const [overflow, overflowChanged] = _checkOption('overflow');\r\n\r\n    const adjustFlexboxGlue =\r\n      !_viewportIsTarget &&\r\n      (_sizeChanged ||\r\n        _contentMutation ||\r\n        _hostMutation ||\r\n        showNativeOverlaidScrollbarsChanged ||\r\n        _heightIntrinsicChanged);\r\n    const adjustViewportArrange =\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      showNativeOverlaidScrollbarsChanged;\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n    const overflowVisible = overflowXVisible || overflowYVisible;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(_force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(_force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(_force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(_force);\r\n\r\n    let preMeasureViewportOverflowState: ViewportOverflowState | undefined;\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(dataValueViewportScrollbarHidden, !showNativeOverlaidScrollbars);\r\n    }\r\n\r\n    if (adjustFlexboxGlue) {\r\n      preMeasureViewportOverflowState = getViewportOverflowState(structureSetupElements);\r\n      fixFlexboxGlue(preMeasureViewportOverflowState, _heightIntrinsic);\r\n    }\r\n\r\n    if (adjustViewportArrange) {\r\n      if (overflowVisible) {\r\n        _viewportAddRemoveClass(dataValueViewportOverflowVisible, false);\r\n      }\r\n\r\n      const [redoViewportArrange, undoViewportArrangeOverflowState] = _undoViewportArrange\r\n        ? _undoViewportArrange(preMeasureViewportOverflowState)\r\n        : [];\r\n\r\n      const [sizeFraction, sizeFractionChanged] = (sizeFractionCache = updateSizeFraction(_force));\r\n      const [viewportScrollSize, viewportScrollSizeChanged] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(_force));\r\n      const viewportClientSize = clientSize(_viewport);\r\n      const arrangedViewportScrollSize = viewportScrollSize;\r\n      const arrangedViewportClientSize = viewportClientSize;\r\n\r\n      redoViewportArrange && redoViewportArrange();\r\n\r\n      // if re measure is required (only required if content arrange strategy is used)\r\n      if (\r\n        (viewportScrollSizeChanged || sizeFractionChanged || showNativeOverlaidScrollbarsChanged) &&\r\n        undoViewportArrangeOverflowState &&\r\n        !showNativeOverlaidScrollbars &&\r\n        _arrangeViewport &&\r\n        _arrangeViewport(undoViewportArrangeOverflowState, viewportScrollSize, sizeFraction)\r\n      ) {\r\n        // arrangedViewportClientSize = clientSize(_viewport);\r\n        // arrangedViewportScrollSize = scrollSize(_viewport);\r\n      }\r\n\r\n      const windowInnerSize = windowSize(_windowElm);\r\n      const overflowAmountScrollSize = {\r\n        w: max0(mathMax(viewportScrollSize.w, arrangedViewportScrollSize.w) + sizeFraction.w),\r\n        h: max0(mathMax(viewportScrollSize.h, arrangedViewportScrollSize.h) + sizeFraction.h),\r\n      };\r\n\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.w\r\n            : arrangedViewportClientSize.w + max0(viewportClientSize.w - viewportScrollSize.w)) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.h\r\n            : arrangedViewportClientSize.h + max0(viewportClientSize.h - viewportScrollSize.h)) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        _force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const hasOverflow = {\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    };\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n    const adjustViewportStyle =\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      adjustFlexboxGlue ||\r\n      adjustViewportArrange;\r\n\r\n    if (adjustViewportStyle) {\r\n      const viewportStyle: StyleObject = {};\r\n      const viewportOverflowState = setViewportOverflowState(\r\n        structureSetupElements,\r\n        hasOverflow,\r\n        overflow,\r\n        viewportStyle\r\n      );\r\n\r\n      _hideNativeScrollbars &&\r\n        _hideNativeScrollbars(\r\n          viewportOverflowState,\r\n          _observersState,\r\n          !!_arrangeViewport &&\r\n            _arrangeViewport(viewportOverflowState, viewportScrollSize, sizeFraction),\r\n          viewportStyle\r\n        );\r\n\r\n      if (adjustFlexboxGlue) {\r\n        fixFlexboxGlue(viewportOverflowState, _heightIntrinsic);\r\n      }\r\n\r\n      if (_viewportIsTarget) {\r\n        setAttrs(_host, dataAttributeHostOverflowX, viewportStyle[strOverflowX] as string);\r\n        setAttrs(_host, dataAttributeHostOverflowY, viewportStyle[strOverflowY] as string);\r\n      } else {\r\n        setStyles(_viewport, viewportStyle);\r\n      }\r\n    }\r\n\r\n    addRemoveAttrClass(_host, dataAttributeHost, dataValueHostOverflowVisible, removeClipping);\r\n    addRemoveAttrClass(\r\n      _padding,\r\n      dataAttributePadding,\r\n      dataValuePaddingOverflowVisible,\r\n      removeClipping\r\n    );\r\n    if (!_viewportIsTarget) {\r\n      addRemoveAttrClass(\r\n        _viewport,\r\n        dataAttributeViewport,\r\n        dataValueViewportOverflowVisible,\r\n        overflowVisible\r\n      );\r\n    }\r\n\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      getViewportOverflowState(structureSetupElements)._overflowStyle\r\n    );\r\n\r\n    assignDeep(structureSetupState, {\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n    };\r\n  };\r\n};\r\n","import { getEnvironment } from '~/environment';\r\nimport {\r\n  addAttrClass,\r\n  assignDeep,\r\n  each,\r\n  getElmentScroll,\r\n  noop,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  type TRBL,\r\n  type XY,\r\n} from '~/support';\r\nimport { dataAttributeHost, dataValueHostUpdating } from '~/classnames';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport { createStructureSetupElements } from './structureSetup.elements';\r\nimport {\r\n  createOverflowUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createTrinsicUpdateSegment,\r\n} from './updateSegments';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n}\r\n\r\nexport interface StructureSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersState: ObserversSetupState;\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n}\r\n\r\nexport type StructureSetupUpdateHints = {\r\n  _overflowEdgeChanged?: boolean;\r\n  _overflowAmountChanged?: boolean;\r\n  _overflowStyleChanged?: boolean;\r\n  _paddingStyleChanged?: boolean;\r\n};\r\n\r\nexport type StructureSetup = [\r\n  ...Setup<StructureSetupUpdateInfo, StructureSetupState, StructureSetupUpdateHints>,\r\n  /** The elements created by the structure setup. */\r\n  StructureSetupElementsObj,\r\n  /** Function to be called when the initialization was canceled. */\r\n  () => void\r\n];\r\n\r\nexport type StructureUpdateSegment = (\r\n  updateInfo: StructureSetupUpdateInfo,\r\n  updateHints: Readonly<StructureSetupUpdateHints>\r\n) => StructureSetupUpdateHints | void;\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: StructureSetupState\r\n) => StructureUpdateSegment;\r\n\r\nexport const createStructureSetup = (target: InitializationTarget): StructureSetup => {\r\n  const [elements, appendStructureElements, canceled] = createStructureSetupElements(target);\r\n  const state: StructureSetupState = {\r\n    _padding: {\r\n      t: 0,\r\n      r: 0,\r\n      b: 0,\r\n      l: 0,\r\n    },\r\n    _paddingAbsolute: false,\r\n    _viewportPaddingStyle: {\r\n      [strMarginRight]: 0,\r\n      [strMarginBottom]: 0,\r\n      [strMarginLeft]: 0,\r\n      [strPaddingTop]: 0,\r\n      [strPaddingRight]: 0,\r\n      [strPaddingBottom]: 0,\r\n      [strPaddingLeft]: 0,\r\n    },\r\n    _overflowEdge: { x: 0, y: 0 },\r\n    _overflowAmount: { x: 0, y: 0 },\r\n    _overflowStyle: {\r\n      x: strHidden,\r\n      y: strHidden,\r\n    },\r\n    _hasOverflow: {\r\n      x: false,\r\n      y: false,\r\n    },\r\n  };\r\n  const { _target, _viewport, _viewportIsTarget } = elements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const updateSegments: StructureUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(elements, state),\r\n    createPaddingUpdateSegment(elements, state),\r\n    createOverflowUpdateSegment(elements, state),\r\n  ];\r\n\r\n  return [\r\n    appendStructureElements,\r\n    (updateInfo) => {\r\n      const updateHints: StructureSetupUpdateHints = {};\r\n      const adjustScrollOffset = doViewportArrange;\r\n      const scrollOffset = adjustScrollOffset && getElmentScroll(_viewport);\r\n\r\n      const removeAttrClass = _viewportIsTarget\r\n        ? addAttrClass(_viewport, dataAttributeHost, dataValueHostUpdating)\r\n        : noop;\r\n\r\n      each(updateSegments, (updateSegment) => {\r\n        assignDeep(updateHints, updateSegment(updateInfo, updateHints) || {});\r\n      });\r\n\r\n      removeAttrClass();\r\n\r\n      scrollElementTo(_viewport, scrollOffset);\r\n      !_viewportIsTarget && scrollElementTo(_target, 0);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n    elements,\r\n    canceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  bind,\r\n  getElmentScroll,\r\n  isEmptyObject,\r\n  keys,\r\n  runEachAndClear,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { createOptionCheck } from '~/options';\r\nimport type { OptionsCheckFn, Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { DeepReadonly } from '~/typings';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { ObserversSetupState, ObserversSetupUpdateHints } from './observersSetup';\r\nimport type { StructureSetupState, StructureSetupUpdateHints } from './structureSetup';\r\nimport type { StructureSetupElementsObj } from './structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { createObserversSetup } from './observersSetup';\r\nimport { createScrollbarsSetup } from './scrollbarsSetup';\r\nimport { createStructureSetup } from './structureSetup';\r\n\r\nexport type SetupUpdateHints = Partial<Record<string, boolean>>;\r\n\r\nexport type SetupUpdateInfo = {\r\n  _checkOption: OptionsCheckFn<Options>;\r\n  _changedOptions: PartialOptions;\r\n  _force: boolean;\r\n};\r\n\r\nexport type Setup<\r\n  U extends SetupUpdateInfo,\r\n  S extends Readonly<Record<string, any>>,\r\n  H extends SetupUpdateHints | void\r\n> = [\r\n  /** The create function which returns the `destroy` function. */\r\n  _create: () => () => void,\r\n  /** Function which updates the setup and returns the update result. */\r\n  _update: (updateInfo: U) => H,\r\n  /** Function which returns the current state. */\r\n  _state: S\r\n];\r\n\r\nexport interface SetupsUpdateInfo {\r\n  /** The options that changed or `undefined` if none changed. */\r\n  _changedOptions?: PartialOptions;\r\n  /** Whether chache should be ignored. */\r\n  _force?: boolean;\r\n  /** Whether observers should take their records and thus update as well. */\r\n  _takeRecords?: boolean;\r\n  /** Whether one or more scrollbars has been cloned. */\r\n  _cloneScrollbar?: boolean;\r\n}\r\n\r\nexport interface SetupsUpdateHints {\r\n  readonly _observersUpdateHints: DeepReadonly<ObserversSetupUpdateHints>;\r\n  readonly _structureUpdateHints: DeepReadonly<StructureSetupUpdateHints>;\r\n}\r\n\r\nexport interface SetupsState {\r\n  readonly _observersSetupState: DeepReadonly<ObserversSetupState>;\r\n  readonly _structureSetupState: DeepReadonly<StructureSetupState>;\r\n}\r\n\r\nexport interface SetupsElements {\r\n  readonly _structureSetupElements: DeepReadonly<StructureSetupElementsObj>;\r\n  readonly _scrollbarsSetupElements: DeepReadonly<ScrollbarsSetupElementsObj>;\r\n}\r\n\r\nexport type Setups = [\r\n  construct: () => () => void,\r\n  update: (updateInfo: SetupsUpdateInfo) => boolean,\r\n  getState: () => SetupsState,\r\n  elements: SetupsElements,\r\n  canceled: () => void\r\n];\r\n\r\nexport const createSetups = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  onUpdated: (updateInfo: SetupsUpdateInfo, updateHints: SetupsUpdateHints) => void,\r\n  onScroll: (scrollEvent: Event) => void\r\n): Setups => {\r\n  const getCurrentOption = createOptionCheck(options, {});\r\n  const [\r\n    structureSetupCreate,\r\n    structureSetupUpdate,\r\n    structureSetupState,\r\n    structureSetupElements,\r\n    structureSetupCanceled,\r\n  ] = createStructureSetup(target);\r\n  const [observersSetupCreate, observersSetupUpdate, observersSetupState] = createObserversSetup(\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    getCurrentOption,\r\n    (observersUpdateHints) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      update({}, observersUpdateHints);\r\n    }\r\n  );\r\n  const [scrollbarsSetupCreate, scrollbarsSetupUpdate, , scrollbarsSetupElements] =\r\n    createScrollbarsSetup(\r\n      target,\r\n      options,\r\n      observersSetupState,\r\n      structureSetupState,\r\n      structureSetupElements,\r\n      onScroll\r\n    );\r\n\r\n  const updateHintsAreTruthy = (hints: SetupUpdateHints) =>\r\n    keys(hints).some((key) => !!hints[key as keyof typeof hints]);\r\n\r\n  const update = (\r\n    updateInfo: SetupsUpdateInfo,\r\n    observerUpdateHints?: ObserversSetupUpdateHints\r\n  ): boolean => {\r\n    const {\r\n      _changedOptions: rawChangedOptions,\r\n      _force: rawForce,\r\n      _takeRecords,\r\n      _cloneScrollbar,\r\n    } = updateInfo;\r\n    const _changedOptions = rawChangedOptions || {};\r\n    const _force = !!rawForce;\r\n    const baseUpdateInfoObj: SetupUpdateInfo = {\r\n      _checkOption: createOptionCheck(options, _changedOptions, _force),\r\n      _changedOptions,\r\n      _force,\r\n    };\r\n\r\n    if (_cloneScrollbar) {\r\n      scrollbarsSetupUpdate(baseUpdateInfoObj);\r\n      return false;\r\n    }\r\n\r\n    const observersHints =\r\n      observerUpdateHints ||\r\n      observersSetupUpdate(\r\n        assignDeep({}, baseUpdateInfoObj, {\r\n          _takeRecords,\r\n        })\r\n      );\r\n\r\n    const structureHints = structureSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersState: observersSetupState,\r\n        _observersUpdateHints: observersHints,\r\n      })\r\n    );\r\n    scrollbarsSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      })\r\n    );\r\n\r\n    const truthyObserversHints = updateHintsAreTruthy(observersHints);\r\n    const truthyStructureHints = updateHintsAreTruthy(structureHints);\r\n    const changed =\r\n      truthyObserversHints || truthyStructureHints || !isEmptyObject(_changedOptions) || _force;\r\n\r\n    changed &&\r\n      onUpdated(updateInfo, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      });\r\n\r\n    return changed;\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      const { _originalScrollOffsetElement, _viewport } = structureSetupElements;\r\n      const initialScroll = getElmentScroll(_originalScrollOffsetElement);\r\n      const destroyFns = [observersSetupCreate(), structureSetupCreate(), scrollbarsSetupCreate()];\r\n\r\n      scrollElementTo(_viewport, initialScroll);\r\n\r\n      return bind(runEachAndClear, destroyFns);\r\n    },\r\n    update,\r\n    () => ({\r\n      _observersSetupState: observersSetupState,\r\n      _structureSetupState: structureSetupState,\r\n    }),\r\n    {\r\n      _structureSetupElements: structureSetupElements,\r\n      _scrollbarsSetupElements: scrollbarsSetupElements,\r\n    },\r\n    structureSetupCanceled,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  isFunction,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n  keys,\r\n  isArray,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  removeUndefinedProperties,\r\n} from '~/support';\r\nimport { getOptionsDiff } from '~/options';\r\nimport { getEnvironment } from '~/environment';\r\nimport { cancelInitialization } from '~/initialization';\r\nimport { addInstance, getInstance, removeInstance } from '~/instances';\r\nimport { createSetups } from '~/setups';\r\nimport {\r\n  addPlugins,\r\n  getStaticPluginModuleInstance,\r\n  optionsValidationPluginModuleName,\r\n  pluginModules,\r\n  registerPluginModuleInstances,\r\n} from '~/plugins';\r\nimport type { XY, TRBL } from '~/support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type {\r\n  InferInstancePluginModuleInstance,\r\n  InferStaticPluginModuleInstance,\r\n  InstancePlugin,\r\n  OptionsValidationPlugin,\r\n  Plugin,\r\n  PluginModuleInstance,\r\n  StaticPlugin,\r\n} from '~/plugins';\r\nimport type { Initialization, InitializationTarget, PartialInitialization } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * Describes the OverlayScrollbars environment.\r\n */\r\nexport interface Environment {\r\n  /** The native scrollbars size of the browser / system. */\r\n  scrollbarsSize: XY<number>;\r\n  /** Whether the native scrollbars are overlaid. */\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  /** Whether the browser supports native scrollbars hiding. */\r\n  scrollbarsHiding: boolean;\r\n  /** The rtl scroll behavior of the browser. */\r\n  rtlScrollBehavior: { n: boolean; i: boolean };\r\n  /** Whether the browser supports the ScrollTimeline API. */\r\n  scrollTimeline: boolean;\r\n  /** The default Initialization to use if nothing else is specified. */\r\n  staticDefaultInitialization: Initialization;\r\n  /** The default Options to use if nothing else is specified. */\r\n  staticDefaultOptions: Options;\r\n\r\n  /** Returns the current default Initialization. */\r\n  getDefaultInitialization(): Initialization;\r\n  /** Returns the current default Options. */\r\n  getDefaultOptions(): Options;\r\n\r\n  /**\r\n   * Sets a new default Initialization.\r\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\r\n   * @param newDefaultInitialization The new default Initialization.\r\n   * @returns The current default Initialization.\r\n   */\r\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\r\n  /**\r\n   * Sets new default Options.\r\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\r\n   * @param newDefaultOptions The new default Options.\r\n   * @returns The current default options.\r\n   */\r\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Adds a single plugin.\r\n   * @param plugin The plugin to be added.\r\n   * @returns The plugins static modules instance or `void` if no instance was found.\r\n   */\r\n  plugin<P extends Plugin>(\r\n    plugin: P\r\n  ): P extends StaticPlugin ? InferStaticPluginModuleInstance<P> : void;\r\n  /**\r\n   * Adds multiple plugins.\r\n   * @param plugins The plugins to be added.\r\n   * @returns The plugins static modules instances or `void` if no instance was found.\r\n   */\r\n  plugin<P extends [Plugin, ...Plugin[]]>(\r\n    plugins: P\r\n  ): P extends [Plugin, ...Plugin[]]\r\n    ? {\r\n        [K in keyof P]: P[K] extends StaticPlugin ? InferStaticPluginModuleInstance<P[K]> : void;\r\n      }\r\n    : void;\r\n\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Gets the environment.\r\n   */\r\n  env(): Environment;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Gets the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options which should be applied.\r\n   * @param pure Whether the options should be reset before the new options are added.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure Whether all already added event listeners should be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes a single event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance and removes all added elements. */\r\n  destroy(): void;\r\n  /** Returns the instance of the passed plugin or `undefined` if no instance was found. */\r\n  plugin<P extends InstancePlugin>(osPlugin: P): InferInstancePluginModuleInstance<P> | undefined;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions } = getEnvironment();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const destroyFns: (() => void)[] = [];\r\n    const instancePluginModuleInstances: Record<string, PluginModuleInstance> = {};\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const newOptionsWithoutUndefined = removeUndefinedProperties(newOptions, true);\r\n      const pluginValidate = getStaticPluginModuleInstance<typeof OptionsValidationPlugin>(\r\n        optionsValidationPluginModuleName\r\n      );\r\n      return pluginValidate\r\n        ? pluginValidate(newOptionsWithoutUndefined, true)\r\n        : newOptionsWithoutUndefined;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addPluginEvent, removePluginEvents, triggerPluginEvent] =\r\n      createEventListenerHub<EventListenerArgs>();\r\n    const [addInstanceEvent, removeInstanceEvents, triggerInstanceEvent] =\r\n      createEventListenerHub(eventListeners);\r\n    const triggerEvent: typeof triggerPluginEvent = (name, args) => {\r\n      triggerInstanceEvent(name, args);\r\n      triggerPluginEvent(name, args);\r\n    };\r\n    const [setupsConstruct, setupsUpdate, setupsState, setupsElements, setupsCanceled] =\r\n      createSetups(\r\n        target,\r\n        currentOptions,\r\n        ({ _changedOptions, _force }, { _observersUpdateHints, _structureUpdateHints }) => {\r\n          const {\r\n            _sizeChanged,\r\n            _directionChanged,\r\n            _heightIntrinsicChanged,\r\n            _contentMutation,\r\n            _hostMutation,\r\n            _appear,\r\n          } = _observersUpdateHints;\r\n\r\n          const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n            _structureUpdateHints;\r\n\r\n          triggerEvent('updated', [\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            instance,\r\n            {\r\n              updateHints: {\r\n                sizeChanged: !!_sizeChanged,\r\n                directionChanged: !!_directionChanged,\r\n                heightIntrinsicChanged: !!_heightIntrinsicChanged,\r\n                overflowEdgeChanged: !!_overflowEdgeChanged,\r\n                overflowAmountChanged: !!_overflowAmountChanged,\r\n                overflowStyleChanged: !!_overflowStyleChanged,\r\n                contentMutation: !!_contentMutation,\r\n                hostMutation: !!_hostMutation,\r\n                appear: !!_appear,\r\n              },\r\n              changedOptions: _changedOptions || {},\r\n              force: !!_force,\r\n            },\r\n          ]);\r\n        },\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n      );\r\n\r\n    const destroy = (canceled: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      runEachAndClear(destroyFns);\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, canceled]);\r\n      removePluginEvents();\r\n      removeInstanceEvents();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            setupsUpdate({ _changedOptions: changedOptions });\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addInstanceEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeInstanceEvents(name, listener);\r\n      },\r\n      state() {\r\n        const { _observersSetupState, _structureSetupState } = setupsState();\r\n        const { _directionIsRTL } = _observersSetupState;\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n        } = _structureSetupState;\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = setupsElements._structureSetupElements;\r\n        const { _horizontal, _vertical } = setupsElements._scrollbarsSetupElements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              setupsUpdate({ _cloneScrollbar: true });\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (_force?: boolean) => setupsUpdate({ _force, _takeRecords: true }),\r\n      destroy: bind(destroy, false),\r\n      plugin: <P extends InstancePlugin>(plugin: P) =>\r\n        instancePluginModuleInstances[keys(plugin)[0]] as\r\n          | InferInstancePluginModuleInstance<P>\r\n          | undefined,\r\n    };\r\n\r\n    push(destroyFns, [setupsCanceled]);\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    registerPluginModuleInstances(pluginModules, OverlayScrollbars, [\r\n      instance,\r\n      addPluginEvent,\r\n      instancePluginModuleInstances,\r\n    ]);\r\n\r\n    if (\r\n      cancelInitialization(\r\n        setupsElements._structureSetupElements._isBody,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    push(destroyFns, setupsConstruct());\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    instance.update(true);\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  const isArr = isArray(plugins);\r\n  const pluginsToAdd: Plugin<string, void | PluginModuleInstance, void | PluginModuleInstance>[] =\r\n    isArr ? plugins : [plugins];\r\n  const result = pluginsToAdd.map(\r\n    (plugin) => registerPluginModuleInstances(plugin, OverlayScrollbars)[0]\r\n  );\r\n  addPlugins(pluginsToAdd);\r\n  return isArr ? result : (result[0] as any);\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _rtlScrollBehavior,\r\n    _scrollTimeline,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      rtlScrollBehavior: _rtlScrollBehavior,\r\n      scrollTimeline: _scrollTimeline,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n"],"names":["createCache","options","update","_initialValue","_equal","_alwaysUpdateValues","_value","_previous","cacheUpdateContextual","newValue","force","curr","newVal","changed","cacheUpdateIsolated","getCurrentCache","isBrowser","window","wnd","mathMax","Math","max","mathMin","min","mathRound","round","mathAbs","abs","cAF","cancelAnimationFrame","rAF","requestAnimationFrame","setT","setTimeout","clearT","clearTimeout","getApi","name","undefined","MutationObserverConstructor","IntersectionObserverConstructor","ResizeObserverConstructor","scrollT","ElementNodeType","Node","ELEMENT_NODE","_Object$prototype","Object","prototype","toString","hasOwnProperty","typeRgx","isUndefined","obj","isNull","type","call","replace","toLowerCase","isNumber","isString","isBoolean","isFunction","isArray","Array","isObject","isArrayLike","length","lengthCorrectFormat","isPlainObject","key","cstr","ctor","ctorProto","hasOwnConstructor","hasIsPrototypeOf","isHTMLElement","instanceofObj","HTMLElement","nodeType","isElement","Element","animationCurrentTime","performance","now","animateNumber","from","to","duration","onFrame","easing","animationFrameId","timeStart","finalDuration","frame","complete","timeNow","timeElapsed","stopAnimation","percent","progress","animationCompleted","each","source","callback","i","keys","inArray","arr","item","indexOf","concat","a","b","push","array","items","arrayIsSingleItem","apply","createOrKeepArray","value","isEmptyArray","deduplicateArray","Set","runEachAndClear","args","keep","runFn","fn","strPaddingTop","strPaddingRight","strPaddingLeft","strPaddingBottom","strMarginLeft","strMarginRight","strMarginBottom","strOverflowX","strOverflowY","strWidth","strHeight","strHidden","strVisible","equal","props","propMutation","result","prop","compareA","compareB","equalWH","equalXY","equalTRBL","noop","bind","_len","arguments","_key","selfClearTimeout","timeout","id","setTFn","clearTFn","debounce","functionToDebounce","maxTimeoutId","prevArguments","latestArguments","clear","_ref","_timeout","_maxDelay","_mergeParams","invokeFunctionToDebounce","this","mergeParms","flush","debouncedFn","finalTimeout","hasTimeout","finalMaxWait","hasMaxWait","setTimeoutFn","clearTimeoutFn","mergeParamsResult","invokedArgs","boundInvoke","timeoutId","_flush","assignDeep","target","object1","object2","object3","object4","object5","object6","sources","_","copy","copyIsArray","src","clone","slice","removeUndefinedProperties","deep","isEmptyObject","capNumber","number","getDomTokensArray","tokens","split","filter","token","getAttr","elm","attrName","getAttribute","setAttrs","attrNames","setAttribute","removeAttrs","removeAttribute","domTokenListAttr","initialArr","setElmAttr","domTokenListOperation","operationTokens","operation","initialArrSet","join","_remove","removeTokens","_add","addTokens","_has","hasTokens","tokenSet","reduce","boolean","includes","removeAttrClass","addAttrClass","addRemoveAttrClass","add","hasAttrClass","createDomTokenListClass","removeClass","className","addClass","getElmPrototype","find","selector","rootElm","document","querySelectorAll","findFirst","querySelector","is","matches","msMatchesSelector","contents","childNodes","parent","parentElement","closest","liesBetween","highBoundarySelector","deepBoundarySelector","closestHighBoundaryElm","closestDeepBoundaryElm","deepBoundaryIsValid","removeElements","nodes","e","parentElm","removeChild","before","preferredAnchor","insertedElms","anchor","fragment","createDocumentFragment","insertedElm","previousSibling","appendChild","firstChild","nextSibling","insertBefore","appendChildren","node","children","insertAfter","insertedNodes","createDiv","classNames","div","createElement","createDOM","html","createdDiv","innerHTML","trim","customCssPropRegex","getCSSVal","computedStyle","getPropertyValue","validFiniteNumber","notNaN","isFinite","parseToZeroOrNumber","parseFloat","ratioToCssPercent","ratio","toFixed","numberToCssPx","setStyles","styles","rawValue","elmStyle","style","test","setProperty","_unused","getStyles","pseudoElm","getSingleStyle","getStylesResult","getComputedStyle","getDirectionIsRTL","topRightBottomLeft","propertyPrefix","propertySuffix","finalPrefix","finalSuffix","top","right","bottom","left","t","r","l","getTrasformTranslateValue","isHorizontal","x","y","zeroObj","w","h","getElmWidthHeightProperty","property","windowSize","customWnd","offsetSize","clientSize","scrollSize","fractionalSize","cssWidth","cssHeight","getBoundingClientRect","domRectHasDimensions","rect","domRectAppeared","currContentRect","prevContentRect","rectHasDimensions","rectHadDimensions","removeEventListener","eventNames","listener","capture","eventName","addEventListener","passive","_passive","_capture","once","_once","nativeOptions","map","finalListener","evt","stopPropagation","preventDefault","absoluteCoordinates","scrollX","scrollY","convertScrollPosition","scrollPosition","overflowAmount","rtlScrollBehavior","n","getRawScrollBounds","getRawScrollRatio","rawScrollPosition","scrollElementTo","position","scrollLeft","scrollTop","getElmentScroll","manageListener","createEventListenerHub","initialEventListeners","events","Map","removeEvent","eventSet","get","currListener","forEach","addEvent","nameOrEventListeners","listenerOrPure","set","eventListenerKeys","offFns","eventListener","triggerEvent","event","opsStringify","JSON","stringify","val","getPropByPath","path","o","defaultOptions","paddingAbsolute","showNativeOverlaidScrollbars","elementEvents","attributes","ignoreMutation","overflow","scrollbars","theme","visibility","autoHide","autoHideDelay","autoHideSuspend","dragScroll","clickScroll","pointers","getOptionsDiff","currOptions","newOptions","diff","optionsKeys","optionKey","currOptionValue","newOptionValue","isDiff","createOptionCheck","changedOptions","dataAttributePrefix","classNameEnvironment","classNameEnvironmentScrollbarHidden","dataAttributeInitialize","dataAttributeHost","dataAttributeHostOverflowX","dataAttributeHostOverflowY","dataValueHostOverflowVisible","dataValueHostScrollbarPressed","dataValueHostUpdating","dataValueHostHtmlBody","dataAttributeViewport","dataValueViewportArrange","dataValueViewportScrollbarHidden","dataValueViewportOverflowVisible","dataAttributePadding","dataValuePaddingOverflowVisible","dataAttributeContent","classNameSizeObserver","classNameSizeObserverAppear","classNameSizeObserverListener","classNameSizeObserverListenerScroll","classNameSizeObserverListenerItem","classNameSizeObserverListenerItemFinal","classNameTrinsicObserver","classNameScrollbarThemeNone","classNameScrollbar","classNameScrollbarRtl","classNameScrollbarHorizontal","classNameScrollbarVertical","classNameScrollbarTrack","classNameScrollbarHandle","classNameScrollbarVisible","classNameScrollbarCornerless","classNameScrollbarTransitionless","classNameScrollbarInteraction","classNameScrollbarUnusable","classNameScrollbarAutoHide","classNameScrollbarAutoHideHidden","classNameScrollbarWheel","classNameScrollbarTrackInteractive","classNameScrollbarHandleInteractive","pluginModules","staticPluginModuleInstances","addPlugins","addedPlugin","plugin","registerPluginModuleInstances","staticObj","instanceInfo","_plugin$name","osStatic","static","osInstance","instance","instanceObj","instancePluginMap","getStaticPluginModuleInstance","pluginModuleName","_extends","module","assign","exports","__esModule","optionsTemplateTypes","string","object","function","null","validateRecursive","template","doWriteErrors","propPath","validatedOptions","optionsCopy","optionsValue","templateValue","templateIsComplex","propPrefix","_validateRecursive","validated","foreign","isValid","errorEnumStrings","errorPossibleTypes","optionsValueType","templateValueArr","currTemplateType","typeString","isEnumString","enumStringSplit","possibility","console","warn","toUpperCase","validateOptions","optionsValidationPluginModuleName","_static","numberAllowedValues","oTypes","booleanAllowedValues","arrayNullValues","overflowAllowedValues","scrollbarsVisibilityAllowedValues","scrollbarsAutoHideAllowedValues","optionsTemplate","_validateOptions","sizeObserverPluginName","SizeObserverPlugin","listenerElement","onSizeChangedCallback","observeAppearChange","_setStyles","scrollAmount","scrollEventName","observerElementChildren","observerElementChildrenRoot","shrinkElement","lastChild","expandElement","expandElementChild","cacheSize","currSize","isDirty","rAFId","reset","onResized","appear","onScroll","scrollEvent","destroyFns","getShowNativeOverlaidScrollbars","checkOption","env","_nativeScrollbarsOverlaid","_checkOption","showNativeOverlaidScrollbarsOption","showNativeOverlaidScrollbarsChanged","overflowIsVisible","overflowBehavior","getViewportOverflowState","structureSetupElements","viewportStyleObj","_viewport","getStatePerAxis","styleKey","overflowStyle","objectPrefferedOverflowStyle","overflowScroll","_getStatePerAxis","xOverflowStyle","xOverflowScroll","_getStatePerAxis2","yOverflowStyle","yOverflowScroll","_overflowStyle","_overflowScroll","setViewportOverflowState","hasOverflow","overflowOption","hasAnyOverflow","setAxisOverflowStyle","behavior","hasOverflowAxis","overflowVisible","fallbackVisibilityBehavior","overflowVisibleBehavior","_setAxisOverflowStyle","overflowX","visibleBehaviorX","_setAxisOverflowStyle2","overflowY","visibleBehaviorY","scrollbarsHidingPluginName","ScrollbarsHidingPlugin","_ref2","_viewportArrangement","structureSetupState","observersSetupState","checkOptions","_viewportIsTarget","_nativeScrollbarsHiding","_nativeScrollbarsSize","doViewportArrange","_getShowNativeOverlai","_getViewportOverflowHideOffset","viewportOverflowState","arrangeHideOffset","getHideOffsetPerAxis","isOverlaid","nativeScrollbarSize","nonScrollbarStylingHideOffset","scrollbarsHideOffset","scrollbarsHideOffsetArrange","_getHideOffsetPerAxis","xScrollbarsHideOffset","xScrollbarsHideOffsetArrange","_getHideOffsetPerAxis2","yScrollbarsHideOffset","yScrollbarsHideOffsetArrange","_scrollbarsHideOffset","_scrollbarsHideOffsetArrange","_hideNativeScrollbars","viewportArrange","_assignDeep","_directionIsRTL","_getViewportOverflowH","arrangeX","arrangeY","hideOffsetX","hideOffsetY","_viewportPaddingStyle","horizontalMarginKey","viewportHorizontalPaddingKey","horizontalMarginValue","verticalMarginValue","horizontalPaddingValue","verticalPaddingValue","_arrangeViewport","viewportScrollSize","sizeFraction","_getViewportOverflowH2","viewportArrangeHorizontalPaddingKey","viewportArrangeHorizontalPaddingValue","viewportArrangeVerticalPaddingValue","paddingTop","fractionalContentWidth","fractionalContenHeight","arrangeSize","_undoViewportArrange","finalViewportOverflowState","viewportPaddingStyle","_getViewportOverflowH3","finalPaddingStyle","assignProps","prevStyle","_envWindowZoom","size","dpr","getWindowDPR","screen","dDPI","deviceXDPI","sDPI","logicalXDPI","devicePixelRatio","diffBiggerThanOne","valOne","valTwo","absValOne","absValTwo","envInstance","updateNativeScrollbarSizeCache","sizeNew","deltaSize","deltaAbsSize","deltaAbsRatio","dprNew","deltaIsBigger","difference","dprChanged","isZoom","scrollbarSizeChanged","scrollbarSize","_updateNativeScrollba","clickScrollPluginModuleName","ClickScrollPlugin","moveHandleRelative","getHandleOffset","startOffset","handleLength","relativeTrackPointerOffset","iteration","animateClickScroll","clickScrollProgress","sign","animationProgress","handleStartBound","handleEndBound","mouseBetweenHandleBounds","firstIterationPauseTimeout","environmentInstance","createEnvironment","getNativeScrollbarSize","body","measureElm","measureElmChild","cSize","oSize","fSize","getNativeScrollbarsHiding","testElm","revertClass","getRtlScrollBehavior","childElm","direction","parentOffset","childOffset","childOffsetAfterScroll","_document","envDOM","envElm","envChildElm","_createEventListenerH","_createCache","getNativeScrollbarSizeCache","_getNativeScrollbarSi","nativeScrollbarsSize","nativeScrollbarsHiding","nativeScrollbarsOverlaid","staticDefaultInitialization","elements","host","padding","viewport","ownerDocument","content","slot","cancel","staticDefaultOptions","getDefaultOptions","getDefaultInitialization","_scrollTimeline","_rtlScrollBehavior","_addResizeListener","_getDefaultInitialization","_setDefaultInitialization","newInitializationStrategy","_getDefaultOptions","_setDefaultOptions","newDefaultOptions","_staticDefaultInitialization","_staticDefaultOptions","scrollbarsHidingPlugin","zoomFn","getEnvironment","resolveInitialization","staticInitializationElement","fallbackStaticInitializationElement","defaultStaticInitializationElement","staticInitializationElementValue","staticInitialization","resolvedInitialization","dynamicInitializationElement","fallbackDynamicInitializationElement","defaultDynamicInitializationElement","dynamicInitializationElementValue","dynamicInitialization","cancelInitialization","isBody","cancelInitializationValue","_getEnvironment","_getDefaultInitializa","defaultNativeScrollbarsOverlaid","defaultbody","resolvedNativeScrollbarsOverlaid","resolvedDocumentScrollingElement","finalNativeScrollbarsOverlaid","finalDocumentScrollingElement","targetInstanceMap","WeakMap","addInstance","removeInstance","delete","getInstance","createEventContentChange","eventContentChange","destroyed","destroy","updateElements","getElements","eventElmList","entries","isTargetChild","contains","removeListener","createDOMObserver","isContentObserver","isConnected","_attributes","_styleChangingAttributes","_eventContentChange","_nestedTargetSelector","_ignoreTargetChange","_ignoreContentChange","debouncedEventContentChange","_createEventContentCh","destroyEventContentChange","updateEventContentChangeElements","finalAttributes","finalStyleChangingAttributes","observedAttributes","observerCallback","fromRecords","mutations","ignoreTargetChange","ignoreContentChange","totalChangedNodes","targetChangedAttrs","targetStyleChanged","contentChanged","mutation","attributeName","mutationTarget","oldValue","addedNodes","removedNodes","isAttributesType","isChildListType","targetIsMutationTarget","isAttrChange","attributeValue","attributeChanged","styleChangingAttrChanged","contentAttrChanged","isNestedTarget","baseAssertion","contentFinalChanged","mutationObserver","observe","attributeOldValue","attributeFilter","subtree","childList","characterData","disconnect","takeRecords","createSizeObserver","observeDirectionChange","_direction","_appear","sizeObserverPlugin","getIsDirectionRTL","updateResizeObserverContentRectCache","baseElements","sizeObserver","onSizeChangedCallbackProxy","sizeChangedContext","isResizeObserverCall","ResizeObserverEntry","hasDirectionCache","skip","doDirectionScroll","_updateResizeObserver","contentRect","currRContentRect","hasDimensions","appeared","firstCall","rtl","_directionIsRTLCache","_sizeChanged","resizeObserverInstance","pop","_sizeObserverPlugin","pluginAppearCallback","pluginDestroyFns","_createCache2","updateDirectionIsRTLCache","directionIsRTLCacheValues","directionIsRTLCache","directionIsRTLCacheChanged","directionIsRTLCachePrevious","createTrinsicObserver","onTrinsicChangedCallback","intersectionObserverInstance","isHeightIntrinsic","ioEntryOrSize","isIntersecting","intersectionRatio","trinsicObserver","updateHeightIntrinsicCache","triggerOnTrinsicChangedCallback","updateValue","heightIntrinsic","heightIntrinsicChanged","intersectionObserverCallback","root","onSizeChanged","newSize","createObserversSetup","getCurrentOption","onObserversUpdated","debounceTimeout","debounceMaxDelay","updateContentMutationObserver","destroyContentMutationObserver","prevDirectionIsRTL","hostSelector","viewportSelector","viewportAttrsFromTarget","baseStyleChangingAttrsTextarea","baseStyleChangingAttrs","_target","_host","_content","_isTextarea","_viewportHasClass","_viewportAddRemoveClass","state","_heightIntrinsic","hasOver","isArranged","scrollOffset","redoViewportArrange","contentScroll","viewportScroll","fractional","updateContentSizeCache","contentMutationObserverAttr","onObserversUpdatedDebounced","prev","prevObj","currObj","setDirectionWhenViewportIsTarget","updateHints","newDirectionIsRTL","_directionChanged","updateViewportAttrsFromHost","attribute","hostAttr","onTrinsicChanged","heightIntrinsicCache","_heightIntrinsicChanged","exclusiveSizeChange","updateFn","directionIsRTL","directionIsRTLChanged","onContentMutation","contentChangedThroughEvent","_updateContentSizeCac","_contentMutation","onHostMutation","_hostMutation","_ref3","constructTrinsicObserver","updateTrinsicObserver","constructSizeObserver","_createDOMObserver","constructHostMutationObserver","updateHostMutationObserver","viewportIsTargetResizeObserver","destroySizeObserver","destroyTrinsicObserver","destroyHostMutationObserver","removeResizeListener","_scrollbarSizeChanged","_updateContentSizeCac2","_ref4","_takeRecords","_force","_checkOption2","_checkOption3","attributesChanged","_checkOption4","elementEventsChanged","_checkOption5","debounceValue","debounceChanged","contentMutationObserverChanged","ignoreMutationFromOptions","_createDOMObserver2","ignore","construct","maxWait","hostUpdateResult","trinsicUpdateResult","contentUpdateResult","createScrollbarsSetupElements","scrollbarsSetupEvents","defaultInitScrollbars","defaultInitScrollbarsSlot","_targetIsElm","_scrollOffsetElement","_isBody","scrollbarsInit","initScrollbarsSlot","elementAnimations","initScrollTimeline","axis","scrollTimelineX","scrollTimelineY","evaluatedScrollbarSlot","generalDynamicInitializationElement","getScrollbarHandleLengthRatio","scrollbarStructure","_track","_handle","handleSize","trackSize","_overflowAmount","_overflowEdge","viewportSize","getScrollbarHandleOffsetRatio","scrollPercent","lengthRatio","addDirectionRTLKeyframes","keyframes","directionRTL","cancelElementAnimations","currAnimations","element","doCancel","animation","setElementAnimation","timeline","composite","activeAnimations","activeAnimation","effect","KeyframeEffect","animate","scrollbarStructureAddRemoveClass","scrollbarStructures","action","_scrollbar","scrollbarStyle","_elmStyle","scrollbarStructureRefreshHandleLength","structure","scrollbarStructureRefreshHandleOffset","getTransformValue","transform","bound","scroll","doRefreshScrollbarOffset","scrollbar","horizontalScrollbars","verticalScrollbars","scrollbarsAddRemoveClass","onlyHorizontal","singleAxis","runHorizontal","runVertical","refreshScrollbarsHandleLength","refreshScrollbarsHandleOffset","refreshScrollbarsScrollbarOffset","cushion","setScrollbarElementAnimation","styleScrollbarPosition","getTranslateValue","axisScroll","axisOverflowAmount","px","generateScrollbarDOM","scrollbarClassName","arrToPush","transitionlessClass","track","handle","generateHorizontalScrollbarStructure","generateVerticalScrollbarStructure","appendElements","_refreshScrollbarsHandleLength","_refreshScrollbarsHandleOffset","_refreshScrollbarsScrollbarOffset","_scrollbarsAddRemoveClass","_horizontal","_scrollbarStructures","_clone","_style","_vertical","createScrollbarsSetupEvents","_documentElm","refreshScrollbarStructuresHandleOffset","_selfClearTimeout","wheelTimeout","clearWheelTimeout","_selfClearTimeout2","requestHandleTransitionAnimationFrame","cancelHandleTransitionTimeout","refreshHandleOffsetTransition","scrollByFn","scrollBy","clientXYKey","widthHeightKey","leftTopKey","whKey","xyKey","isAffectingTransition","propertyName","createInteractiveScrollEvents","releasePointerCaptureEvents","createRelativeHandleMove","mouseDownScroll","invertedScale","deltaMovement","_scrollElementTo","handleTrackDiff","scrollDeltaPercent","scrollDelta","pointerDownEvent","isDragScroll","pointerCaptureElement","scrollbarOptions","button","isPrimary","pointerType","continuePointerDown","instantClickScroll","shiftKey","getHandleRect","getTrackRect","handleRect","trackRect","axisScale","pointerDownOffset","handleCenter","releasePointerCapture","pointerUpEvent","pointerId","pointerMoveEvent","relativeMovement","setPointerCapture","wheelScrollBy","wheelEvent","deltaX","deltaY","deltaMode","animateHandleOffset","createScrollbarsSetup","autoHideIsMove","autoHideIsLeave","autoHideNotNever","mouseInHost","prevTheme","instanceAutoHideSuspendScrollDestroyFn","instanceAutoHideDelay","requestMouseMoveAnimationFrame","cancelMouseMoveAnimationFrame","requestScrollAnimationFrame","cancelScrollAnimationFrame","_selfClearTimeout3","scrollTimeout","clearScrollTimeout","_selfClearTimeout4","auotHideMoveTimeout","clearAutoHideTimeout","_selfClearTimeout5","autoHideSuspendTimeout","clearAutoHideSuspendTimeout","_selfClearTimeout6","auotHideTimeout","clearAutoTimeout","_createScrollbarsSetu","_scrollEventElement","manageAutoHideSuspension","manageScrollbarsAutoHide","removeAutoHide","delayless","hide","isHoverablePointerType","onHostMouseEnter","_observersUpdateHints","_structureUpdateHints","_overflowEdgeChanged","_overflowAmountChanged","_overflowStyleChanged","_hasOverflow","themeChanged","visibilityChanged","autoHideChanged","_checkOption6","autoHideSuspendChanged","_checkOption7","_checkOption8","dragScrollChanged","_checkOption9","clickScrollChanged","trulyAppeared","updateScrollbars","updateVisibility","setScrollbarVisibility","isVisible","xVisible","yVisible","hasCorner","createStructureSetupElements","defaultInitElements","defaultHostInitialization","defaultPaddingInitialization","defaultViewportInitialization","defaultContentInitialization","targetIsElm","targetStructureInitialization","initElements","hostInitialization","paddingInitialization","viewportInitialization","contentInitialization","targetElement","isTextarea","docElement","documentElement","docWnd","defaultView","getFocusedElement","activeElement","focusElm","customActiveElm","focus","generalStaticInitializationElement","generalResolveInitialization","createNewDiv","generateViewportElement","generateContentElement","possibleViewportElement","viewportIsTarget","viewportIsTargetBody","possibleContentElement","viewportIsContent","defaultContentElementPresent","viewportIstContentViewport","viewportIsContentContent","nonBodyViewportElement","viewportElement","nonBodyHostElement","hostElement","contentElement","evaluatedTargetObj","_padding","_originalScrollOffsetElement","_windowElm","_viewportIsContent","viewportAttributeClassName","generatedElements","elementIsGenerated","isTextareaHostGenerated","targetContents","contentSlot","initActiveElm","unwrap","prepareWrapUnwrapFocus","stopImmediatePropagation","undoInitWrapUndwrapFocus","destroyActiveElm","undoDestroyWrapUndwrapFocus","tabIndexStr","ogTabindex","revertViewportTabIndex","off","createTrinsicUpdateSegment","_observersState","createPaddingUpdateSegment","updatePaddingCache","currentPaddingCache","_currentPaddingCache","paddingChanged","paddingAbsoluteChanged","contentMutation","_updatePaddingCache","paddingStyleChanged","_paddingStyle","_viewportStyle","paddingRelative","paddingHorizontal","paddingVertical","paddingStyle","viewportStyle","_paddingAbsolute","_paddingStyleChanged","createOverflowUpdateSegment","max0","whCacheOptions","xyCacheOptions","getOverflowAmount","viewportClientSize","tollerance","amount","updateSizeFraction","getCurrentSizeFraction","updateViewportScrollSizeCache","getCurrentViewportScrollSizeCache","_createCache3","updateOverflowAmountCache","getCurrentOverflowAmountCache","_createCache4","updateOverflowEdge","getCurrentOverflowEdgeCache","_createCache5","updateOverflowStyleCache","scrollbarsHidingPluginViewportArrangement","fixFlexboxGlue","_setStyles2","hostClientSize","isContentBox","subtractXScrollbar","overflowChanged","adjustFlexboxGlue","adjustViewportArrange","overflowXVisible","overflowYVisible","sizeFractionCache","viewportScrollSizeCache","overflowAmuntCache","overflowEdgeCache","preMeasureViewportOverflowState","_ref5","undoViewportArrangeOverflowState","_sizeFractionCache","sizeFractionChanged","_viewportScrollSizeCa","viewportScrollSizeChanged","arrangedViewportScrollSize","arrangedViewportClientSize","windowInnerSize","overflowAmountScrollSize","overflowAmountClientSize","_overflowEdgeCache","overflowEdge","overflowEdgeChanged","_overflowAmuntCache","overflowAmountChanged","_viewportScrollSizeCa2","_sizeFractionCache2","removeClipping","adjustViewportStyle","_updateOverflowStyleC","overflowStyleChanged","createStructureSetup","_createStructureSetup","appendStructureElements","canceled","updateSegments","updateInfo","adjustScrollOffset","updateSegment","createSetups","onUpdated","structureSetupCreate","structureSetupUpdate","structureSetupCanceled","_createObserversSetup","observersUpdateHints","observersSetupCreate","observersSetupUpdate","scrollbarsSetupCreate","scrollbarsSetupUpdate","scrollbarsSetupElements","updateHintsAreTruthy","hints","some","observerUpdateHints","rawChangedOptions","_changedOptions","rawForce","_cloneScrollbar","baseUpdateInfoObj","observersHints","structureHints","truthyObserversHints","truthyStructureHints","initialScroll","_observersSetupState","_structureSetupState","_structureSetupElements","_scrollbarsSetupElements","OverlayScrollbars","eventListeners","targetIsElement","instanceTarget","potentialInstance","instancePluginModuleInstances","newOptionsWithoutUndefined","pluginValidate","currentOptions","addPluginEvent","removePluginEvents","triggerPluginEvent","_createEventListenerH2","addInstanceEvent","removeInstanceEvents","triggerInstanceEvent","_createSetups","sizeChanged","directionChanged","hostMutation","setupsConstruct","setupsUpdate","setupsState","setupsElements","setupsCanceled","pure","base","on","_setupsState","_setupsElements$_stru","_setupsElements$_scro","translateScrollbarStructure","translateScrollbarsSetupElement","scrollbarsSetupElement","translatedStructure","scrollOffsetElement","scrollEventElement","scrollbarHorizontal","scrollbarVertical","plugins","isArr","pluginsToAdd","valid","hasElmsFn","_getEnvironment2","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","scrollTimeline","setDefaultInitialization","setDefaultOptions"],"mappings":"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","x_google_ignoreList":[27]}